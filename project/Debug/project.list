
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006770  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a14  08006a14  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006a14  08006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a1c  08006a1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a1c  08006a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000074  08006a98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08006a98  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ab8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b96  00000000  00000000  00033b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000366f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00037638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019260  00000000  00000000  00038440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132d2  00000000  00000000  000516a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc48  00000000  00000000  00064972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001005ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046fc  00000000  00000000  00100610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068f8 	.word	0x080068f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080068f8 	.word	0x080068f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d68:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000d98:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000da6:	2202      	movs	r2, #2
 8000da8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000dba:	f001 f97d 	bl	80020b8 <HAL_ADC_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000dc4:	f000 fcc2 	bl	800174c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000dda:	f001 fbff 	bl	80025dc <HAL_ADC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000de4:	f000 fcb2 	bl	800174c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_ADC1_Init+0xc0>)
 8000dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_ADC1_Init+0xb8>)
 8000df6:	f001 fbf1 	bl	80025dc <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000e00:	f000 fca4 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000a4 	.word	0x200000a4
 8000e10:	40012000 	.word	0x40012000
 8000e14:	10000012 	.word	0x10000012

08000e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a33      	ldr	r2, [pc, #204]	; (8000f04 <HAL_ADC_MspInit+0xec>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d15f      	bne.n	8000efa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_ADC_MspInit+0xf0>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <HAL_ADC_MspInit+0xf0>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_ADC_MspInit+0xf0>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_ADC_MspInit+0xf0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a2a      	ldr	r2, [pc, #168]	; (8000f08 <HAL_ADC_MspInit+0xf0>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_ADC_MspInit+0xf0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e72:	2302      	movs	r3, #2
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4821      	ldr	r0, [pc, #132]	; (8000f0c <HAL_ADC_MspInit+0xf4>)
 8000e86:	f002 fb77 	bl	8003578 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <HAL_ADC_MspInit+0xfc>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000eb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000ed0:	f001 ff50 	bl	8002d74 <HAL_DMA_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000eda:	f000 fc37 	bl	800174c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_ADC_MspInit+0xf8>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2012      	movs	r0, #18
 8000ef0:	f001 ff09 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ef4:	2012      	movs	r0, #18
 8000ef6:	f001 ff22 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40012000 	.word	0x40012000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	200000ec 	.word	0x200000ec
 8000f14:	40026410 	.word	0x40026410

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2038      	movs	r0, #56	; 0x38
 8000f40:	f001 fee1 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f44:	2038      	movs	r0, #56	; 0x38
 8000f46:	f001 fefa 	bl	8002d3e <HAL_NVIC_EnableIRQ>

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <wyswietlacz>:
 *
 *  Created on: Jan 22, 2022
 *      Author: jakub
 */
#include "gpio.h"
  void wyswietlacz (int cyfra, int port){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b09      	cmp	r3, #9
 8000f66:	f200 817f 	bhi.w	8001268 <wyswietlacz+0x310>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <wyswietlacz+0x18>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f99 	.word	0x08000f99
 8000f74:	08000fe1 	.word	0x08000fe1
 8000f78:	08001029 	.word	0x08001029
 8000f7c:	08001071 	.word	0x08001071
 8000f80:	080010b9 	.word	0x080010b9
 8000f84:	08001101 	.word	0x08001101
 8000f88:	08001149 	.word	0x08001149
 8000f8c:	08001191 	.word	0x08001191
 8000f90:	080011d9 	.word	0x080011d9
 8000f94:	08001221 	.word	0x08001221
  	  // obsługa cyfr
	  switch(cyfra){
	  case (0):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	48c7      	ldr	r0, [pc, #796]	; (80012bc <wyswietlacz+0x364>)
 8000f9e:	f002 fc6f 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	48c5      	ldr	r0, [pc, #788]	; (80012bc <wyswietlacz+0x364>)
 8000fa8:	f002 fc6a 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	2108      	movs	r1, #8
 8000fb0:	48c2      	ldr	r0, [pc, #776]	; (80012bc <wyswietlacz+0x364>)
 8000fb2:	f002 fc65 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2102      	movs	r1, #2
 8000fba:	48c0      	ldr	r0, [pc, #768]	; (80012bc <wyswietlacz+0x364>)
 8000fbc:	f002 fc60 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	48bd      	ldr	r0, [pc, #756]	; (80012bc <wyswietlacz+0x364>)
 8000fc6:	f002 fc5b 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2120      	movs	r1, #32
 8000fce:	48bb      	ldr	r0, [pc, #748]	; (80012bc <wyswietlacz+0x364>)
 8000fd0:	f002 fc56 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_RESET) ;
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	48b8      	ldr	r0, [pc, #736]	; (80012bc <wyswietlacz+0x364>)
 8000fda:	f002 fc51 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 8000fde:	e143      	b.n	8001268 <wyswietlacz+0x310>
	  case (1):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_RESET) ;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	48b5      	ldr	r0, [pc, #724]	; (80012bc <wyswietlacz+0x364>)
 8000fe6:	f002 fc4b 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	2110      	movs	r1, #16
 8000fee:	48b3      	ldr	r0, [pc, #716]	; (80012bc <wyswietlacz+0x364>)
 8000ff0:	f002 fc46 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	48b0      	ldr	r0, [pc, #704]	; (80012bc <wyswietlacz+0x364>)
 8000ffa:	f002 fc41 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_RESET) ;
 8000ffe:	2200      	movs	r2, #0
 8001000:	2102      	movs	r1, #2
 8001002:	48ae      	ldr	r0, [pc, #696]	; (80012bc <wyswietlacz+0x364>)
 8001004:	f002 fc3c 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 8001008:	2200      	movs	r2, #0
 800100a:	2104      	movs	r1, #4
 800100c:	48ab      	ldr	r0, [pc, #684]	; (80012bc <wyswietlacz+0x364>)
 800100e:	f002 fc37 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 8001012:	2200      	movs	r2, #0
 8001014:	2120      	movs	r1, #32
 8001016:	48a9      	ldr	r0, [pc, #676]	; (80012bc <wyswietlacz+0x364>)
 8001018:	f002 fc32 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_RESET) ;
 800101c:	2200      	movs	r2, #0
 800101e:	2101      	movs	r1, #1
 8001020:	48a6      	ldr	r0, [pc, #664]	; (80012bc <wyswietlacz+0x364>)
 8001022:	f002 fc2d 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 8001026:	e11f      	b.n	8001268 <wyswietlacz+0x310>
	  case (2):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001028:	2201      	movs	r2, #1
 800102a:	2140      	movs	r1, #64	; 0x40
 800102c:	48a3      	ldr	r0, [pc, #652]	; (80012bc <wyswietlacz+0x364>)
 800102e:	f002 fc27 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8001032:	2201      	movs	r2, #1
 8001034:	2110      	movs	r1, #16
 8001036:	48a1      	ldr	r0, [pc, #644]	; (80012bc <wyswietlacz+0x364>)
 8001038:	f002 fc22 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_RESET) ;
 800103c:	2200      	movs	r2, #0
 800103e:	2108      	movs	r1, #8
 8001040:	489e      	ldr	r0, [pc, #632]	; (80012bc <wyswietlacz+0x364>)
 8001042:	f002 fc1d 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 8001046:	2201      	movs	r2, #1
 8001048:	2102      	movs	r1, #2
 800104a:	489c      	ldr	r0, [pc, #624]	; (80012bc <wyswietlacz+0x364>)
 800104c:	f002 fc18 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 8001050:	2201      	movs	r2, #1
 8001052:	2104      	movs	r1, #4
 8001054:	4899      	ldr	r0, [pc, #612]	; (80012bc <wyswietlacz+0x364>)
 8001056:	f002 fc13 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 800105a:	2200      	movs	r2, #0
 800105c:	2120      	movs	r1, #32
 800105e:	4897      	ldr	r0, [pc, #604]	; (80012bc <wyswietlacz+0x364>)
 8001060:	f002 fc0e 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 8001064:	2201      	movs	r2, #1
 8001066:	2101      	movs	r1, #1
 8001068:	4894      	ldr	r0, [pc, #592]	; (80012bc <wyswietlacz+0x364>)
 800106a:	f002 fc09 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 800106e:	e0fb      	b.n	8001268 <wyswietlacz+0x310>
  	 case (3):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001070:	2201      	movs	r2, #1
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	4891      	ldr	r0, [pc, #580]	; (80012bc <wyswietlacz+0x364>)
 8001076:	f002 fc03 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 800107a:	2201      	movs	r2, #1
 800107c:	2110      	movs	r1, #16
 800107e:	488f      	ldr	r0, [pc, #572]	; (80012bc <wyswietlacz+0x364>)
 8001080:	f002 fbfe 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001084:	2201      	movs	r2, #1
 8001086:	2108      	movs	r1, #8
 8001088:	488c      	ldr	r0, [pc, #560]	; (80012bc <wyswietlacz+0x364>)
 800108a:	f002 fbf9 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 800108e:	2201      	movs	r2, #1
 8001090:	2102      	movs	r1, #2
 8001092:	488a      	ldr	r0, [pc, #552]	; (80012bc <wyswietlacz+0x364>)
 8001094:	f002 fbf4 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 8001098:	2200      	movs	r2, #0
 800109a:	2104      	movs	r1, #4
 800109c:	4887      	ldr	r0, [pc, #540]	; (80012bc <wyswietlacz+0x364>)
 800109e:	f002 fbef 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 80010a2:	2200      	movs	r2, #0
 80010a4:	2120      	movs	r1, #32
 80010a6:	4885      	ldr	r0, [pc, #532]	; (80012bc <wyswietlacz+0x364>)
 80010a8:	f002 fbea 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	2101      	movs	r1, #1
 80010b0:	4882      	ldr	r0, [pc, #520]	; (80012bc <wyswietlacz+0x364>)
 80010b2:	f002 fbe5 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 80010b6:	e0d7      	b.n	8001268 <wyswietlacz+0x310>
  	 case (4):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_RESET) ;
 80010b8:	2200      	movs	r2, #0
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	487f      	ldr	r0, [pc, #508]	; (80012bc <wyswietlacz+0x364>)
 80010be:	f002 fbdf 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	487d      	ldr	r0, [pc, #500]	; (80012bc <wyswietlacz+0x364>)
 80010c8:	f002 fbda 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	2108      	movs	r1, #8
 80010d0:	487a      	ldr	r0, [pc, #488]	; (80012bc <wyswietlacz+0x364>)
 80010d2:	f002 fbd5 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_RESET) ;
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4878      	ldr	r0, [pc, #480]	; (80012bc <wyswietlacz+0x364>)
 80010dc:	f002 fbd0 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 80010e0:	2200      	movs	r2, #0
 80010e2:	2104      	movs	r1, #4
 80010e4:	4875      	ldr	r0, [pc, #468]	; (80012bc <wyswietlacz+0x364>)
 80010e6:	f002 fbcb 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	2120      	movs	r1, #32
 80010ee:	4873      	ldr	r0, [pc, #460]	; (80012bc <wyswietlacz+0x364>)
 80010f0:	f002 fbc6 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	2101      	movs	r1, #1
 80010f8:	4870      	ldr	r0, [pc, #448]	; (80012bc <wyswietlacz+0x364>)
 80010fa:	f002 fbc1 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 80010fe:	e0b3      	b.n	8001268 <wyswietlacz+0x310>
  	 case (5):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001100:	2201      	movs	r2, #1
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	486d      	ldr	r0, [pc, #436]	; (80012bc <wyswietlacz+0x364>)
 8001106:	f002 fbbb 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_RESET) ;
 800110a:	2200      	movs	r2, #0
 800110c:	2110      	movs	r1, #16
 800110e:	486b      	ldr	r0, [pc, #428]	; (80012bc <wyswietlacz+0x364>)
 8001110:	f002 fbb6 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001114:	2201      	movs	r2, #1
 8001116:	2108      	movs	r1, #8
 8001118:	4868      	ldr	r0, [pc, #416]	; (80012bc <wyswietlacz+0x364>)
 800111a:	f002 fbb1 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 800111e:	2201      	movs	r2, #1
 8001120:	2102      	movs	r1, #2
 8001122:	4866      	ldr	r0, [pc, #408]	; (80012bc <wyswietlacz+0x364>)
 8001124:	f002 fbac 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 8001128:	2200      	movs	r2, #0
 800112a:	2104      	movs	r1, #4
 800112c:	4863      	ldr	r0, [pc, #396]	; (80012bc <wyswietlacz+0x364>)
 800112e:	f002 fba7 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 8001132:	2201      	movs	r2, #1
 8001134:	2120      	movs	r1, #32
 8001136:	4861      	ldr	r0, [pc, #388]	; (80012bc <wyswietlacz+0x364>)
 8001138:	f002 fba2 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 800113c:	2201      	movs	r2, #1
 800113e:	2101      	movs	r1, #1
 8001140:	485e      	ldr	r0, [pc, #376]	; (80012bc <wyswietlacz+0x364>)
 8001142:	f002 fb9d 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 8001146:	e08f      	b.n	8001268 <wyswietlacz+0x310>
  	 case (6):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	485b      	ldr	r0, [pc, #364]	; (80012bc <wyswietlacz+0x364>)
 800114e:	f002 fb97 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_RESET) ;
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	4859      	ldr	r0, [pc, #356]	; (80012bc <wyswietlacz+0x364>)
 8001158:	f002 fb92 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 800115c:	2201      	movs	r2, #1
 800115e:	2108      	movs	r1, #8
 8001160:	4856      	ldr	r0, [pc, #344]	; (80012bc <wyswietlacz+0x364>)
 8001162:	f002 fb8d 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 8001166:	2201      	movs	r2, #1
 8001168:	2102      	movs	r1, #2
 800116a:	4854      	ldr	r0, [pc, #336]	; (80012bc <wyswietlacz+0x364>)
 800116c:	f002 fb88 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 8001170:	2201      	movs	r2, #1
 8001172:	2104      	movs	r1, #4
 8001174:	4851      	ldr	r0, [pc, #324]	; (80012bc <wyswietlacz+0x364>)
 8001176:	f002 fb83 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 800117a:	2201      	movs	r2, #1
 800117c:	2120      	movs	r1, #32
 800117e:	484f      	ldr	r0, [pc, #316]	; (80012bc <wyswietlacz+0x364>)
 8001180:	f002 fb7e 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 8001184:	2201      	movs	r2, #1
 8001186:	2101      	movs	r1, #1
 8001188:	484c      	ldr	r0, [pc, #304]	; (80012bc <wyswietlacz+0x364>)
 800118a:	f002 fb79 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 800118e:	e06b      	b.n	8001268 <wyswietlacz+0x310>
  	 case (7):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001190:	2201      	movs	r2, #1
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	4849      	ldr	r0, [pc, #292]	; (80012bc <wyswietlacz+0x364>)
 8001196:	f002 fb73 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 800119a:	2201      	movs	r2, #1
 800119c:	2110      	movs	r1, #16
 800119e:	4847      	ldr	r0, [pc, #284]	; (80012bc <wyswietlacz+0x364>)
 80011a0:	f002 fb6e 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	2108      	movs	r1, #8
 80011a8:	4844      	ldr	r0, [pc, #272]	; (80012bc <wyswietlacz+0x364>)
 80011aa:	f002 fb69 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_RESET) ;
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	4842      	ldr	r0, [pc, #264]	; (80012bc <wyswietlacz+0x364>)
 80011b4:	f002 fb64 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 80011b8:	2200      	movs	r2, #0
 80011ba:	2104      	movs	r1, #4
 80011bc:	483f      	ldr	r0, [pc, #252]	; (80012bc <wyswietlacz+0x364>)
 80011be:	f002 fb5f 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	483d      	ldr	r0, [pc, #244]	; (80012bc <wyswietlacz+0x364>)
 80011c8:	f002 fb5a 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_RESET) ;
 80011cc:	2200      	movs	r2, #0
 80011ce:	2101      	movs	r1, #1
 80011d0:	483a      	ldr	r0, [pc, #232]	; (80012bc <wyswietlacz+0x364>)
 80011d2:	f002 fb55 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 80011d6:	e047      	b.n	8001268 <wyswietlacz+0x310>
  	 case (8):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	4837      	ldr	r0, [pc, #220]	; (80012bc <wyswietlacz+0x364>)
 80011de:	f002 fb4f 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	4835      	ldr	r0, [pc, #212]	; (80012bc <wyswietlacz+0x364>)
 80011e8:	f002 fb4a 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	2108      	movs	r1, #8
 80011f0:	4832      	ldr	r0, [pc, #200]	; (80012bc <wyswietlacz+0x364>)
 80011f2:	f002 fb45 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	2102      	movs	r1, #2
 80011fa:	4830      	ldr	r0, [pc, #192]	; (80012bc <wyswietlacz+0x364>)
 80011fc:	f002 fb40 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 8001200:	2201      	movs	r2, #1
 8001202:	2104      	movs	r1, #4
 8001204:	482d      	ldr	r0, [pc, #180]	; (80012bc <wyswietlacz+0x364>)
 8001206:	f002 fb3b 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 800120a:	2201      	movs	r2, #1
 800120c:	2120      	movs	r1, #32
 800120e:	482b      	ldr	r0, [pc, #172]	; (80012bc <wyswietlacz+0x364>)
 8001210:	f002 fb36 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 8001214:	2201      	movs	r2, #1
 8001216:	2101      	movs	r1, #1
 8001218:	4828      	ldr	r0, [pc, #160]	; (80012bc <wyswietlacz+0x364>)
 800121a:	f002 fb31 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 800121e:	e023      	b.n	8001268 <wyswietlacz+0x310>
  	 case (9):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001220:	2201      	movs	r2, #1
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4825      	ldr	r0, [pc, #148]	; (80012bc <wyswietlacz+0x364>)
 8001226:	f002 fb2b 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 800122a:	2201      	movs	r2, #1
 800122c:	2110      	movs	r1, #16
 800122e:	4823      	ldr	r0, [pc, #140]	; (80012bc <wyswietlacz+0x364>)
 8001230:	f002 fb26 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4820      	ldr	r0, [pc, #128]	; (80012bc <wyswietlacz+0x364>)
 800123a:	f002 fb21 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 800123e:	2201      	movs	r2, #1
 8001240:	2102      	movs	r1, #2
 8001242:	481e      	ldr	r0, [pc, #120]	; (80012bc <wyswietlacz+0x364>)
 8001244:	f002 fb1c 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 8001248:	2200      	movs	r2, #0
 800124a:	2104      	movs	r1, #4
 800124c:	481b      	ldr	r0, [pc, #108]	; (80012bc <wyswietlacz+0x364>)
 800124e:	f002 fb17 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 8001252:	2201      	movs	r2, #1
 8001254:	2120      	movs	r1, #32
 8001256:	4819      	ldr	r0, [pc, #100]	; (80012bc <wyswietlacz+0x364>)
 8001258:	f002 fb12 	bl	8003880 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 800125c:	2201      	movs	r2, #1
 800125e:	2101      	movs	r1, #1
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <wyswietlacz+0x364>)
 8001262:	f002 fb0d 	bl	8003880 <HAL_GPIO_WritePin>
  		  break;
 8001266:	bf00      	nop
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3b01      	subs	r3, #1
 800126c:	2b03      	cmp	r3, #3
 800126e:	d872      	bhi.n	8001356 <wyswietlacz+0x3fe>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <wyswietlacz+0x320>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001289 	.word	0x08001289
 800127c:	080012c1 	.word	0x080012c1
 8001280:	080012f3 	.word	0x080012f3
 8001284:	08001325 	.word	0x08001325
	  }

  	 // obsługa portów
	 switch(port){
	 case (1):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_RESET) ;
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <wyswietlacz+0x364>)
 8001290:	f002 faf6 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_SET) ;
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	4808      	ldr	r0, [pc, #32]	; (80012bc <wyswietlacz+0x364>)
 800129c:	f002 faf0 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_SET) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <wyswietlacz+0x364>)
 80012a8:	f002 faea 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_SET) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4802      	ldr	r0, [pc, #8]	; (80012bc <wyswietlacz+0x364>)
 80012b4:	f002 fae4 	bl	8003880 <HAL_GPIO_WritePin>
 		 break;
 80012b8:	e04d      	b.n	8001356 <wyswietlacz+0x3fe>
 80012ba:	bf00      	nop
 80012bc:	40020800 	.word	0x40020800
	 case (2):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_SET) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c6:	4826      	ldr	r0, [pc, #152]	; (8001360 <wyswietlacz+0x408>)
 80012c8:	f002 fada 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_RESET) ;
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d2:	4823      	ldr	r0, [pc, #140]	; (8001360 <wyswietlacz+0x408>)
 80012d4:	f002 fad4 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_SET) ;
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012de:	4820      	ldr	r0, [pc, #128]	; (8001360 <wyswietlacz+0x408>)
 80012e0:	f002 face 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_SET) ;
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ea:	481d      	ldr	r0, [pc, #116]	; (8001360 <wyswietlacz+0x408>)
 80012ec:	f002 fac8 	bl	8003880 <HAL_GPIO_WritePin>
 		 break;
 80012f0:	e031      	b.n	8001356 <wyswietlacz+0x3fe>
	 case (3):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_SET) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <wyswietlacz+0x408>)
 80012fa:	f002 fac1 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_SET) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	4816      	ldr	r0, [pc, #88]	; (8001360 <wyswietlacz+0x408>)
 8001306:	f002 fabb 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_RESET) ;
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <wyswietlacz+0x408>)
 8001312:	f002 fab5 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_SET) ;
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <wyswietlacz+0x408>)
 800131e:	f002 faaf 	bl	8003880 <HAL_GPIO_WritePin>
 		 break;
 8001322:	e018      	b.n	8001356 <wyswietlacz+0x3fe>
	 case (4):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_SET) ;
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <wyswietlacz+0x408>)
 800132c:	f002 faa8 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_SET) ;
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <wyswietlacz+0x408>)
 8001338:	f002 faa2 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_SET) ;
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <wyswietlacz+0x408>)
 8001344:	f002 fa9c 	bl	8003880 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_RESET) ;
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <wyswietlacz+0x408>)
 8001350:	f002 fa96 	bl	8003880 <HAL_GPIO_WritePin>
 		 break;
 8001354:	bf00      	nop
	 }



   }
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020800 	.word	0x40020800

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <MX_GPIO_Init+0x138>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a46      	ldr	r2, [pc, #280]	; (800149c <MX_GPIO_Init+0x138>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <MX_GPIO_Init+0x138>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <MX_GPIO_Init+0x138>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a3f      	ldr	r2, [pc, #252]	; (800149c <MX_GPIO_Init+0x138>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <MX_GPIO_Init+0x138>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <MX_GPIO_Init+0x138>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a38      	ldr	r2, [pc, #224]	; (800149c <MX_GPIO_Init+0x138>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <MX_GPIO_Init+0x138>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <MX_GPIO_Init+0x138>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a31      	ldr	r2, [pc, #196]	; (800149c <MX_GPIO_Init+0x138>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <MX_GPIO_Init+0x138>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_Pin|D_Pin|E_Pin|C_Pin
 80013ea:	2200      	movs	r2, #0
 80013ec:	f640 71ff 	movw	r1, #4095	; 0xfff
 80013f0:	482b      	ldr	r0, [pc, #172]	; (80014a0 <MX_GPIO_Init+0x13c>)
 80013f2:	f002 fa45 	bl	8003880 <HAL_GPIO_WritePin>
                          |B_Pin|F_Pin|A_Pin|DP_Pin
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80013fc:	4829      	ldr	r0, [pc, #164]	; (80014a4 <MX_GPIO_Init+0x140>)
 80013fe:	f002 fa3f 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001408:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4821      	ldr	r0, [pc, #132]	; (80014a0 <MX_GPIO_Init+0x13c>)
 800141a:	f002 f8ad 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = G_Pin|D_Pin|E_Pin|C_Pin
 800141e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001422:	617b      	str	r3, [r7, #20]
                          |B_Pin|F_Pin|A_Pin|DP_Pin
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	481a      	ldr	r0, [pc, #104]	; (80014a0 <MX_GPIO_Init+0x13c>)
 8001438:	f002 f89e 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 800143c:	2321      	movs	r3, #33	; 0x21
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001440:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_GPIO_Init+0x140>)
 8001452:	f002 f891 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001456:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_GPIO_Init+0x140>)
 8001470:	f002 f882 	bl	8003578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2006      	movs	r0, #6
 800147a:	f001 fc44 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800147e:	2006      	movs	r0, #6
 8001480:	f001 fc5d 	bl	8002d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2017      	movs	r0, #23
 800148a:	f001 fc3c 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800148e:	2017      	movs	r0, #23
 8001490:	f001 fc55 	bl	8002d3e <HAL_NVIC_EnableIRQ>

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020400 	.word	0x40020400

080014a8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80014b0:	1d39      	adds	r1, r7, #4
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	2201      	movs	r2, #1
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <__io_putchar+0x20>)
 80014ba:	f003 fb1a 	bl	8004af2 <HAL_UART_Transmit>
return ch;
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000200 	.word	0x20000200

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d0:	f000 fd80 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d4:	f000 f82a 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d8:	f7ff ff44 	bl	8001364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014dc:	f000 fcd6 	bl	8001e8c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80014e0:	f7ff fd1a 	bl	8000f18 <MX_DMA_Init>
  MX_TIM1_Init();
 80014e4:	f000 fa78 	bl	80019d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80014e8:	f7ff fc34 	bl	8000d54 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014ec:	f000 fac4 	bl	8001a78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <main+0x48>)
 80014f2:	f002 febb 	bl	800426c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDMABuff, 2);
 80014f6:	2202      	movs	r2, #2
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <main+0x4c>)
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <main+0x50>)
 80014fc:	f000 ff60 	bl	80023c0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001500:	4807      	ldr	r0, [pc, #28]	; (8001520 <main+0x54>)
 8001502:	f002 feb3 	bl	800426c <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart2, &RXdata, 1);
 8001506:	2201      	movs	r2, #1
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <main+0x58>)
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <main+0x5c>)
 800150c:	f003 fb83 	bl	8004c16 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001510:	e7fe      	b.n	8001510 <main+0x44>
 8001512:	bf00      	nop
 8001514:	20000168 	.word	0x20000168
 8001518:	2000014c 	.word	0x2000014c
 800151c:	200000a4 	.word	0x200000a4
 8001520:	200001b0 	.word	0x200001b0
 8001524:	20000150 	.word	0x20000150
 8001528:	20000200 	.word	0x20000200

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	; 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fa7e 	bl	8005a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <SystemClock_Config+0xc8>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a26      	ldr	r2, [pc, #152]	; (80015f4 <SystemClock_Config+0xc8>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <SystemClock_Config+0xc8>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <SystemClock_Config+0xcc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <SystemClock_Config+0xcc>)
 8001576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <SystemClock_Config+0xcc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800159c:	2308      	movs	r3, #8
 800159e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 f997 	bl	80038e4 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015bc:	f000 f8c6 	bl	800174c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2103      	movs	r1, #3
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 fbf9 	bl	8003dd4 <HAL_RCC_ClockConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015e8:	f000 f8b0 	bl	800174c <Error_Handler>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3750      	adds	r7, #80	; 0x50
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000
 80015fc:	00000000 	.word	0x00000000

08001600 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

//	ADCRes = HAL_ADC_GetValue(&hadc1);                    // 0-4095 == 0-3.3V
	fotorezystor = ADCDMABuff[0];
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_ADC_ConvCpltCallback+0xbc>)
 8001610:	601a      	str	r2, [r3, #0]
	fotorezystor = (uint16_t)(3.3 * (double)fotorezystor / 4.095);    // [mV]
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_ADC_ConvCpltCallback+0xbc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff74 	bl	8000504 <__aeabi_ui2d>
 800161c:	a322      	add	r3, pc, #136	; (adr r3, 80016a8 <HAL_ADC_ConvCpltCallback+0xa8>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe ffe9 	bl	80005f8 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	a320      	add	r3, pc, #128	; (adr r3, 80016b0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f90a 	bl	800084c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff f9ec 	bl	8000a1c <__aeabi_d2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_ADC_ConvCpltCallback+0xbc>)
 800164c:	601a      	str	r2, [r3, #0]

	temperatura = ((uint16_t)(3.3 * (double)ADCDMABuff[1] / 4.095) - 500) / 10;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001650:	885b      	ldrh	r3, [r3, #2]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff56 	bl	8000504 <__aeabi_ui2d>
 8001658:	a313      	add	r3, pc, #76	; (adr r3, 80016a8 <HAL_ADC_ConvCpltCallback+0xa8>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffcb 	bl	80005f8 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	a311      	add	r3, pc, #68	; (adr r3, 80016b0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7ff f8ec 	bl	800084c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff f9ce 	bl	8000a1c <__aeabi_d2uiz>
 8001680:	4603      	mov	r3, r0
 8001682:	b29b      	uxth	r3, r3
 8001684:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_ADC_ConvCpltCallback+0xc0>)
 800168a:	fb82 1203 	smull	r1, r2, r2, r3
 800168e:	1092      	asrs	r2, r2, #2
 8001690:	17db      	asrs	r3, r3, #31
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	f3af 8000 	nop.w
 80016a8:	66666666 	.word	0x66666666
 80016ac:	400a6666 	.word	0x400a6666
 80016b0:	ae147ae1 	.word	0xae147ae1
 80016b4:	40106147 	.word	0x40106147
 80016b8:	2000014c 	.word	0x2000014c
 80016bc:	20000154 	.word	0x20000154
 80016c0:	66666667 	.word	0x66666667
 80016c4:	20000158 	.word	0x20000158

080016c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

	if(RXdata == 's')
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_UART_RxCpltCallback+0x68>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b73      	cmp	r3, #115	; 0x73
 80016d8:	d106      	bne.n	80016e8 <HAL_UART_RxCpltCallback+0x20>
	{
		printf("Fotorezystor: %d\r\n",(int)fotorezystor);
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_UART_RxCpltCallback+0x6c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	4815      	ldr	r0, [pc, #84]	; (8001738 <HAL_UART_RxCpltCallback+0x70>)
 80016e2:	f004 f9b3 	bl	8005a4c <iprintf>
 80016e6:	e019      	b.n	800171c <HAL_UART_RxCpltCallback+0x54>
	}
	else if(RXdata == 't')
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_UART_RxCpltCallback+0x68>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b74      	cmp	r3, #116	; 0x74
 80016f0:	d106      	bne.n	8001700 <HAL_UART_RxCpltCallback+0x38>
	{
		printf("Temperatura: %d\r\n",(int)temperatura);
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_UART_RxCpltCallback+0x74>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4619      	mov	r1, r3
 80016f8:	4811      	ldr	r0, [pc, #68]	; (8001740 <HAL_UART_RxCpltCallback+0x78>)
 80016fa:	f004 f9a7 	bl	8005a4c <iprintf>
 80016fe:	e00d      	b.n	800171c <HAL_UART_RxCpltCallback+0x54>
	}
	else if(RXdata == 'a')
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_UART_RxCpltCallback+0x68>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b61      	cmp	r3, #97	; 0x61
 8001708:	d108      	bne.n	800171c <HAL_UART_RxCpltCallback+0x54>
	{
		printf("Fotorezystor: %d\tTemperatura: %d\r\n", (int)fotorezystor, (int)temperatura);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_UART_RxCpltCallback+0x6c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_UART_RxCpltCallback+0x74>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <HAL_UART_RxCpltCallback+0x7c>)
 8001718:	f004 f998 	bl	8005a4c <iprintf>

	}


	HAL_UART_Receive_IT(&huart2, &RXdata, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	4904      	ldr	r1, [pc, #16]	; (8001730 <HAL_UART_RxCpltCallback+0x68>)
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <HAL_UART_RxCpltCallback+0x80>)
 8001722:	f003 fa78 	bl	8004c16 <HAL_UART_Receive_IT>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000150 	.word	0x20000150
 8001734:	20000154 	.word	0x20000154
 8001738:	08006910 	.word	0x08006910
 800173c:	20000158 	.word	0x20000158
 8001740:	08006924 	.word	0x08006924
 8001744:	08006938 	.word	0x08006938
 8001748:	20000200 	.word	0x20000200

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>
	...

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_MspInit+0x4c>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_MspInit+0x4c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001796:	2007      	movs	r0, #7
 8001798:	f001 faaa 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 fc40 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(G_Pin);
 8001800:	2001      	movs	r0, #1
 8001802:	f002 f857 	bl	80038b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <ADC_IRQHandler+0x10>)
 8001812:	f000 fc94 	bl	800213e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200000a4 	.word	0x200000a4

08001820 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(F_Pin);
 8001824:	2020      	movs	r0, #32
 8001826:	f002 f845 	bl	80038b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001836:	f002 fd7b 	bl	8004330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000168 	.word	0x20000168

08001844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <USART2_IRQHandler+0x10>)
 800184a:	f003 fa15 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000200 	.word	0x20000200

08001858 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <DMA2_Stream0_IRQHandler+0x10>)
 800185e:	f001 fc21 	bl	80030a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200000ec 	.word	0x200000ec

0800186c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	4601      	mov	r1, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf0      	blt.n	800187e <_read+0x12>
	}

return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e009      	b.n	80018cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fdf1 	bl	80014a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf1      	blt.n	80018b8 <_write+0x12>
	}
	return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001906:	605a      	str	r2, [r3, #4]
	return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_isatty>:

int _isatty(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f004 f836 	bl	80059e8 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20020000 	.word	0x20020000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000090 	.word	0x20000090
 80019b0:	20000258 	.word	0x20000258

080019b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <MX_TIM1_Init+0x98>)
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <MX_TIM1_Init+0x9c>)
 80019f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <MX_TIM1_Init+0x98>)
 80019fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a0a:	2263      	movs	r2, #99	; 0x63
 8001a0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a20:	4813      	ldr	r0, [pc, #76]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a22:	f002 fbd3 	bl	80041cc <HAL_TIM_Base_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a2c:	f7ff fe8e 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a3e:	f002 fd7f 	bl	8004540 <HAL_TIM_ConfigClockSource>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a48:	f7ff fe80 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_TIM1_Init+0x98>)
 8001a5a:	f002 ff7b 	bl	8004954 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a64:	f7ff fe72 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000168 	.word	0x20000168
 8001a74:	40010000 	.word	0x40010000

08001a78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001a9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001abe:	4814      	ldr	r0, [pc, #80]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001ac0:	f002 fb84 	bl	80041cc <HAL_TIM_Base_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aca:	f7ff fe3f 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001adc:	f002 fd30 	bl	8004540 <HAL_TIM_ConfigClockSource>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ae6:	f7ff fe31 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aea:	2320      	movs	r3, #32
 8001aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <MX_TIM2_Init+0x98>)
 8001af8:	f002 ff2c 	bl	8004954 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b02:	f7ff fe23 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200001b0 	.word	0x200001b0

08001b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_TIM_Base_MspInit+0x70>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d116      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_TIM_Base_MspInit+0x74>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_TIM_Base_MspInit+0x74>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_TIM_Base_MspInit+0x74>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2019      	movs	r0, #25
 8001b48:	f001 f8dd 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b4c:	2019      	movs	r0, #25
 8001b4e:	f001 f8f6 	bl	8002d3e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b52:	e012      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5c:	d10d      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_TIM_Base_MspInit+0x74>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_TIM_Base_MspInit+0x74>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_TIM_Base_MspInit+0x74>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_GPIO_EXTI_Callback>:
uint32_t setki;
uint32_t dziesiatki;
uint32_t jednosci;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == S1_Pin){
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x16>
			cnt = 0;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_GPIO_EXTI_Callback+0x30>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == S2_Pin){
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d102      	bne.n	8001bae <HAL_GPIO_EXTI_Callback+0x22>
			cnt = 1;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_GPIO_EXTI_Callback+0x30>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
	}

	}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

	  if (cnt == 0){
 8001bc8:	4ba3      	ldr	r3, [pc, #652]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 809d 	bne.w	8001d0c <HAL_TIM_PeriodElapsedCallback+0x14c>
		 czas_wyswietlacz_1 ++;
 8001bd2:	4ba2      	ldr	r3, [pc, #648]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4aa0      	ldr	r2, [pc, #640]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bda:	6013      	str	r3, [r2, #0]
		 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	489f      	ldr	r0, [pc, #636]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001be2:	f001 fe4d 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	489d      	ldr	r0, [pc, #628]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bec:	f001 fe48 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf6:	489a      	ldr	r0, [pc, #616]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bf8:	f001 fe42 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c02:	4897      	ldr	r0, [pc, #604]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c04:	f001 fe3c 	bl	8003880 <HAL_GPIO_WritePin>

		  tysiace = (double)(fotorezystor/1000);
 8001c08:	4b96      	ldr	r3, [pc, #600]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc75 	bl	8000504 <__aeabi_ui2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe fefb 	bl	8000a1c <__aeabi_d2uiz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a90      	ldr	r2, [pc, #576]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c2a:	6013      	str	r3, [r2, #0]
		  setki  = (double)(fotorezystor/100 - tysiace*10);
 8001c2c:	4b8d      	ldr	r3, [pc, #564]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a8f      	ldr	r2, [pc, #572]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0959      	lsrs	r1, r3, #5
 8001c38:	4b8c      	ldr	r3, [pc, #560]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	1acb      	subs	r3, r1, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc5c 	bl	8000504 <__aeabi_ui2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fee2 	bl	8000a1c <__aeabi_d2uiz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a86      	ldr	r2, [pc, #536]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c5c:	6013      	str	r3, [r2, #0]
		  dziesiatki = (double)(fotorezystor/10 - tysiace*100 - setki*10);
 8001c5e:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a85      	ldr	r2, [pc, #532]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	4b80      	ldr	r3, [pc, #512]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2164      	movs	r1, #100	; 0x64
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	1ad1      	subs	r1, r2, r3
 8001c76:	4b7f      	ldr	r3, [pc, #508]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	1acb      	subs	r3, r1, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc3d 	bl	8000504 <__aeabi_ui2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe fec3 	bl	8000a1c <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a78      	ldr	r2, [pc, #480]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c9a:	6013      	str	r3, [r2, #0]
		  jednosci = fotorezystor % 10;
 8001c9c:	4b71      	ldr	r3, [pc, #452]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	1aca      	subs	r2, r1, r3
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001cb4:	601a      	str	r2, [r3, #0]


		 if(czas_wyswietlacz_1 == 1){
 8001cb6:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x10a>
			 wyswietlacz(tysiace, 1);
 8001cbe:	4b6b      	ldr	r3, [pc, #428]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f947 	bl	8000f58 <wyswietlacz>
		 }
		 if(czas_wyswietlacz_1 == 2){
 8001cca:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d105      	bne.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x11e>
			 wyswietlacz(setki, 2);
 8001cd2:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f93d 	bl	8000f58 <wyswietlacz>
		 }
		 if(czas_wyswietlacz_1 == 3){
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d105      	bne.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0x132>
			 wyswietlacz(dziesiatki, 3);
 8001ce6:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2103      	movs	r1, #3
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f933 	bl	8000f58 <wyswietlacz>
		 }
		 if(czas_wyswietlacz_1 == 4){
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d108      	bne.n	8001d0c <HAL_TIM_PeriodElapsedCallback+0x14c>
			 wyswietlacz(jednosci, 4);
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2104      	movs	r1, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f929 	bl	8000f58 <wyswietlacz>
			 czas_wyswietlacz_1 = 0;
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
		 }
	  }

	  if (cnt == 1){
 8001d0c:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f040 809d 	bne.w	8001e50 <HAL_TIM_PeriodElapsedCallback+0x290>
		 czas_wyswietlacz_2 ++;
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	4a59      	ldr	r2, [pc, #356]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d1e:	6013      	str	r3, [r2, #0]
		 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	484e      	ldr	r0, [pc, #312]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d26:	f001 fdab 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	484c      	ldr	r0, [pc, #304]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d30:	f001 fda6 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET) ;
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3a:	4849      	ldr	r0, [pc, #292]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d3c:	f001 fda0 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET) ;
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d46:	4846      	ldr	r0, [pc, #280]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d48:	f001 fd9a 	bl	8003880 <HAL_GPIO_WritePin>

	    tysiace = (double)(temperatura/1000);
 8001d4c:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbd3 	bl	8000504 <__aeabi_ui2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe fe59 	bl	8000a1c <__aeabi_d2uiz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d6e:	6013      	str	r3, [r2, #0]
	    setki  = (double)(temperatura/100 - tysiace*10);
 8001d70:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3e      	ldr	r2, [pc, #248]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0959      	lsrs	r1, r3, #5
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	1acb      	subs	r3, r1, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbba 	bl	8000504 <__aeabi_ui2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe fe40 	bl	8000a1c <__aeabi_d2uiz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a35      	ldr	r2, [pc, #212]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001da0:	6013      	str	r3, [r2, #0]
	    dziesiatki = (double)(temperatura/10 - tysiace*100 - setki*10);
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2164      	movs	r1, #100	; 0x64
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	1ad1      	subs	r1, r2, r3
 8001dba:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	1acb      	subs	r3, r1, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb9b 	bl	8000504 <__aeabi_ui2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe fe21 	bl	8000a1c <__aeabi_d2uiz>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001dde:	6013      	str	r3, [r2, #0]
	    jednosci = temperatura % 10;
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001de6:	fba3 2301 	umull	r2, r3, r3, r1
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	1aca      	subs	r2, r1, r3
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001df8:	601a      	str	r2, [r3, #0]


		 if(czas_wyswietlacz_2 == 1){
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_TIM_PeriodElapsedCallback+0x24e>
			 wyswietlacz(tysiace, 1);
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f8a5 	bl	8000f58 <wyswietlacz>
		 }
		 if(czas_wyswietlacz_2 == 2){
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d105      	bne.n	8001e22 <HAL_TIM_PeriodElapsedCallback+0x262>
			 wyswietlacz(setki, 2);
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f89b 	bl	8000f58 <wyswietlacz>
		 }
		 if(czas_wyswietlacz_2 == 3){
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d105      	bne.n	8001e36 <HAL_TIM_PeriodElapsedCallback+0x276>
			 wyswietlacz(dziesiatki, 3);
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2103      	movs	r1, #3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f891 	bl	8000f58 <wyswietlacz>
		 }
		 if(czas_wyswietlacz_2 == 4){
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d108      	bne.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x290>
			 wyswietlacz(jednosci, 4);
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2104      	movs	r1, #4
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f887 	bl	8000f58 <wyswietlacz>
			 czas_wyswietlacz_2 = 0;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
		 }

	  }


}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	20000094 	.word	0x20000094
 8001e60:	40020400 	.word	0x40020400
 8001e64:	20000154 	.word	0x20000154
 8001e68:	10624dd3 	.word	0x10624dd3
 8001e6c:	20000164 	.word	0x20000164
 8001e70:	51eb851f 	.word	0x51eb851f
 8001e74:	20000160 	.word	0x20000160
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	200001fc 	.word	0x200001fc
 8001e80:	200001f8 	.word	0x200001f8
 8001e84:	20000098 	.word	0x20000098
 8001e88:	20000158 	.word	0x20000158

08001e8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_USART2_UART_Init+0x50>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	f002 fdc8 	bl	8004a58 <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ece:	f7ff fc3d 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000200 	.word	0x20000200
 8001edc:	40004400 	.word	0x40004400

08001ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d133      	bne.n	8001f6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_UART_MspInit+0x9c>)
 8001f56:	f001 fb0f 	bl	8003578 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2026      	movs	r0, #38	; 0x26
 8001f60:	f000 fed1 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f64:	2026      	movs	r0, #38	; 0x26
 8001f66:	f000 feea 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40004400 	.word	0x40004400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	; (8001fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001faa:	f7ff fd03 	bl	80019b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f003 fd21 	bl	80059f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7ff fa8b 	bl	80014cc <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fc4:	08006a24 	.word	0x08006a24
  ldr r2, =_sbss
 8001fc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fcc:	20000258 	.word	0x20000258

08001fd0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <DMA1_Stream0_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_Init+0x40>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_Init+0x40>)
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_Init+0x40>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 fe77 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff fba6 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fe8f 	bl	8002d5a <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 fe57 	bl	8002d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000000 	.word	0x20000000
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2000000c 	.word	0x2000000c
 800209c:	20000244 	.word	0x20000244

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000244 	.word	0x20000244

080020b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e033      	b.n	8002136 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fe9e 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020fe:	f023 0302 	bic.w	r3, r3, #2
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fb98 	bl	8002840 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
 8002126:	e001      	b.n	800212c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b02      	cmp	r3, #2
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b20      	cmp	r3, #32
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d049      	beq.n	8002214 <HAL_ADC_IRQHandler+0xd6>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d046      	beq.n	8002214 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d12b      	bne.n	8002204 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d127      	bne.n	8002204 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d119      	bne.n	8002204 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0220 	bic.w	r2, r2, #32
 80021de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff f9fb 	bl	8001600 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f06f 0212 	mvn.w	r2, #18
 8002212:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b80      	cmp	r3, #128	; 0x80
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d057      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x1b8>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d054      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d139      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800228a:	2b00      	cmp	r3, #0
 800228c:	d12b      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d124      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11d      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d119      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fc28 	bl	8002b3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 020c 	mvn.w	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <HAL_ADC_IRQHandler+0x21a>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d014      	beq.n	8002358 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10d      	bne.n	8002358 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f933 	bl	80025b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f06f 0201 	mvn.w	r2, #1
 8002356:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b20      	cmp	r3, #32
 8002364:	bf0c      	ite	eq
 8002366:	2301      	moveq	r3, #1
 8002368:	2300      	movne	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800237c:	bf0c      	ite	eq
 800237e:	2301      	moveq	r3, #1
 8002380:	2300      	movne	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_ADC_IRQHandler+0x27a>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f043 0202 	orr.w	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0220 	mvn.w	r2, #32
 80023a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f90d 	bl	80025c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f06f 0220 	mvn.w	r2, #32
 80023b6:	601a      	str	r2, [r3, #0]
  }
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Start_DMA+0x1e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0ce      	b.n	800257c <HAL_ADC_Start_DMA+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d018      	beq.n	8002426 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002404:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_ADC_Start_DMA+0x1c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a5f      	ldr	r2, [pc, #380]	; (8002588 <HAL_ADC_Start_DMA+0x1c8>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9a      	lsrs	r2, r3, #18
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002418:	e002      	b.n	8002420 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3b01      	subs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002434:	d107      	bne.n	8002446 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002444:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 8086 	bne.w	8002562 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002480:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f023 0206 	bic.w	r2, r3, #6
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
 80024a2:	e002      	b.n	80024aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_ADC_Start_DMA+0x1cc>)
 80024b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	4a35      	ldr	r2, [pc, #212]	; (8002590 <HAL_ADC_Start_DMA+0x1d0>)
 80024bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	4a34      	ldr	r2, [pc, #208]	; (8002594 <HAL_ADC_Start_DMA+0x1d4>)
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	4a33      	ldr	r2, [pc, #204]	; (8002598 <HAL_ADC_Start_DMA+0x1d8>)
 80024cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	334c      	adds	r3, #76	; 0x4c
 8002502:	4619      	mov	r1, r3
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f000 fce2 	bl	8002ed0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10f      	bne.n	8002538 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d129      	bne.n	800257a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	e020      	b.n	800257a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_ADC_Start_DMA+0x1dc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d11b      	bne.n	800257a <HAL_ADC_Start_DMA+0x1ba>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d114      	bne.n	800257a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	e00b      	b.n	800257a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0210 	orr.w	r2, r3, #16
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	431bde83 	.word	0x431bde83
 800258c:	40012300 	.word	0x40012300
 8002590:	08002a39 	.word	0x08002a39
 8002594:	08002af3 	.word	0x08002af3
 8002598:	08002b0f 	.word	0x08002b0f
 800259c:	40012000 	.word	0x40012000

080025a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1c>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e113      	b.n	8002820 <HAL_ADC_ConfigChannel+0x244>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d925      	bls.n	8002654 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	3b1e      	subs	r3, #30
 800261e:	2207      	movs	r2, #7
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68d9      	ldr	r1, [r3, #12]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	4603      	mov	r3, r0
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4403      	add	r3, r0
 8002646:	3b1e      	subs	r3, #30
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	e022      	b.n	800269a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	2207      	movs	r2, #7
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	4603      	mov	r3, r0
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4403      	add	r3, r0
 8002690:	409a      	lsls	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d824      	bhi.n	80026ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b05      	subs	r3, #5
 80026b4:	221f      	movs	r2, #31
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b05      	subs	r3, #5
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ea:	e04c      	b.n	8002786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d824      	bhi.n	800273e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b23      	subs	r3, #35	; 0x23
 8002706:	221f      	movs	r2, #31
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b23      	subs	r3, #35	; 0x23
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
 800273c:	e023      	b.n	8002786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b41      	subs	r3, #65	; 0x41
 8002750:	221f      	movs	r2, #31
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b41      	subs	r3, #65	; 0x41
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_ADC_ConfigChannel+0x250>)
 8002788:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <HAL_ADC_ConfigChannel+0x254>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10f      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1d8>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b12      	cmp	r3, #18
 800279a:	d10b      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_ADC_ConfigChannel+0x254>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12b      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x23a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_ADC_ConfigChannel+0x258>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <HAL_ADC_ConfigChannel+0x1f4>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b11      	cmp	r3, #17
 80027ce:	d122      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <HAL_ADC_ConfigChannel+0x258>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d111      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_ADC_ConfigChannel+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_ADC_ConfigChannel+0x260>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9a      	lsrs	r2, r3, #18
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40012300 	.word	0x40012300
 8002830:	40012000 	.word	0x40012000
 8002834:	10000012 	.word	0x10000012
 8002838:	20000000 	.word	0x20000000
 800283c:	431bde83 	.word	0x431bde83

08002840 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002848:	4b79      	ldr	r3, [pc, #484]	; (8002a30 <ADC_Init+0x1f0>)
 800284a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	021a      	lsls	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <ADC_Init+0x1f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	e00f      	b.n	800293e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800292c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800293c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0202 	bic.w	r2, r2, #2
 800294c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7e1b      	ldrb	r3, [r3, #24]
 8002958:	005a      	lsls	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800298a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	3b01      	subs	r3, #1
 8002998:	035a      	lsls	r2, r3, #13
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	e007      	b.n	80029b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	051a      	lsls	r2, r3, #20
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029f6:	025a      	lsls	r2, r3, #9
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	029a      	lsls	r2, r3, #10
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40012300 	.word	0x40012300
 8002a34:	0f000001 	.word	0x0f000001

08002a38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13c      	bne.n	8002acc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d12b      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d127      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d119      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0220 	bic.w	r2, r2, #32
 8002a9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7fe fd9b 	bl	8001600 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002aca:	e00e      	b.n	8002aea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff fd75 	bl	80025c8 <HAL_ADC_ErrorCallback>
}
 8002ade:	e004      	b.n	8002aea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fd4d 	bl	80025a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff fd4a 	bl	80025c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <__NVIC_SetPriorityGrouping+0x44>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b82:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <__NVIC_SetPriorityGrouping+0x44>)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	60d3      	str	r3, [r2, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	f003 0307 	and.w	r3, r3, #7
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db0b      	blt.n	8002bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <__NVIC_EnableIRQ+0x38>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000e100 	.word	0xe000e100

08002bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	db0a      	blt.n	8002c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	490c      	ldr	r1, [pc, #48]	; (8002c3c <__NVIC_SetPriority+0x4c>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	0112      	lsls	r2, r2, #4
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	440b      	add	r3, r1
 8002c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c18:	e00a      	b.n	8002c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4908      	ldr	r1, [pc, #32]	; (8002c40 <__NVIC_SetPriority+0x50>)
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3b04      	subs	r3, #4
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	761a      	strb	r2, [r3, #24]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000e100 	.word	0xe000e100
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f1c3 0307 	rsb	r3, r3, #7
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	bf28      	it	cs
 8002c62:	2304      	movcs	r3, #4
 8002c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	d902      	bls.n	8002c74 <NVIC_EncodePriority+0x30>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3b03      	subs	r3, #3
 8002c72:	e000      	b.n	8002c76 <NVIC_EncodePriority+0x32>
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	401a      	ands	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43d9      	mvns	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	4313      	orrs	r3, r2
         );
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d301      	bcc.n	8002cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00f      	b.n	8002ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <SysTick_Config+0x40>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cca:	210f      	movs	r1, #15
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f7ff ff8e 	bl	8002bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <SysTick_Config+0x40>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SysTick_Config+0x40>)
 8002cdc:	2207      	movs	r2, #7
 8002cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010

08002cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff29 	bl	8002b50 <__NVIC_SetPriorityGrouping>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d18:	f7ff ff3e 	bl	8002b98 <__NVIC_GetPriorityGrouping>
 8002d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff8e 	bl	8002c44 <NVIC_EncodePriority>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff5d 	bl	8002bf0 <__NVIC_SetPriority>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff31 	bl	8002bb4 <__NVIC_EnableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffa2 	bl	8002cac <SysTick_Config>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff f98e 	bl	80020a0 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e099      	b.n	8002ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db0:	e00f      	b.n	8002dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db2:	f7ff f975 	bl	80020a0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d908      	bls.n	8002dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e078      	b.n	8002ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e8      	bne.n	8002db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_DMA_Init+0x158>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	4313      	orrs	r3, r2
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d117      	bne.n	8002e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00e      	beq.n	8002e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb01 	bl	8003480 <DMA_CheckFifoParam>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2240      	movs	r2, #64	; 0x40
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e92:	2301      	movs	r3, #1
 8002e94:	e016      	b.n	8002ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fab8 	bl	8003414 <DMA_CalcBaseAndBitshift>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	f010803f 	.word	0xf010803f

08002ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Start_IT+0x26>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e040      	b.n	8002f78 <HAL_DMA_Start_IT+0xa8>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d12f      	bne.n	8002f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fa4a 	bl	80033b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	223f      	movs	r2, #63	; 0x3f
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0216 	orr.w	r2, r2, #22
 8002f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e005      	b.n	8002f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
 8002f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f8e:	f7ff f887 	bl	80020a0 <HAL_GetTick>
 8002f92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e052      	b.n	8003058 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0216 	bic.w	r2, r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_DMA_Abort+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0208 	bic.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003002:	e013      	b.n	800302c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003004:	f7ff f84c 	bl	80020a0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b05      	cmp	r3, #5
 8003010:	d90c      	bls.n	800302c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2203      	movs	r2, #3
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e015      	b.n	8003058 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e4      	bne.n	8003004 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	223f      	movs	r2, #63	; 0x3f
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d004      	beq.n	800307e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e00c      	b.n	8003098 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2205      	movs	r2, #5
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030b0:	4b92      	ldr	r3, [pc, #584]	; (80032fc <HAL_DMA_IRQHandler+0x258>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a92      	ldr	r2, [pc, #584]	; (8003300 <HAL_DMA_IRQHandler+0x25c>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	2208      	movs	r2, #8
 80030d0:	409a      	lsls	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01a      	beq.n	8003110 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0204 	bic.w	r2, r2, #4
 80030f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2208      	movs	r2, #8
 80030fe:	409a      	lsls	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	2201      	movs	r2, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2201      	movs	r2, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	2204      	movs	r2, #4
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d012      	beq.n	800317c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	2204      	movs	r2, #4
 800316a:	409a      	lsls	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	2210      	movs	r2, #16
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d043      	beq.n	8003214 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d03c      	beq.n	8003214 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	2210      	movs	r2, #16
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d018      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d108      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d024      	beq.n	8003214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
 80031d2:	e01f      	b.n	8003214 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
 80031e4:	e016      	b.n	8003214 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0208 	bic.w	r2, r2, #8
 8003202:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	2220      	movs	r2, #32
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 808e 	beq.w	8003342 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8086 	beq.w	8003342 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	2220      	movs	r2, #32
 800323c:	409a      	lsls	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b05      	cmp	r3, #5
 800324c:	d136      	bne.n	80032bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0216 	bic.w	r2, r2, #22
 800325c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <HAL_DMA_IRQHandler+0x1da>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0208 	bic.w	r2, r2, #8
 800328c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	223f      	movs	r2, #63	; 0x3f
 8003294:	409a      	lsls	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d07d      	beq.n	80033ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
        }
        return;
 80032ba:	e078      	b.n	80033ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01c      	beq.n	8003304 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d108      	bne.n	80032ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d030      	beq.n	8003342 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
 80032e8:	e02b      	b.n	8003342 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d027      	beq.n	8003342 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
 80032fa:	e022      	b.n	8003342 <HAL_DMA_IRQHandler+0x29e>
 80032fc:	20000000 	.word	0x20000000
 8003300:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0210 	bic.w	r2, r2, #16
 8003320:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	2b00      	cmp	r3, #0
 8003348:	d032      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d022      	beq.n	800339c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2205      	movs	r2, #5
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	429a      	cmp	r2, r3
 8003378:	d307      	bcc.n	800338a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f2      	bne.n	800336e <HAL_DMA_IRQHandler+0x2ca>
 8003388:	e000      	b.n	800338c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800338a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	e000      	b.n	80033b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80033ae:	bf00      	nop
    }
  }
}
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop

080033b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d108      	bne.n	80033f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033f6:	e007      	b.n	8003408 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3b10      	subs	r3, #16
 8003424:	4a14      	ldr	r2, [pc, #80]	; (8003478 <DMA_CalcBaseAndBitshift+0x64>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800342e:	4a13      	ldr	r2, [pc, #76]	; (800347c <DMA_CalcBaseAndBitshift+0x68>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d909      	bls.n	8003456 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	1d1a      	adds	r2, r3, #4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	659a      	str	r2, [r3, #88]	; 0x58
 8003454:	e007      	b.n	8003466 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	aaaaaaab 	.word	0xaaaaaaab
 800347c:	08006974 	.word	0x08006974

08003480 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11f      	bne.n	80034da <DMA_CheckFifoParam+0x5a>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d856      	bhi.n	800354e <DMA_CheckFifoParam+0xce>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <DMA_CheckFifoParam+0x28>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034cb 	.word	0x080034cb
 80034b0:	080034b9 	.word	0x080034b9
 80034b4:	0800354f 	.word	0x0800354f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d046      	beq.n	8003552 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c8:	e043      	b.n	8003552 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d2:	d140      	bne.n	8003556 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e03d      	b.n	8003556 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e2:	d121      	bne.n	8003528 <DMA_CheckFifoParam+0xa8>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d837      	bhi.n	800355a <DMA_CheckFifoParam+0xda>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <DMA_CheckFifoParam+0x70>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003507 	.word	0x08003507
 80034f8:	08003501 	.word	0x08003501
 80034fc:	08003519 	.word	0x08003519
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e030      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d025      	beq.n	800355e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003516:	e022      	b.n	800355e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003526:	e01c      	b.n	8003562 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d903      	bls.n	8003536 <DMA_CheckFifoParam+0xb6>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d003      	beq.n	800353c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003534:	e018      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
      break;
 800353a:	e015      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      break;
 800354c:	e00b      	b.n	8003566 <DMA_CheckFifoParam+0xe6>
      break;
 800354e:	bf00      	nop
 8003550:	e00a      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 8003552:	bf00      	nop
 8003554:	e008      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 8003556:	bf00      	nop
 8003558:	e006      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 800355a:	bf00      	nop
 800355c:	e004      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
 8003560:	e002      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;   
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
    }
  } 
  
  return status; 
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e159      	b.n	8003848 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8148 	bne.w	8003842 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d005      	beq.n	80035ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d130      	bne.n	800362c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003600:	2201      	movs	r2, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 0201 	and.w	r2, r3, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b03      	cmp	r3, #3
 8003636:	d017      	beq.n	8003668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d123      	bne.n	80036bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	08da      	lsrs	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3208      	adds	r2, #8
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	08da      	lsrs	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3208      	adds	r2, #8
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0203 	and.w	r2, r3, #3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a2 	beq.w	8003842 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b57      	ldr	r3, [pc, #348]	; (8003860 <HAL_GPIO_Init+0x2e8>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	4a56      	ldr	r2, [pc, #344]	; (8003860 <HAL_GPIO_Init+0x2e8>)
 8003708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800370c:	6453      	str	r3, [r2, #68]	; 0x44
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <HAL_GPIO_Init+0x2e8>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371a:	4a52      	ldr	r2, [pc, #328]	; (8003864 <HAL_GPIO_Init+0x2ec>)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	220f      	movs	r2, #15
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a49      	ldr	r2, [pc, #292]	; (8003868 <HAL_GPIO_Init+0x2f0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x202>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a48      	ldr	r2, [pc, #288]	; (800386c <HAL_GPIO_Init+0x2f4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x1fe>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a47      	ldr	r2, [pc, #284]	; (8003870 <HAL_GPIO_Init+0x2f8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x1fa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a46      	ldr	r2, [pc, #280]	; (8003874 <HAL_GPIO_Init+0x2fc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x1f6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a45      	ldr	r2, [pc, #276]	; (8003878 <HAL_GPIO_Init+0x300>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x1f2>
 8003766:	2304      	movs	r3, #4
 8003768:	e008      	b.n	800377c <HAL_GPIO_Init+0x204>
 800376a:	2307      	movs	r3, #7
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x204>
 800376e:	2303      	movs	r3, #3
 8003770:	e004      	b.n	800377c <HAL_GPIO_Init+0x204>
 8003772:	2302      	movs	r3, #2
 8003774:	e002      	b.n	800377c <HAL_GPIO_Init+0x204>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_GPIO_Init+0x204>
 800377a:	2300      	movs	r3, #0
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f002 0203 	and.w	r2, r2, #3
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	4093      	lsls	r3, r2
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378c:	4935      	ldr	r1, [pc, #212]	; (8003864 <HAL_GPIO_Init+0x2ec>)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	3302      	adds	r3, #2
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800379a:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_GPIO_Init+0x304>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037be:	4a2f      	ldr	r2, [pc, #188]	; (800387c <HAL_GPIO_Init+0x304>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037c4:	4b2d      	ldr	r3, [pc, #180]	; (800387c <HAL_GPIO_Init+0x304>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e8:	4a24      	ldr	r2, [pc, #144]	; (800387c <HAL_GPIO_Init+0x304>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_GPIO_Init+0x304>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003812:	4a1a      	ldr	r2, [pc, #104]	; (800387c <HAL_GPIO_Init+0x304>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003818:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_GPIO_Init+0x304>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <HAL_GPIO_Init+0x304>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	f67f aea2 	bls.w	8003594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3724      	adds	r7, #36	; 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	40013800 	.word	0x40013800
 8003868:	40020000 	.word	0x40020000
 800386c:	40020400 	.word	0x40020400
 8003870:	40020800 	.word	0x40020800
 8003874:	40020c00 	.word	0x40020c00
 8003878:	40021000 	.word	0x40021000
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d006      	beq.n	80038d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ca:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe f95a 	bl	8001b8c <HAL_GPIO_EXTI_Callback>
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40013c00 	.word	0x40013c00

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e264      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d075      	beq.n	80039ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003902:	4ba3      	ldr	r3, [pc, #652]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b04      	cmp	r3, #4
 800390c:	d00c      	beq.n	8003928 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390e:	4ba0      	ldr	r3, [pc, #640]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003916:	2b08      	cmp	r3, #8
 8003918:	d112      	bne.n	8003940 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391a:	4b9d      	ldr	r3, [pc, #628]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003926:	d10b      	bne.n	8003940 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	4b99      	ldr	r3, [pc, #612]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05b      	beq.n	80039ec <HAL_RCC_OscConfig+0x108>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d157      	bne.n	80039ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e23f      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003948:	d106      	bne.n	8003958 <HAL_RCC_OscConfig+0x74>
 800394a:	4b91      	ldr	r3, [pc, #580]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a90      	ldr	r2, [pc, #576]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e01d      	b.n	8003994 <HAL_RCC_OscConfig+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x98>
 8003962:	4b8b      	ldr	r3, [pc, #556]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a8a      	ldr	r2, [pc, #552]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b88      	ldr	r3, [pc, #544]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a87      	ldr	r2, [pc, #540]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e00b      	b.n	8003994 <HAL_RCC_OscConfig+0xb0>
 800397c:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a83      	ldr	r2, [pc, #524]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b81      	ldr	r3, [pc, #516]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a80      	ldr	r2, [pc, #512]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 800398e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fb80 	bl	80020a0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fb7c 	bl	80020a0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e204      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b76      	ldr	r3, [pc, #472]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0xc0>
 80039c2:	e014      	b.n	80039ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fb6c 	bl	80020a0 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fb68 	bl	80020a0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e1f0      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0xe8>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d063      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039fa:	4b65      	ldr	r3, [pc, #404]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a06:	4b62      	ldr	r3, [pc, #392]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d11c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a12:	4b5f      	ldr	r3, [pc, #380]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d116      	bne.n	8003a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_RCC_OscConfig+0x152>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e1c4      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	4b56      	ldr	r3, [pc, #344]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4952      	ldr	r1, [pc, #328]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	e03a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a54:	4b4f      	ldr	r3, [pc, #316]	; (8003b94 <HAL_RCC_OscConfig+0x2b0>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fe fb21 	bl	80020a0 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a62:	f7fe fb1d 	bl	80020a0 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e1a5      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b43      	ldr	r3, [pc, #268]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4940      	ldr	r1, [pc, #256]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
 8003a94:	e015      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a96:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <HAL_RCC_OscConfig+0x2b0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fb00 	bl	80020a0 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fafc 	bl	80020a0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e184      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d030      	beq.n	8003b30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_RCC_OscConfig+0x2b4>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fe fae0 	bl	80020a0 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fadc 	bl	80020a0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e164      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	4b26      	ldr	r3, [pc, #152]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x200>
 8003b02:	e015      	b.n	8003b30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x2b4>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fac9 	bl	80020a0 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b12:	f7fe fac5 	bl	80020a0 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e14d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80a0 	beq.w	8003c7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x2b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d121      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_RCC_OscConfig+0x2b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <HAL_RCC_OscConfig+0x2b8>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fa8b 	bl	80020a0 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	e011      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2ce>
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	42470000 	.word	0x42470000
 8003b98:	42470e80 	.word	0x42470e80
 8003b9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba0:	f7fe fa7e 	bl	80020a0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e106      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b85      	ldr	r3, [pc, #532]	; (8003dc8 <HAL_RCC_OscConfig+0x4e4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2f0>
 8003bc6:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a80      	ldr	r2, [pc, #512]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	e01c      	b.n	8003c0e <HAL_RCC_OscConfig+0x32a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x312>
 8003bdc:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCC_OscConfig+0x32a>
 8003bf6:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a74      	ldr	r2, [pc, #464]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a71      	ldr	r2, [pc, #452]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d015      	beq.n	8003c42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fe fa43 	bl	80020a0 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fa3f 	bl	80020a0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0c5      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ee      	beq.n	8003c1e <HAL_RCC_OscConfig+0x33a>
 8003c40:	e014      	b.n	8003c6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe fa2d 	bl	80020a0 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe fa29 	bl	80020a0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0af      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	4b5a      	ldr	r3, [pc, #360]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ee      	bne.n	8003c4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a55      	ldr	r2, [pc, #340]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 809b 	beq.w	8003dbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d05c      	beq.n	8003d4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d141      	bne.n	8003d20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCC_OscConfig+0x4ec>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe f9fd 	bl	80020a0 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe f9f9 	bl	80020a0 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e081      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	019b      	lsls	r3, r3, #6
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	061b      	lsls	r3, r3, #24
 8003cec:	4937      	ldr	r1, [pc, #220]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf2:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x4ec>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f9d2 	bl	80020a0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe f9ce 	bl	80020a0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e056      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x41c>
 8003d1e:	e04e      	b.n	8003dbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x4ec>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fe f9bb 	bl	80020a0 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fe f9b7 	bl	80020a0 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e03f      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x44a>
 8003d4c:	e037      	b.n	8003dbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e032      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <HAL_RCC_OscConfig+0x4e8>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d028      	beq.n	8003dba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d121      	bne.n	8003dba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d11a      	bne.n	8003dba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d111      	bne.n	8003dba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	3b01      	subs	r3, #1
 8003da4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	42470060 	.word	0x42470060

08003dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0cc      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d90c      	bls.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0b8      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e28:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a52      	ldr	r2, [pc, #328]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4c:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	494d      	ldr	r1, [pc, #308]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d044      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d119      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e067      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b37      	ldr	r3, [pc, #220]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4934      	ldr	r1, [pc, #208]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe f8ec 	bl	80020a0 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fe f8e8 	bl	80020a0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e04f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d20c      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e032      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4916      	ldr	r1, [pc, #88]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	490e      	ldr	r1, [pc, #56]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f5a:	f000 f821 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	490a      	ldr	r1, [pc, #40]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	5ccb      	ldrb	r3, [r1, r3]
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe f84c 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023c00 	.word	0x40023c00
 8003f90:	40023800 	.word	0x40023800
 8003f94:	0800695c 	.word	0x0800695c
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000008 	.word	0x20000008

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb8:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	f200 80bd 	bhi.w	8004144 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x3a>
 8003fd2:	e0b7      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b61      	ldr	r3, [pc, #388]	; (800415c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fd6:	60bb      	str	r3, [r7, #8]
       break;
 8003fd8:	e0b7      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fda:	4b61      	ldr	r3, [pc, #388]	; (8004160 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fdc:	60bb      	str	r3, [r7, #8]
      break;
 8003fde:	e0b4      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe0:	4b5d      	ldr	r3, [pc, #372]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fea:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d04d      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff6:	4b58      	ldr	r3, [pc, #352]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	ea02 0800 	and.w	r8, r2, r0
 800400e:	ea03 0901 	and.w	r9, r3, r1
 8004012:	4640      	mov	r0, r8
 8004014:	4649      	mov	r1, r9
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	014b      	lsls	r3, r1, #5
 8004020:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004024:	0142      	lsls	r2, r0, #5
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	ebb0 0008 	subs.w	r0, r0, r8
 800402e:	eb61 0109 	sbc.w	r1, r1, r9
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	018b      	lsls	r3, r1, #6
 800403c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004040:	0182      	lsls	r2, r0, #6
 8004042:	1a12      	subs	r2, r2, r0
 8004044:	eb63 0301 	sbc.w	r3, r3, r1
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	00d9      	lsls	r1, r3, #3
 8004052:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004056:	00d0      	lsls	r0, r2, #3
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	eb12 0208 	adds.w	r2, r2, r8
 8004060:	eb43 0309 	adc.w	r3, r3, r9
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	0259      	lsls	r1, r3, #9
 800406e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004072:	0250      	lsls	r0, r2, #9
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	f7fc fcea 	bl	8000a5c <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e04a      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	ea02 0400 	and.w	r4, r2, r0
 80040aa:	ea03 0501 	and.w	r5, r3, r1
 80040ae:	4620      	mov	r0, r4
 80040b0:	4629      	mov	r1, r5
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	014b      	lsls	r3, r1, #5
 80040bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040c0:	0142      	lsls	r2, r0, #5
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	1b00      	subs	r0, r0, r4
 80040c8:	eb61 0105 	sbc.w	r1, r1, r5
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	018b      	lsls	r3, r1, #6
 80040d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040da:	0182      	lsls	r2, r0, #6
 80040dc:	1a12      	subs	r2, r2, r0
 80040de:	eb63 0301 	sbc.w	r3, r3, r1
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	00d9      	lsls	r1, r3, #3
 80040ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040f0:	00d0      	lsls	r0, r2, #3
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	1912      	adds	r2, r2, r4
 80040f8:	eb45 0303 	adc.w	r3, r5, r3
 80040fc:	f04f 0000 	mov.w	r0, #0
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	0299      	lsls	r1, r3, #10
 8004106:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800410a:	0290      	lsls	r0, r2, #10
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	461a      	mov	r2, r3
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	f7fc fc9e 	bl	8000a5c <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4613      	mov	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	3301      	adds	r3, #1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	60bb      	str	r3, [r7, #8]
      break;
 8004142:	e002      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004146:	60bb      	str	r3, [r7, #8]
      break;
 8004148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800414a:	68bb      	ldr	r3, [r7, #8]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
 800415c:	00f42400 	.word	0x00f42400
 8004160:	007a1200 	.word	0x007a1200

08004164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <HAL_RCC_GetHCLKFreq+0x14>)
 800416a:	681b      	ldr	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000000 	.word	0x20000000

0800417c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004180:	f7ff fff0 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0a9b      	lsrs	r3, r3, #10
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	; (80041a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	0800696c 	.word	0x0800696c

080041a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a8:	f7ff ffdc 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	0b5b      	lsrs	r3, r3, #13
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4903      	ldr	r1, [pc, #12]	; (80041c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	0800696c 	.word	0x0800696c

080041cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e041      	b.n	8004262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd fc8e 	bl	8001b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fa88 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d001      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e044      	b.n	800430e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1e      	ldr	r2, [pc, #120]	; (800431c <HAL_TIM_Base_Start_IT+0xb0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x6c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d013      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x6c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <HAL_TIM_Base_Start_IT+0xb4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x6c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_TIM_Base_Start_IT+0xb8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x6c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a17      	ldr	r2, [pc, #92]	; (8004328 <HAL_TIM_Base_Start_IT+0xbc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x6c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIM_Base_Start_IT+0xc0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d111      	bne.n	80042fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d010      	beq.n	800430c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fa:	e007      	b.n	800430c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40014000 	.word	0x40014000

08004330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0202 	mvn.w	r2, #2
 800435c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9b5 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9a7 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f9b8 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d122      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d11b      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0204 	mvn.w	r2, #4
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f98b 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f97d 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f98e 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d122      	bne.n	8004434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d11b      	bne.n	8004434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0208 	mvn.w	r2, #8
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2204      	movs	r2, #4
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f961 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f953 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f964 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b10      	cmp	r3, #16
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0210 	mvn.w	r2, #16
 8004458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2208      	movs	r2, #8
 800445e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f937 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f929 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f93a 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0201 	mvn.w	r2, #1
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fb86 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d10e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d107      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fab2 	bl	8004a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d10e      	bne.n	800450c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d107      	bne.n	800450c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8ff 	bl	800470a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b20      	cmp	r3, #32
 8004518:	d10e      	bne.n	8004538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b20      	cmp	r3, #32
 8004526:	d107      	bne.n	8004538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0220 	mvn.w	r2, #32
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa7c 	bl	8004a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIM_ConfigClockSource+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e0b4      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x186>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800457a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004594:	d03e      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0xd4>
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	f200 8087 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	f000 8086 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x172>
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	d87f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d01a      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0xa6>
 80045b0:	2b70      	cmp	r3, #112	; 0x70
 80045b2:	d87b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d050      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x11a>
 80045b8:	2b60      	cmp	r3, #96	; 0x60
 80045ba:	d877      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d03c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0xfa>
 80045c0:	2b50      	cmp	r3, #80	; 0x50
 80045c2:	d873      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d058      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x13a>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d86f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d064      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d86b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d060      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d867      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d05a      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	e062      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f000 f98d 	bl	8004914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	609a      	str	r2, [r3, #8]
      break;
 8004612:	e04f      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f000 f976 	bl	8004914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004636:	609a      	str	r2, [r3, #8]
      break;
 8004638:	e03c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 f8ea 	bl	8004820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2150      	movs	r1, #80	; 0x50
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f943 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 8004658:	e02c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f000 f909 	bl	800487e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2160      	movs	r1, #96	; 0x60
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f933 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 8004678:	e01c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	461a      	mov	r2, r3
 8004688:	f000 f8ca 	bl	8004820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2140      	movs	r1, #64	; 0x40
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f923 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 f91a 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a34      	ldr	r2, [pc, #208]	; (8004804 <TIM_Base_SetConfig+0xe4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00f      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a31      	ldr	r2, [pc, #196]	; (8004808 <TIM_Base_SetConfig+0xe8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a30      	ldr	r2, [pc, #192]	; (800480c <TIM_Base_SetConfig+0xec>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <TIM_Base_SetConfig+0xf0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a25      	ldr	r2, [pc, #148]	; (8004804 <TIM_Base_SetConfig+0xe4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a22      	ldr	r2, [pc, #136]	; (8004808 <TIM_Base_SetConfig+0xe8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a21      	ldr	r2, [pc, #132]	; (800480c <TIM_Base_SetConfig+0xec>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <TIM_Base_SetConfig+0xf0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <TIM_Base_SetConfig+0xf4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <TIM_Base_SetConfig+0xf8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <TIM_Base_SetConfig+0xfc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <TIM_Base_SetConfig+0xe4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d103      	bne.n	80047f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	615a      	str	r2, [r3, #20]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800

08004820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 0201 	bic.w	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f023 030a 	bic.w	r3, r3, #10
 800485c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487e:	b480      	push	{r7}
 8004880:	b087      	sub	sp, #28
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0210 	bic.w	r2, r3, #16
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f043 0307 	orr.w	r3, r3, #7
 8004900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800492e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	021a      	lsls	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	431a      	orrs	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004968:	2302      	movs	r3, #2
 800496a:	e050      	b.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d013      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10c      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40014000 	.word	0x40014000

08004a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e03f      	b.n	8004aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fd fa2e 	bl	8001ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	; 0x24
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fddb 	bl	8005658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b08a      	sub	sp, #40	; 0x28
 8004af6:	af02      	add	r7, sp, #8
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	4613      	mov	r3, r2
 8004b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d17c      	bne.n	8004c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_UART_Transmit+0x2c>
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e075      	b.n	8004c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Transmit+0x3e>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e06e      	b.n	8004c0e <HAL_UART_Transmit+0x11c>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2221      	movs	r2, #33	; 0x21
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b46:	f7fd faab 	bl	80020a0 <HAL_GetTick>
 8004b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b60:	d108      	bne.n	8004b74 <HAL_UART_Transmit+0x82>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e003      	b.n	8004b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b84:	e02a      	b.n	8004bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2180      	movs	r1, #128	; 0x80
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fb1f 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e036      	b.n	8004c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	3302      	adds	r3, #2
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	e007      	b.n	8004bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1cf      	bne.n	8004b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2140      	movs	r1, #64	; 0x40
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 faef 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e006      	b.n	8004c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e000      	b.n	8004c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
  }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d11d      	bne.n	8004c6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_UART_Receive_IT+0x26>
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e016      	b.n	8004c6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Receive_IT+0x38>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e00f      	b.n	8004c6e <HAL_UART_Receive_IT+0x58>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fb24 	bl	80052b0 <UART_Start_Receive_IT>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b0ba      	sub	sp, #232	; 0xe8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_UART_IRQHandler+0x66>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fc03 	bl	80054e2 <UART_Receive_IT>
      return;
 8004cdc:	e256      	b.n	800518c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80de 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x22c>
 8004ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80d1 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_UART_IRQHandler+0xae>
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f043 0201 	orr.w	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
 8004d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0202 	orr.w	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_UART_IRQHandler+0xf6>
 8004d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d011      	beq.n	8004d9e <HAL_UART_IRQHandler+0x126>
 8004d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d105      	bne.n	8004d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0208 	orr.w	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 81ed 	beq.w	8005182 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x14e>
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb8e 	bl	80054e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_UART_IRQHandler+0x17a>
 8004dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d04f      	beq.n	8004e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa96 	bl	8005324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d141      	bne.n	8004e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1d9      	bne.n	8004e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d013      	beq.n	8004e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	4a7d      	ldr	r2, [pc, #500]	; (8005054 <HAL_UART_IRQHandler+0x3dc>)
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe f8fa 	bl	8003060 <HAL_DMA_Abort_IT>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d016      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	e00e      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f990 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	e00a      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f98c 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	e006      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f988 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e9e:	e170      	b.n	8005182 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	bf00      	nop
    return;
 8004ea2:	e16e      	b.n	8005182 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 814a 	bne.w	8005142 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8143 	beq.w	8005142 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 813c 	beq.w	8005142 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	f040 80b4 	bne.w	8005058 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8140 	beq.w	8005186 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	f080 8139 	bcs.w	8005186 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f26:	f000 8088 	beq.w	800503a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1d9      	bne.n	8004f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3314      	adds	r3, #20
 8004f7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e1      	bne.n	8004f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e3      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500a:	f023 0310 	bic.w	r3, r3, #16
 800500e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800501c:	65ba      	str	r2, [r7, #88]	; 0x58
 800501e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800502a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	4618      	mov	r0, r3
 8005036:	f7fd ffa3 	bl	8002f80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005042:	b29b      	uxth	r3, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8b6 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005050:	e099      	b.n	8005186 <HAL_UART_IRQHandler+0x50e>
 8005052:	bf00      	nop
 8005054:	080053eb 	.word	0x080053eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 808b 	beq.w	800518a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8086 	beq.w	800518a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050a2:	647a      	str	r2, [r7, #68]	; 0x44
 80050a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e3      	bne.n	800507e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	623b      	str	r3, [r7, #32]
   return(result);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050da:	633a      	str	r2, [r7, #48]	; 0x30
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e3      	bne.n	80050b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0310 	bic.w	r3, r3, #16
 8005112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005120:	61fa      	str	r2, [r7, #28]
 8005122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	617b      	str	r3, [r7, #20]
   return(result);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e3      	bne.n	80050fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f83e 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005140:	e023      	b.n	800518a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_UART_IRQHandler+0x4ea>
 800514e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f959 	bl	8005412 <UART_Transmit_IT>
    return;
 8005160:	e014      	b.n	800518c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <HAL_UART_IRQHandler+0x514>
 800516e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f999 	bl	80054b2 <UART_EndTransmit_IT>
    return;
 8005180:	e004      	b.n	800518c <HAL_UART_IRQHandler+0x514>
    return;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <HAL_UART_IRQHandler+0x514>
      return;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_UART_IRQHandler+0x514>
      return;
 800518a:	bf00      	nop
  }
}
 800518c:	37e8      	adds	r7, #232	; 0xe8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop

08005194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b090      	sub	sp, #64	; 0x40
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	e050      	b.n	8005288 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d04c      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f4:	f7fc ff54 	bl	80020a0 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005200:	429a      	cmp	r2, r3
 8005202:	d241      	bcs.n	8005288 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005224:	637a      	str	r2, [r7, #52]	; 0x34
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800522a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	613b      	str	r3, [r7, #16]
   return(result);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005258:	623a      	str	r2, [r7, #32]
 800525a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	69f9      	ldr	r1, [r7, #28]
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	61bb      	str	r3, [r7, #24]
   return(result);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e00f      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d09f      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3740      	adds	r7, #64	; 0x40
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2222      	movs	r2, #34	; 0x22
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0220 	orr.w	r2, r2, #32
 8005314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b095      	sub	sp, #84	; 0x54
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800534c:	643a      	str	r2, [r7, #64]	; 0x40
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	64bb      	str	r3, [r7, #72]	; 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d119      	bne.n	80053d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053de:	bf00      	nop
 80053e0:	3754      	adds	r7, #84	; 0x54
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff fecf 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b21      	cmp	r3, #33	; 0x21
 8005424:	d13e      	bne.n	80054a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	d114      	bne.n	800545a <UART_Transmit_IT+0x48>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d110      	bne.n	800545a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]
 8005458:	e008      	b.n	800546c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6211      	str	r1, [r2, #32]
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4619      	mov	r1, r3
 800547a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800548e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800549e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fe5e 	bl	8005194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08c      	sub	sp, #48	; 0x30
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b22      	cmp	r3, #34	; 0x22
 80054f4:	f040 80ab 	bne.w	800564e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005500:	d117      	bne.n	8005532 <UART_Receive_IT+0x50>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d113      	bne.n	8005532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005520:	b29a      	uxth	r2, r3
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	1c9a      	adds	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
 8005530:	e026      	b.n	8005580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005544:	d007      	beq.n	8005556 <UART_Receive_IT+0x74>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <UART_Receive_IT+0x82>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e008      	b.n	8005576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005570:	b2da      	uxtb	r2, r3
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4619      	mov	r1, r3
 800558e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005590:	2b00      	cmp	r3, #0
 8005592:	d15a      	bne.n	800564a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0220 	bic.w	r2, r2, #32
 80055a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d135      	bne.n	8005640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f023 0310 	bic.w	r3, r3, #16
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	623a      	str	r2, [r7, #32]
 80055fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	69f9      	ldr	r1, [r7, #28]
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	61bb      	str	r3, [r7, #24]
   return(result);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d10a      	bne.n	8005632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fdbf 	bl	80051bc <HAL_UARTEx_RxEventCallback>
 800563e:	e002      	b.n	8005646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fc f841 	bl	80016c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e002      	b.n	8005650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3730      	adds	r7, #48	; 0x30
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	b09f      	sub	sp, #124	; 0x7c
 800565e:	af00      	add	r7, sp, #0
 8005660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800566c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566e:	68d9      	ldr	r1, [r3, #12]
 8005670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	ea40 0301 	orr.w	r3, r0, r1
 8005678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	431a      	orrs	r2, r3
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	431a      	orrs	r2, r3
 800568a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4313      	orrs	r3, r2
 8005690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800569c:	f021 010c 	bic.w	r1, r1, #12
 80056a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a6:	430b      	orrs	r3, r1
 80056a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b6:	6999      	ldr	r1, [r3, #24]
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	ea40 0301 	orr.w	r3, r0, r1
 80056c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4bc5      	ldr	r3, [pc, #788]	; (80059dc <UART_SetConfig+0x384>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d004      	beq.n	80056d6 <UART_SetConfig+0x7e>
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4bc3      	ldr	r3, [pc, #780]	; (80059e0 <UART_SetConfig+0x388>)
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d103      	bne.n	80056de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d6:	f7fe fd65 	bl	80041a4 <HAL_RCC_GetPCLK2Freq>
 80056da:	6778      	str	r0, [r7, #116]	; 0x74
 80056dc:	e002      	b.n	80056e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056de:	f7fe fd4d 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 80056e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	f040 80b6 	bne.w	800585c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f2:	461c      	mov	r4, r3
 80056f4:	f04f 0500 	mov.w	r5, #0
 80056f8:	4622      	mov	r2, r4
 80056fa:	462b      	mov	r3, r5
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005700:	415b      	adcs	r3, r3
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
 8005704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005708:	1912      	adds	r2, r2, r4
 800570a:	eb45 0303 	adc.w	r3, r5, r3
 800570e:	f04f 0000 	mov.w	r0, #0
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	00d9      	lsls	r1, r3, #3
 8005718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800571c:	00d0      	lsls	r0, r2, #3
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	1911      	adds	r1, r2, r4
 8005724:	6639      	str	r1, [r7, #96]	; 0x60
 8005726:	416b      	adcs	r3, r5
 8005728:	667b      	str	r3, [r7, #100]	; 0x64
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	461a      	mov	r2, r3
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	1891      	adds	r1, r2, r2
 8005736:	63b9      	str	r1, [r7, #56]	; 0x38
 8005738:	415b      	adcs	r3, r3
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005744:	f7fb f98a 	bl	8000a5c <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4ba5      	ldr	r3, [pc, #660]	; (80059e4 <UART_SetConfig+0x38c>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011e      	lsls	r6, r3, #4
 8005756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005758:	461c      	mov	r4, r3
 800575a:	f04f 0500 	mov.w	r5, #0
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	1891      	adds	r1, r2, r2
 8005764:	6339      	str	r1, [r7, #48]	; 0x30
 8005766:	415b      	adcs	r3, r3
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800576e:	1912      	adds	r2, r2, r4
 8005770:	eb45 0303 	adc.w	r3, r5, r3
 8005774:	f04f 0000 	mov.w	r0, #0
 8005778:	f04f 0100 	mov.w	r1, #0
 800577c:	00d9      	lsls	r1, r3, #3
 800577e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005782:	00d0      	lsls	r0, r2, #3
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	1911      	adds	r1, r2, r4
 800578a:	65b9      	str	r1, [r7, #88]	; 0x58
 800578c:	416b      	adcs	r3, r5
 800578e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	461a      	mov	r2, r3
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	1891      	adds	r1, r2, r2
 800579c:	62b9      	str	r1, [r7, #40]	; 0x28
 800579e:	415b      	adcs	r3, r3
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057aa:	f7fb f957 	bl	8000a5c <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4b8c      	ldr	r3, [pc, #560]	; (80059e4 <UART_SetConfig+0x38c>)
 80057b4:	fba3 1302 	umull	r1, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	2164      	movs	r1, #100	; 0x64
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	3332      	adds	r3, #50	; 0x32
 80057c6:	4a87      	ldr	r2, [pc, #540]	; (80059e4 <UART_SetConfig+0x38c>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057d4:	441e      	add	r6, r3
 80057d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d8:	4618      	mov	r0, r3
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	1894      	adds	r4, r2, r2
 80057e4:	623c      	str	r4, [r7, #32]
 80057e6:	415b      	adcs	r3, r3
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ee:	1812      	adds	r2, r2, r0
 80057f0:	eb41 0303 	adc.w	r3, r1, r3
 80057f4:	f04f 0400 	mov.w	r4, #0
 80057f8:	f04f 0500 	mov.w	r5, #0
 80057fc:	00dd      	lsls	r5, r3, #3
 80057fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005802:	00d4      	lsls	r4, r2, #3
 8005804:	4622      	mov	r2, r4
 8005806:	462b      	mov	r3, r5
 8005808:	1814      	adds	r4, r2, r0
 800580a:	653c      	str	r4, [r7, #80]	; 0x50
 800580c:	414b      	adcs	r3, r1
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	461a      	mov	r2, r3
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	1891      	adds	r1, r2, r2
 800581c:	61b9      	str	r1, [r7, #24]
 800581e:	415b      	adcs	r3, r3
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800582a:	f7fb f917 	bl	8000a5c <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <UART_SetConfig+0x38c>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a67      	ldr	r2, [pc, #412]	; (80059e4 <UART_SetConfig+0x38c>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 0207 	and.w	r2, r3, #7
 8005852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4432      	add	r2, r6
 8005858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800585a:	e0b9      	b.n	80059d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585e:	461c      	mov	r4, r3
 8005860:	f04f 0500 	mov.w	r5, #0
 8005864:	4622      	mov	r2, r4
 8005866:	462b      	mov	r3, r5
 8005868:	1891      	adds	r1, r2, r2
 800586a:	6139      	str	r1, [r7, #16]
 800586c:	415b      	adcs	r3, r3
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005874:	1912      	adds	r2, r2, r4
 8005876:	eb45 0303 	adc.w	r3, r5, r3
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	00d9      	lsls	r1, r3, #3
 8005884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005888:	00d0      	lsls	r0, r2, #3
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	eb12 0804 	adds.w	r8, r2, r4
 8005892:	eb43 0905 	adc.w	r9, r3, r5
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4618      	mov	r0, r3
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	008b      	lsls	r3, r1, #2
 80058aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ae:	0082      	lsls	r2, r0, #2
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fb f8d2 	bl	8000a5c <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4b49      	ldr	r3, [pc, #292]	; (80059e4 <UART_SetConfig+0x38c>)
 80058be:	fba3 2302 	umull	r2, r3, r3, r2
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	011e      	lsls	r6, r3, #4
 80058c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c8:	4618      	mov	r0, r3
 80058ca:	f04f 0100 	mov.w	r1, #0
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	1894      	adds	r4, r2, r2
 80058d4:	60bc      	str	r4, [r7, #8]
 80058d6:	415b      	adcs	r3, r3
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058de:	1812      	adds	r2, r2, r0
 80058e0:	eb41 0303 	adc.w	r3, r1, r3
 80058e4:	f04f 0400 	mov.w	r4, #0
 80058e8:	f04f 0500 	mov.w	r5, #0
 80058ec:	00dd      	lsls	r5, r3, #3
 80058ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058f2:	00d4      	lsls	r4, r2, #3
 80058f4:	4622      	mov	r2, r4
 80058f6:	462b      	mov	r3, r5
 80058f8:	1814      	adds	r4, r2, r0
 80058fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80058fc:	414b      	adcs	r3, r1
 80058fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	f04f 0100 	mov.w	r1, #0
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	008b      	lsls	r3, r1, #2
 8005914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005918:	0082      	lsls	r2, r0, #2
 800591a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800591e:	f7fb f89d 	bl	8000a5c <__aeabi_uldivmod>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <UART_SetConfig+0x38c>)
 8005928:	fba3 1302 	umull	r1, r3, r3, r2
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	2164      	movs	r1, #100	; 0x64
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	3332      	adds	r3, #50	; 0x32
 800593a:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <UART_SetConfig+0x38c>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005946:	441e      	add	r6, r3
 8005948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594a:	4618      	mov	r0, r3
 800594c:	f04f 0100 	mov.w	r1, #0
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	1894      	adds	r4, r2, r2
 8005956:	603c      	str	r4, [r7, #0]
 8005958:	415b      	adcs	r3, r3
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005960:	1812      	adds	r2, r2, r0
 8005962:	eb41 0303 	adc.w	r3, r1, r3
 8005966:	f04f 0400 	mov.w	r4, #0
 800596a:	f04f 0500 	mov.w	r5, #0
 800596e:	00dd      	lsls	r5, r3, #3
 8005970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005974:	00d4      	lsls	r4, r2, #3
 8005976:	4622      	mov	r2, r4
 8005978:	462b      	mov	r3, r5
 800597a:	eb12 0a00 	adds.w	sl, r2, r0
 800597e:	eb43 0b01 	adc.w	fp, r3, r1
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4618      	mov	r0, r3
 8005988:	f04f 0100 	mov.w	r1, #0
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	008b      	lsls	r3, r1, #2
 8005996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800599a:	0082      	lsls	r2, r0, #2
 800599c:	4650      	mov	r0, sl
 800599e:	4659      	mov	r1, fp
 80059a0:	f7fb f85c 	bl	8000a5c <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <UART_SetConfig+0x38c>)
 80059aa:	fba3 1302 	umull	r1, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2164      	movs	r1, #100	; 0x64
 80059b2:	fb01 f303 	mul.w	r3, r1, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	; 0x32
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <UART_SetConfig+0x38c>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4432      	add	r2, r6
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	bf00      	nop
 80059d2:	377c      	adds	r7, #124	; 0x7c
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop
 80059dc:	40011000 	.word	0x40011000
 80059e0:	40011400 	.word	0x40011400
 80059e4:	51eb851f 	.word	0x51eb851f

080059e8 <__errno>:
 80059e8:	4b01      	ldr	r3, [pc, #4]	; (80059f0 <__errno+0x8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000010 	.word	0x20000010

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4d0d      	ldr	r5, [pc, #52]	; (8005a2c <__libc_init_array+0x38>)
 80059f8:	4c0d      	ldr	r4, [pc, #52]	; (8005a30 <__libc_init_array+0x3c>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	2600      	movs	r6, #0
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	4d0b      	ldr	r5, [pc, #44]	; (8005a34 <__libc_init_array+0x40>)
 8005a06:	4c0c      	ldr	r4, [pc, #48]	; (8005a38 <__libc_init_array+0x44>)
 8005a08:	f000 ff76 	bl	80068f8 <_init>
 8005a0c:	1b64      	subs	r4, r4, r5
 8005a0e:	10a4      	asrs	r4, r4, #2
 8005a10:	2600      	movs	r6, #0
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	08006a1c 	.word	0x08006a1c
 8005a30:	08006a1c 	.word	0x08006a1c
 8005a34:	08006a1c 	.word	0x08006a1c
 8005a38:	08006a20 	.word	0x08006a20

08005a3c <memset>:
 8005a3c:	4402      	add	r2, r0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d100      	bne.n	8005a46 <memset+0xa>
 8005a44:	4770      	bx	lr
 8005a46:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4a:	e7f9      	b.n	8005a40 <memset+0x4>

08005a4c <iprintf>:
 8005a4c:	b40f      	push	{r0, r1, r2, r3}
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <iprintf+0x2c>)
 8005a50:	b513      	push	{r0, r1, r4, lr}
 8005a52:	681c      	ldr	r4, [r3, #0]
 8005a54:	b124      	cbz	r4, 8005a60 <iprintf+0x14>
 8005a56:	69a3      	ldr	r3, [r4, #24]
 8005a58:	b913      	cbnz	r3, 8005a60 <iprintf+0x14>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f866 	bl	8005b2c <__sinit>
 8005a60:	ab05      	add	r3, sp, #20
 8005a62:	9a04      	ldr	r2, [sp, #16]
 8005a64:	68a1      	ldr	r1, [r4, #8]
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 f983 	bl	8005d74 <_vfiprintf_r>
 8005a6e:	b002      	add	sp, #8
 8005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a74:	b004      	add	sp, #16
 8005a76:	4770      	bx	lr
 8005a78:	20000010 	.word	0x20000010

08005a7c <std>:
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	b510      	push	{r4, lr}
 8005a80:	4604      	mov	r4, r0
 8005a82:	e9c0 3300 	strd	r3, r3, [r0]
 8005a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a8a:	6083      	str	r3, [r0, #8]
 8005a8c:	8181      	strh	r1, [r0, #12]
 8005a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005a90:	81c2      	strh	r2, [r0, #14]
 8005a92:	6183      	str	r3, [r0, #24]
 8005a94:	4619      	mov	r1, r3
 8005a96:	2208      	movs	r2, #8
 8005a98:	305c      	adds	r0, #92	; 0x5c
 8005a9a:	f7ff ffcf 	bl	8005a3c <memset>
 8005a9e:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <std+0x38>)
 8005aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <std+0x3c>)
 8005aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <std+0x40>)
 8005aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <std+0x44>)
 8005aac:	6224      	str	r4, [r4, #32]
 8005aae:	6323      	str	r3, [r4, #48]	; 0x30
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	bf00      	nop
 8005ab4:	0800631d 	.word	0x0800631d
 8005ab8:	0800633f 	.word	0x0800633f
 8005abc:	08006377 	.word	0x08006377
 8005ac0:	0800639b 	.word	0x0800639b

08005ac4 <_cleanup_r>:
 8005ac4:	4901      	ldr	r1, [pc, #4]	; (8005acc <_cleanup_r+0x8>)
 8005ac6:	f000 b8af 	b.w	8005c28 <_fwalk_reent>
 8005aca:	bf00      	nop
 8005acc:	08006675 	.word	0x08006675

08005ad0 <__sfmoreglue>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	1e4a      	subs	r2, r1, #1
 8005ad4:	2568      	movs	r5, #104	; 0x68
 8005ad6:	4355      	muls	r5, r2
 8005ad8:	460e      	mov	r6, r1
 8005ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ade:	f000 f8c5 	bl	8005c6c <_malloc_r>
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	b140      	cbz	r0, 8005af8 <__sfmoreglue+0x28>
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8005aec:	300c      	adds	r0, #12
 8005aee:	60a0      	str	r0, [r4, #8]
 8005af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005af4:	f7ff ffa2 	bl	8005a3c <memset>
 8005af8:	4620      	mov	r0, r4
 8005afa:	bd70      	pop	{r4, r5, r6, pc}

08005afc <__sfp_lock_acquire>:
 8005afc:	4801      	ldr	r0, [pc, #4]	; (8005b04 <__sfp_lock_acquire+0x8>)
 8005afe:	f000 b8b3 	b.w	8005c68 <__retarget_lock_acquire_recursive>
 8005b02:	bf00      	nop
 8005b04:	20000250 	.word	0x20000250

08005b08 <__sfp_lock_release>:
 8005b08:	4801      	ldr	r0, [pc, #4]	; (8005b10 <__sfp_lock_release+0x8>)
 8005b0a:	f000 b8ae 	b.w	8005c6a <__retarget_lock_release_recursive>
 8005b0e:	bf00      	nop
 8005b10:	20000250 	.word	0x20000250

08005b14 <__sinit_lock_acquire>:
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <__sinit_lock_acquire+0x8>)
 8005b16:	f000 b8a7 	b.w	8005c68 <__retarget_lock_acquire_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	2000024b 	.word	0x2000024b

08005b20 <__sinit_lock_release>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__sinit_lock_release+0x8>)
 8005b22:	f000 b8a2 	b.w	8005c6a <__retarget_lock_release_recursive>
 8005b26:	bf00      	nop
 8005b28:	2000024b 	.word	0x2000024b

08005b2c <__sinit>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	4604      	mov	r4, r0
 8005b30:	f7ff fff0 	bl	8005b14 <__sinit_lock_acquire>
 8005b34:	69a3      	ldr	r3, [r4, #24]
 8005b36:	b11b      	cbz	r3, 8005b40 <__sinit+0x14>
 8005b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3c:	f7ff bff0 	b.w	8005b20 <__sinit_lock_release>
 8005b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b44:	6523      	str	r3, [r4, #80]	; 0x50
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <__sinit+0x68>)
 8005b48:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <__sinit+0x6c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b4e:	42a3      	cmp	r3, r4
 8005b50:	bf04      	itt	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	61a3      	streq	r3, [r4, #24]
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 f820 	bl	8005b9c <__sfp>
 8005b5c:	6060      	str	r0, [r4, #4]
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 f81c 	bl	8005b9c <__sfp>
 8005b64:	60a0      	str	r0, [r4, #8]
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 f818 	bl	8005b9c <__sfp>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60e0      	str	r0, [r4, #12]
 8005b70:	2104      	movs	r1, #4
 8005b72:	6860      	ldr	r0, [r4, #4]
 8005b74:	f7ff ff82 	bl	8005a7c <std>
 8005b78:	68a0      	ldr	r0, [r4, #8]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2109      	movs	r1, #9
 8005b7e:	f7ff ff7d 	bl	8005a7c <std>
 8005b82:	68e0      	ldr	r0, [r4, #12]
 8005b84:	2202      	movs	r2, #2
 8005b86:	2112      	movs	r1, #18
 8005b88:	f7ff ff78 	bl	8005a7c <std>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	61a3      	str	r3, [r4, #24]
 8005b90:	e7d2      	b.n	8005b38 <__sinit+0xc>
 8005b92:	bf00      	nop
 8005b94:	0800697c 	.word	0x0800697c
 8005b98:	08005ac5 	.word	0x08005ac5

08005b9c <__sfp>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	4607      	mov	r7, r0
 8005ba0:	f7ff ffac 	bl	8005afc <__sfp_lock_acquire>
 8005ba4:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <__sfp+0x84>)
 8005ba6:	681e      	ldr	r6, [r3, #0]
 8005ba8:	69b3      	ldr	r3, [r6, #24]
 8005baa:	b913      	cbnz	r3, 8005bb2 <__sfp+0x16>
 8005bac:	4630      	mov	r0, r6
 8005bae:	f7ff ffbd 	bl	8005b2c <__sinit>
 8005bb2:	3648      	adds	r6, #72	; 0x48
 8005bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	d503      	bpl.n	8005bc4 <__sfp+0x28>
 8005bbc:	6833      	ldr	r3, [r6, #0]
 8005bbe:	b30b      	cbz	r3, 8005c04 <__sfp+0x68>
 8005bc0:	6836      	ldr	r6, [r6, #0]
 8005bc2:	e7f7      	b.n	8005bb4 <__sfp+0x18>
 8005bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bc8:	b9d5      	cbnz	r5, 8005c00 <__sfp+0x64>
 8005bca:	4b16      	ldr	r3, [pc, #88]	; (8005c24 <__sfp+0x88>)
 8005bcc:	60e3      	str	r3, [r4, #12]
 8005bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8005bd4:	f000 f847 	bl	8005c66 <__retarget_lock_init_recursive>
 8005bd8:	f7ff ff96 	bl	8005b08 <__sfp_lock_release>
 8005bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005be4:	6025      	str	r5, [r4, #0]
 8005be6:	61a5      	str	r5, [r4, #24]
 8005be8:	2208      	movs	r2, #8
 8005bea:	4629      	mov	r1, r5
 8005bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bf0:	f7ff ff24 	bl	8005a3c <memset>
 8005bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c00:	3468      	adds	r4, #104	; 0x68
 8005c02:	e7d9      	b.n	8005bb8 <__sfp+0x1c>
 8005c04:	2104      	movs	r1, #4
 8005c06:	4638      	mov	r0, r7
 8005c08:	f7ff ff62 	bl	8005ad0 <__sfmoreglue>
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	6030      	str	r0, [r6, #0]
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d1d5      	bne.n	8005bc0 <__sfp+0x24>
 8005c14:	f7ff ff78 	bl	8005b08 <__sfp_lock_release>
 8005c18:	230c      	movs	r3, #12
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	e7ee      	b.n	8005bfc <__sfp+0x60>
 8005c1e:	bf00      	nop
 8005c20:	0800697c 	.word	0x0800697c
 8005c24:	ffff0001 	.word	0xffff0001

08005c28 <_fwalk_reent>:
 8005c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	4688      	mov	r8, r1
 8005c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c34:	2700      	movs	r7, #0
 8005c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8005c3e:	d505      	bpl.n	8005c4c <_fwalk_reent+0x24>
 8005c40:	6824      	ldr	r4, [r4, #0]
 8005c42:	2c00      	cmp	r4, #0
 8005c44:	d1f7      	bne.n	8005c36 <_fwalk_reent+0xe>
 8005c46:	4638      	mov	r0, r7
 8005c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4c:	89ab      	ldrh	r3, [r5, #12]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d907      	bls.n	8005c62 <_fwalk_reent+0x3a>
 8005c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c56:	3301      	adds	r3, #1
 8005c58:	d003      	beq.n	8005c62 <_fwalk_reent+0x3a>
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	47c0      	blx	r8
 8005c60:	4307      	orrs	r7, r0
 8005c62:	3568      	adds	r5, #104	; 0x68
 8005c64:	e7e9      	b.n	8005c3a <_fwalk_reent+0x12>

08005c66 <__retarget_lock_init_recursive>:
 8005c66:	4770      	bx	lr

08005c68 <__retarget_lock_acquire_recursive>:
 8005c68:	4770      	bx	lr

08005c6a <__retarget_lock_release_recursive>:
 8005c6a:	4770      	bx	lr

08005c6c <_malloc_r>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	1ccd      	adds	r5, r1, #3
 8005c70:	f025 0503 	bic.w	r5, r5, #3
 8005c74:	3508      	adds	r5, #8
 8005c76:	2d0c      	cmp	r5, #12
 8005c78:	bf38      	it	cc
 8005c7a:	250c      	movcc	r5, #12
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	4606      	mov	r6, r0
 8005c80:	db01      	blt.n	8005c86 <_malloc_r+0x1a>
 8005c82:	42a9      	cmp	r1, r5
 8005c84:	d903      	bls.n	8005c8e <_malloc_r+0x22>
 8005c86:	230c      	movs	r3, #12
 8005c88:	6033      	str	r3, [r6, #0]
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8e:	f000 fda3 	bl	80067d8 <__malloc_lock>
 8005c92:	4921      	ldr	r1, [pc, #132]	; (8005d18 <_malloc_r+0xac>)
 8005c94:	680a      	ldr	r2, [r1, #0]
 8005c96:	4614      	mov	r4, r2
 8005c98:	b99c      	cbnz	r4, 8005cc2 <_malloc_r+0x56>
 8005c9a:	4f20      	ldr	r7, [pc, #128]	; (8005d1c <_malloc_r+0xb0>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	b923      	cbnz	r3, 8005caa <_malloc_r+0x3e>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f000 fb2a 	bl	80062fc <_sbrk_r>
 8005ca8:	6038      	str	r0, [r7, #0]
 8005caa:	4629      	mov	r1, r5
 8005cac:	4630      	mov	r0, r6
 8005cae:	f000 fb25 	bl	80062fc <_sbrk_r>
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d123      	bne.n	8005cfe <_malloc_r+0x92>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	6033      	str	r3, [r6, #0]
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f000 fd92 	bl	80067e4 <__malloc_unlock>
 8005cc0:	e7e3      	b.n	8005c8a <_malloc_r+0x1e>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	1b5b      	subs	r3, r3, r5
 8005cc6:	d417      	bmi.n	8005cf8 <_malloc_r+0x8c>
 8005cc8:	2b0b      	cmp	r3, #11
 8005cca:	d903      	bls.n	8005cd4 <_malloc_r+0x68>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	441c      	add	r4, r3
 8005cd0:	6025      	str	r5, [r4, #0]
 8005cd2:	e004      	b.n	8005cde <_malloc_r+0x72>
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	42a2      	cmp	r2, r4
 8005cd8:	bf0c      	ite	eq
 8005cda:	600b      	streq	r3, [r1, #0]
 8005cdc:	6053      	strne	r3, [r2, #4]
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f000 fd80 	bl	80067e4 <__malloc_unlock>
 8005ce4:	f104 000b 	add.w	r0, r4, #11
 8005ce8:	1d23      	adds	r3, r4, #4
 8005cea:	f020 0007 	bic.w	r0, r0, #7
 8005cee:	1ac2      	subs	r2, r0, r3
 8005cf0:	d0cc      	beq.n	8005c8c <_malloc_r+0x20>
 8005cf2:	1a1b      	subs	r3, r3, r0
 8005cf4:	50a3      	str	r3, [r4, r2]
 8005cf6:	e7c9      	b.n	8005c8c <_malloc_r+0x20>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	6864      	ldr	r4, [r4, #4]
 8005cfc:	e7cc      	b.n	8005c98 <_malloc_r+0x2c>
 8005cfe:	1cc4      	adds	r4, r0, #3
 8005d00:	f024 0403 	bic.w	r4, r4, #3
 8005d04:	42a0      	cmp	r0, r4
 8005d06:	d0e3      	beq.n	8005cd0 <_malloc_r+0x64>
 8005d08:	1a21      	subs	r1, r4, r0
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f000 faf6 	bl	80062fc <_sbrk_r>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d1dd      	bne.n	8005cd0 <_malloc_r+0x64>
 8005d14:	e7cf      	b.n	8005cb6 <_malloc_r+0x4a>
 8005d16:	bf00      	nop
 8005d18:	2000009c 	.word	0x2000009c
 8005d1c:	200000a0 	.word	0x200000a0

08005d20 <__sfputc_r>:
 8005d20:	6893      	ldr	r3, [r2, #8]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	b410      	push	{r4}
 8005d28:	6093      	str	r3, [r2, #8]
 8005d2a:	da08      	bge.n	8005d3e <__sfputc_r+0x1e>
 8005d2c:	6994      	ldr	r4, [r2, #24]
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	db01      	blt.n	8005d36 <__sfputc_r+0x16>
 8005d32:	290a      	cmp	r1, #10
 8005d34:	d103      	bne.n	8005d3e <__sfputc_r+0x1e>
 8005d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3a:	f000 bb33 	b.w	80063a4 <__swbuf_r>
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	1c58      	adds	r0, r3, #1
 8005d42:	6010      	str	r0, [r2, #0]
 8005d44:	7019      	strb	r1, [r3, #0]
 8005d46:	4608      	mov	r0, r1
 8005d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <__sfputs_r>:
 8005d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d50:	4606      	mov	r6, r0
 8005d52:	460f      	mov	r7, r1
 8005d54:	4614      	mov	r4, r2
 8005d56:	18d5      	adds	r5, r2, r3
 8005d58:	42ac      	cmp	r4, r5
 8005d5a:	d101      	bne.n	8005d60 <__sfputs_r+0x12>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e007      	b.n	8005d70 <__sfputs_r+0x22>
 8005d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d64:	463a      	mov	r2, r7
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7ff ffda 	bl	8005d20 <__sfputc_r>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d1f3      	bne.n	8005d58 <__sfputs_r+0xa>
 8005d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d74 <_vfiprintf_r>:
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	460d      	mov	r5, r1
 8005d7a:	b09d      	sub	sp, #116	; 0x74
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	4698      	mov	r8, r3
 8005d80:	4606      	mov	r6, r0
 8005d82:	b118      	cbz	r0, 8005d8c <_vfiprintf_r+0x18>
 8005d84:	6983      	ldr	r3, [r0, #24]
 8005d86:	b90b      	cbnz	r3, 8005d8c <_vfiprintf_r+0x18>
 8005d88:	f7ff fed0 	bl	8005b2c <__sinit>
 8005d8c:	4b89      	ldr	r3, [pc, #548]	; (8005fb4 <_vfiprintf_r+0x240>)
 8005d8e:	429d      	cmp	r5, r3
 8005d90:	d11b      	bne.n	8005dca <_vfiprintf_r+0x56>
 8005d92:	6875      	ldr	r5, [r6, #4]
 8005d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	d405      	bmi.n	8005da6 <_vfiprintf_r+0x32>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	059a      	lsls	r2, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <_vfiprintf_r+0x32>
 8005da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da2:	f7ff ff61 	bl	8005c68 <__retarget_lock_acquire_recursive>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	071b      	lsls	r3, r3, #28
 8005daa:	d501      	bpl.n	8005db0 <_vfiprintf_r+0x3c>
 8005dac:	692b      	ldr	r3, [r5, #16]
 8005dae:	b9eb      	cbnz	r3, 8005dec <_vfiprintf_r+0x78>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 fb5a 	bl	800646c <__swsetup_r>
 8005db8:	b1c0      	cbz	r0, 8005dec <_vfiprintf_r+0x78>
 8005dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dbc:	07dc      	lsls	r4, r3, #31
 8005dbe:	d50e      	bpl.n	8005dde <_vfiprintf_r+0x6a>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	b01d      	add	sp, #116	; 0x74
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	4b7b      	ldr	r3, [pc, #492]	; (8005fb8 <_vfiprintf_r+0x244>)
 8005dcc:	429d      	cmp	r5, r3
 8005dce:	d101      	bne.n	8005dd4 <_vfiprintf_r+0x60>
 8005dd0:	68b5      	ldr	r5, [r6, #8]
 8005dd2:	e7df      	b.n	8005d94 <_vfiprintf_r+0x20>
 8005dd4:	4b79      	ldr	r3, [pc, #484]	; (8005fbc <_vfiprintf_r+0x248>)
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	bf08      	it	eq
 8005dda:	68f5      	ldreq	r5, [r6, #12]
 8005ddc:	e7da      	b.n	8005d94 <_vfiprintf_r+0x20>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	0598      	lsls	r0, r3, #22
 8005de2:	d4ed      	bmi.n	8005dc0 <_vfiprintf_r+0x4c>
 8005de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de6:	f7ff ff40 	bl	8005c6a <__retarget_lock_release_recursive>
 8005dea:	e7e9      	b.n	8005dc0 <_vfiprintf_r+0x4c>
 8005dec:	2300      	movs	r3, #0
 8005dee:	9309      	str	r3, [sp, #36]	; 0x24
 8005df0:	2320      	movs	r3, #32
 8005df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dfa:	2330      	movs	r3, #48	; 0x30
 8005dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fc0 <_vfiprintf_r+0x24c>
 8005e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e04:	f04f 0901 	mov.w	r9, #1
 8005e08:	4623      	mov	r3, r4
 8005e0a:	469a      	mov	sl, r3
 8005e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e10:	b10a      	cbz	r2, 8005e16 <_vfiprintf_r+0xa2>
 8005e12:	2a25      	cmp	r2, #37	; 0x25
 8005e14:	d1f9      	bne.n	8005e0a <_vfiprintf_r+0x96>
 8005e16:	ebba 0b04 	subs.w	fp, sl, r4
 8005e1a:	d00b      	beq.n	8005e34 <_vfiprintf_r+0xc0>
 8005e1c:	465b      	mov	r3, fp
 8005e1e:	4622      	mov	r2, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ff93 	bl	8005d4e <__sfputs_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f000 80aa 	beq.w	8005f82 <_vfiprintf_r+0x20e>
 8005e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e30:	445a      	add	r2, fp
 8005e32:	9209      	str	r2, [sp, #36]	; 0x24
 8005e34:	f89a 3000 	ldrb.w	r3, [sl]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80a2 	beq.w	8005f82 <_vfiprintf_r+0x20e>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295
 8005e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e48:	f10a 0a01 	add.w	sl, sl, #1
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	9307      	str	r3, [sp, #28]
 8005e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e54:	931a      	str	r3, [sp, #104]	; 0x68
 8005e56:	4654      	mov	r4, sl
 8005e58:	2205      	movs	r2, #5
 8005e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5e:	4858      	ldr	r0, [pc, #352]	; (8005fc0 <_vfiprintf_r+0x24c>)
 8005e60:	f7fa f9be 	bl	80001e0 <memchr>
 8005e64:	9a04      	ldr	r2, [sp, #16]
 8005e66:	b9d8      	cbnz	r0, 8005ea0 <_vfiprintf_r+0x12c>
 8005e68:	06d1      	lsls	r1, r2, #27
 8005e6a:	bf44      	itt	mi
 8005e6c:	2320      	movmi	r3, #32
 8005e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e72:	0713      	lsls	r3, r2, #28
 8005e74:	bf44      	itt	mi
 8005e76:	232b      	movmi	r3, #43	; 0x2b
 8005e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e80:	2b2a      	cmp	r3, #42	; 0x2a
 8005e82:	d015      	beq.n	8005eb0 <_vfiprintf_r+0x13c>
 8005e84:	9a07      	ldr	r2, [sp, #28]
 8005e86:	4654      	mov	r4, sl
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f04f 0c0a 	mov.w	ip, #10
 8005e8e:	4621      	mov	r1, r4
 8005e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e94:	3b30      	subs	r3, #48	; 0x30
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d94e      	bls.n	8005f38 <_vfiprintf_r+0x1c4>
 8005e9a:	b1b0      	cbz	r0, 8005eca <_vfiprintf_r+0x156>
 8005e9c:	9207      	str	r2, [sp, #28]
 8005e9e:	e014      	b.n	8005eca <_vfiprintf_r+0x156>
 8005ea0:	eba0 0308 	sub.w	r3, r0, r8
 8005ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	46a2      	mov	sl, r4
 8005eae:	e7d2      	b.n	8005e56 <_vfiprintf_r+0xe2>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	1d19      	adds	r1, r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	9103      	str	r1, [sp, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bfbb      	ittet	lt
 8005ebc:	425b      	neglt	r3, r3
 8005ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec2:	9307      	strge	r3, [sp, #28]
 8005ec4:	9307      	strlt	r3, [sp, #28]
 8005ec6:	bfb8      	it	lt
 8005ec8:	9204      	strlt	r2, [sp, #16]
 8005eca:	7823      	ldrb	r3, [r4, #0]
 8005ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ece:	d10c      	bne.n	8005eea <_vfiprintf_r+0x176>
 8005ed0:	7863      	ldrb	r3, [r4, #1]
 8005ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed4:	d135      	bne.n	8005f42 <_vfiprintf_r+0x1ce>
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	1d1a      	adds	r2, r3, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	9203      	str	r2, [sp, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfb8      	it	lt
 8005ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ee6:	3402      	adds	r4, #2
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fd0 <_vfiprintf_r+0x25c>
 8005eee:	7821      	ldrb	r1, [r4, #0]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	f7fa f974 	bl	80001e0 <memchr>
 8005ef8:	b140      	cbz	r0, 8005f0c <_vfiprintf_r+0x198>
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	eba0 000a 	sub.w	r0, r0, sl
 8005f00:	fa03 f000 	lsl.w	r0, r3, r0
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	4303      	orrs	r3, r0
 8005f08:	3401      	adds	r4, #1
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f10:	482c      	ldr	r0, [pc, #176]	; (8005fc4 <_vfiprintf_r+0x250>)
 8005f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f16:	2206      	movs	r2, #6
 8005f18:	f7fa f962 	bl	80001e0 <memchr>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d03f      	beq.n	8005fa0 <_vfiprintf_r+0x22c>
 8005f20:	4b29      	ldr	r3, [pc, #164]	; (8005fc8 <_vfiprintf_r+0x254>)
 8005f22:	bb1b      	cbnz	r3, 8005f6c <_vfiprintf_r+0x1f8>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	3307      	adds	r3, #7
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	9303      	str	r3, [sp, #12]
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	443b      	add	r3, r7
 8005f34:	9309      	str	r3, [sp, #36]	; 0x24
 8005f36:	e767      	b.n	8005e08 <_vfiprintf_r+0x94>
 8005f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e7a5      	b.n	8005e8e <_vfiprintf_r+0x11a>
 8005f42:	2300      	movs	r3, #0
 8005f44:	3401      	adds	r4, #1
 8005f46:	9305      	str	r3, [sp, #20]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f04f 0c0a 	mov.w	ip, #10
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f54:	3a30      	subs	r2, #48	; 0x30
 8005f56:	2a09      	cmp	r2, #9
 8005f58:	d903      	bls.n	8005f62 <_vfiprintf_r+0x1ee>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0c5      	beq.n	8005eea <_vfiprintf_r+0x176>
 8005f5e:	9105      	str	r1, [sp, #20]
 8005f60:	e7c3      	b.n	8005eea <_vfiprintf_r+0x176>
 8005f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f66:	4604      	mov	r4, r0
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e7f0      	b.n	8005f4e <_vfiprintf_r+0x1da>
 8005f6c:	ab03      	add	r3, sp, #12
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	462a      	mov	r2, r5
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <_vfiprintf_r+0x258>)
 8005f74:	a904      	add	r1, sp, #16
 8005f76:	4630      	mov	r0, r6
 8005f78:	f3af 8000 	nop.w
 8005f7c:	4607      	mov	r7, r0
 8005f7e:	1c78      	adds	r0, r7, #1
 8005f80:	d1d6      	bne.n	8005f30 <_vfiprintf_r+0x1bc>
 8005f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f84:	07d9      	lsls	r1, r3, #31
 8005f86:	d405      	bmi.n	8005f94 <_vfiprintf_r+0x220>
 8005f88:	89ab      	ldrh	r3, [r5, #12]
 8005f8a:	059a      	lsls	r2, r3, #22
 8005f8c:	d402      	bmi.n	8005f94 <_vfiprintf_r+0x220>
 8005f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f90:	f7ff fe6b 	bl	8005c6a <__retarget_lock_release_recursive>
 8005f94:	89ab      	ldrh	r3, [r5, #12]
 8005f96:	065b      	lsls	r3, r3, #25
 8005f98:	f53f af12 	bmi.w	8005dc0 <_vfiprintf_r+0x4c>
 8005f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f9e:	e711      	b.n	8005dc4 <_vfiprintf_r+0x50>
 8005fa0:	ab03      	add	r3, sp, #12
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	462a      	mov	r2, r5
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <_vfiprintf_r+0x258>)
 8005fa8:	a904      	add	r1, sp, #16
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 f880 	bl	80060b0 <_printf_i>
 8005fb0:	e7e4      	b.n	8005f7c <_vfiprintf_r+0x208>
 8005fb2:	bf00      	nop
 8005fb4:	080069a0 	.word	0x080069a0
 8005fb8:	080069c0 	.word	0x080069c0
 8005fbc:	08006980 	.word	0x08006980
 8005fc0:	080069e0 	.word	0x080069e0
 8005fc4:	080069ea 	.word	0x080069ea
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	08005d4f 	.word	0x08005d4f
 8005fd0:	080069e6 	.word	0x080069e6

08005fd4 <_printf_common>:
 8005fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	4616      	mov	r6, r2
 8005fda:	4699      	mov	r9, r3
 8005fdc:	688a      	ldr	r2, [r1, #8]
 8005fde:	690b      	ldr	r3, [r1, #16]
 8005fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	bfb8      	it	lt
 8005fe8:	4613      	movlt	r3, r2
 8005fea:	6033      	str	r3, [r6, #0]
 8005fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	b10a      	cbz	r2, 8005ffa <_printf_common+0x26>
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	6033      	str	r3, [r6, #0]
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	0699      	lsls	r1, r3, #26
 8005ffe:	bf42      	ittt	mi
 8006000:	6833      	ldrmi	r3, [r6, #0]
 8006002:	3302      	addmi	r3, #2
 8006004:	6033      	strmi	r3, [r6, #0]
 8006006:	6825      	ldr	r5, [r4, #0]
 8006008:	f015 0506 	ands.w	r5, r5, #6
 800600c:	d106      	bne.n	800601c <_printf_common+0x48>
 800600e:	f104 0a19 	add.w	sl, r4, #25
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	6832      	ldr	r2, [r6, #0]
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	42ab      	cmp	r3, r5
 800601a:	dc26      	bgt.n	800606a <_printf_common+0x96>
 800601c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006020:	1e13      	subs	r3, r2, #0
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	bf18      	it	ne
 8006026:	2301      	movne	r3, #1
 8006028:	0692      	lsls	r2, r2, #26
 800602a:	d42b      	bmi.n	8006084 <_printf_common+0xb0>
 800602c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006030:	4649      	mov	r1, r9
 8006032:	4638      	mov	r0, r7
 8006034:	47c0      	blx	r8
 8006036:	3001      	adds	r0, #1
 8006038:	d01e      	beq.n	8006078 <_printf_common+0xa4>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	68e5      	ldr	r5, [r4, #12]
 800603e:	6832      	ldr	r2, [r6, #0]
 8006040:	f003 0306 	and.w	r3, r3, #6
 8006044:	2b04      	cmp	r3, #4
 8006046:	bf08      	it	eq
 8006048:	1aad      	subeq	r5, r5, r2
 800604a:	68a3      	ldr	r3, [r4, #8]
 800604c:	6922      	ldr	r2, [r4, #16]
 800604e:	bf0c      	ite	eq
 8006050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006054:	2500      	movne	r5, #0
 8006056:	4293      	cmp	r3, r2
 8006058:	bfc4      	itt	gt
 800605a:	1a9b      	subgt	r3, r3, r2
 800605c:	18ed      	addgt	r5, r5, r3
 800605e:	2600      	movs	r6, #0
 8006060:	341a      	adds	r4, #26
 8006062:	42b5      	cmp	r5, r6
 8006064:	d11a      	bne.n	800609c <_printf_common+0xc8>
 8006066:	2000      	movs	r0, #0
 8006068:	e008      	b.n	800607c <_printf_common+0xa8>
 800606a:	2301      	movs	r3, #1
 800606c:	4652      	mov	r2, sl
 800606e:	4649      	mov	r1, r9
 8006070:	4638      	mov	r0, r7
 8006072:	47c0      	blx	r8
 8006074:	3001      	adds	r0, #1
 8006076:	d103      	bne.n	8006080 <_printf_common+0xac>
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006080:	3501      	adds	r5, #1
 8006082:	e7c6      	b.n	8006012 <_printf_common+0x3e>
 8006084:	18e1      	adds	r1, r4, r3
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	2030      	movs	r0, #48	; 0x30
 800608a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800608e:	4422      	add	r2, r4
 8006090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006098:	3302      	adds	r3, #2
 800609a:	e7c7      	b.n	800602c <_printf_common+0x58>
 800609c:	2301      	movs	r3, #1
 800609e:	4622      	mov	r2, r4
 80060a0:	4649      	mov	r1, r9
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c0      	blx	r8
 80060a6:	3001      	adds	r0, #1
 80060a8:	d0e6      	beq.n	8006078 <_printf_common+0xa4>
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7d9      	b.n	8006062 <_printf_common+0x8e>
	...

080060b0 <_printf_i>:
 80060b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	460c      	mov	r4, r1
 80060b6:	4691      	mov	r9, r2
 80060b8:	7e27      	ldrb	r7, [r4, #24]
 80060ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060bc:	2f78      	cmp	r7, #120	; 0x78
 80060be:	4680      	mov	r8, r0
 80060c0:	469a      	mov	sl, r3
 80060c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060c6:	d807      	bhi.n	80060d8 <_printf_i+0x28>
 80060c8:	2f62      	cmp	r7, #98	; 0x62
 80060ca:	d80a      	bhi.n	80060e2 <_printf_i+0x32>
 80060cc:	2f00      	cmp	r7, #0
 80060ce:	f000 80d8 	beq.w	8006282 <_printf_i+0x1d2>
 80060d2:	2f58      	cmp	r7, #88	; 0x58
 80060d4:	f000 80a3 	beq.w	800621e <_printf_i+0x16e>
 80060d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060e0:	e03a      	b.n	8006158 <_printf_i+0xa8>
 80060e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060e6:	2b15      	cmp	r3, #21
 80060e8:	d8f6      	bhi.n	80060d8 <_printf_i+0x28>
 80060ea:	a001      	add	r0, pc, #4	; (adr r0, 80060f0 <_printf_i+0x40>)
 80060ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060f0:	08006149 	.word	0x08006149
 80060f4:	0800615d 	.word	0x0800615d
 80060f8:	080060d9 	.word	0x080060d9
 80060fc:	080060d9 	.word	0x080060d9
 8006100:	080060d9 	.word	0x080060d9
 8006104:	080060d9 	.word	0x080060d9
 8006108:	0800615d 	.word	0x0800615d
 800610c:	080060d9 	.word	0x080060d9
 8006110:	080060d9 	.word	0x080060d9
 8006114:	080060d9 	.word	0x080060d9
 8006118:	080060d9 	.word	0x080060d9
 800611c:	08006269 	.word	0x08006269
 8006120:	0800618d 	.word	0x0800618d
 8006124:	0800624b 	.word	0x0800624b
 8006128:	080060d9 	.word	0x080060d9
 800612c:	080060d9 	.word	0x080060d9
 8006130:	0800628b 	.word	0x0800628b
 8006134:	080060d9 	.word	0x080060d9
 8006138:	0800618d 	.word	0x0800618d
 800613c:	080060d9 	.word	0x080060d9
 8006140:	080060d9 	.word	0x080060d9
 8006144:	08006253 	.word	0x08006253
 8006148:	680b      	ldr	r3, [r1, #0]
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	600a      	str	r2, [r1, #0]
 8006150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006158:	2301      	movs	r3, #1
 800615a:	e0a3      	b.n	80062a4 <_printf_i+0x1f4>
 800615c:	6825      	ldr	r5, [r4, #0]
 800615e:	6808      	ldr	r0, [r1, #0]
 8006160:	062e      	lsls	r6, r5, #24
 8006162:	f100 0304 	add.w	r3, r0, #4
 8006166:	d50a      	bpl.n	800617e <_printf_i+0xce>
 8006168:	6805      	ldr	r5, [r0, #0]
 800616a:	600b      	str	r3, [r1, #0]
 800616c:	2d00      	cmp	r5, #0
 800616e:	da03      	bge.n	8006178 <_printf_i+0xc8>
 8006170:	232d      	movs	r3, #45	; 0x2d
 8006172:	426d      	negs	r5, r5
 8006174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006178:	485e      	ldr	r0, [pc, #376]	; (80062f4 <_printf_i+0x244>)
 800617a:	230a      	movs	r3, #10
 800617c:	e019      	b.n	80061b2 <_printf_i+0x102>
 800617e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006182:	6805      	ldr	r5, [r0, #0]
 8006184:	600b      	str	r3, [r1, #0]
 8006186:	bf18      	it	ne
 8006188:	b22d      	sxthne	r5, r5
 800618a:	e7ef      	b.n	800616c <_printf_i+0xbc>
 800618c:	680b      	ldr	r3, [r1, #0]
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	1d18      	adds	r0, r3, #4
 8006192:	6008      	str	r0, [r1, #0]
 8006194:	0628      	lsls	r0, r5, #24
 8006196:	d501      	bpl.n	800619c <_printf_i+0xec>
 8006198:	681d      	ldr	r5, [r3, #0]
 800619a:	e002      	b.n	80061a2 <_printf_i+0xf2>
 800619c:	0669      	lsls	r1, r5, #25
 800619e:	d5fb      	bpl.n	8006198 <_printf_i+0xe8>
 80061a0:	881d      	ldrh	r5, [r3, #0]
 80061a2:	4854      	ldr	r0, [pc, #336]	; (80062f4 <_printf_i+0x244>)
 80061a4:	2f6f      	cmp	r7, #111	; 0x6f
 80061a6:	bf0c      	ite	eq
 80061a8:	2308      	moveq	r3, #8
 80061aa:	230a      	movne	r3, #10
 80061ac:	2100      	movs	r1, #0
 80061ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061b2:	6866      	ldr	r6, [r4, #4]
 80061b4:	60a6      	str	r6, [r4, #8]
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	bfa2      	ittt	ge
 80061ba:	6821      	ldrge	r1, [r4, #0]
 80061bc:	f021 0104 	bicge.w	r1, r1, #4
 80061c0:	6021      	strge	r1, [r4, #0]
 80061c2:	b90d      	cbnz	r5, 80061c8 <_printf_i+0x118>
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	d04d      	beq.n	8006264 <_printf_i+0x1b4>
 80061c8:	4616      	mov	r6, r2
 80061ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ce:	fb03 5711 	mls	r7, r3, r1, r5
 80061d2:	5dc7      	ldrb	r7, [r0, r7]
 80061d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061d8:	462f      	mov	r7, r5
 80061da:	42bb      	cmp	r3, r7
 80061dc:	460d      	mov	r5, r1
 80061de:	d9f4      	bls.n	80061ca <_printf_i+0x11a>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d10b      	bne.n	80061fc <_printf_i+0x14c>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	07df      	lsls	r7, r3, #31
 80061e8:	d508      	bpl.n	80061fc <_printf_i+0x14c>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	6861      	ldr	r1, [r4, #4]
 80061ee:	4299      	cmp	r1, r3
 80061f0:	bfde      	ittt	le
 80061f2:	2330      	movle	r3, #48	; 0x30
 80061f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061fc:	1b92      	subs	r2, r2, r6
 80061fe:	6122      	str	r2, [r4, #16]
 8006200:	f8cd a000 	str.w	sl, [sp]
 8006204:	464b      	mov	r3, r9
 8006206:	aa03      	add	r2, sp, #12
 8006208:	4621      	mov	r1, r4
 800620a:	4640      	mov	r0, r8
 800620c:	f7ff fee2 	bl	8005fd4 <_printf_common>
 8006210:	3001      	adds	r0, #1
 8006212:	d14c      	bne.n	80062ae <_printf_i+0x1fe>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	b004      	add	sp, #16
 800621a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621e:	4835      	ldr	r0, [pc, #212]	; (80062f4 <_printf_i+0x244>)
 8006220:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	680e      	ldr	r6, [r1, #0]
 8006228:	061f      	lsls	r7, r3, #24
 800622a:	f856 5b04 	ldr.w	r5, [r6], #4
 800622e:	600e      	str	r6, [r1, #0]
 8006230:	d514      	bpl.n	800625c <_printf_i+0x1ac>
 8006232:	07d9      	lsls	r1, r3, #31
 8006234:	bf44      	itt	mi
 8006236:	f043 0320 	orrmi.w	r3, r3, #32
 800623a:	6023      	strmi	r3, [r4, #0]
 800623c:	b91d      	cbnz	r5, 8006246 <_printf_i+0x196>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	f023 0320 	bic.w	r3, r3, #32
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	2310      	movs	r3, #16
 8006248:	e7b0      	b.n	80061ac <_printf_i+0xfc>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	2378      	movs	r3, #120	; 0x78
 8006254:	4828      	ldr	r0, [pc, #160]	; (80062f8 <_printf_i+0x248>)
 8006256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800625a:	e7e3      	b.n	8006224 <_printf_i+0x174>
 800625c:	065e      	lsls	r6, r3, #25
 800625e:	bf48      	it	mi
 8006260:	b2ad      	uxthmi	r5, r5
 8006262:	e7e6      	b.n	8006232 <_printf_i+0x182>
 8006264:	4616      	mov	r6, r2
 8006266:	e7bb      	b.n	80061e0 <_printf_i+0x130>
 8006268:	680b      	ldr	r3, [r1, #0]
 800626a:	6826      	ldr	r6, [r4, #0]
 800626c:	6960      	ldr	r0, [r4, #20]
 800626e:	1d1d      	adds	r5, r3, #4
 8006270:	600d      	str	r5, [r1, #0]
 8006272:	0635      	lsls	r5, r6, #24
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	d501      	bpl.n	800627c <_printf_i+0x1cc>
 8006278:	6018      	str	r0, [r3, #0]
 800627a:	e002      	b.n	8006282 <_printf_i+0x1d2>
 800627c:	0671      	lsls	r1, r6, #25
 800627e:	d5fb      	bpl.n	8006278 <_printf_i+0x1c8>
 8006280:	8018      	strh	r0, [r3, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	4616      	mov	r6, r2
 8006288:	e7ba      	b.n	8006200 <_printf_i+0x150>
 800628a:	680b      	ldr	r3, [r1, #0]
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	600a      	str	r2, [r1, #0]
 8006290:	681e      	ldr	r6, [r3, #0]
 8006292:	6862      	ldr	r2, [r4, #4]
 8006294:	2100      	movs	r1, #0
 8006296:	4630      	mov	r0, r6
 8006298:	f7f9 ffa2 	bl	80001e0 <memchr>
 800629c:	b108      	cbz	r0, 80062a2 <_printf_i+0x1f2>
 800629e:	1b80      	subs	r0, r0, r6
 80062a0:	6060      	str	r0, [r4, #4]
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	6123      	str	r3, [r4, #16]
 80062a6:	2300      	movs	r3, #0
 80062a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ac:	e7a8      	b.n	8006200 <_printf_i+0x150>
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	4632      	mov	r2, r6
 80062b2:	4649      	mov	r1, r9
 80062b4:	4640      	mov	r0, r8
 80062b6:	47d0      	blx	sl
 80062b8:	3001      	adds	r0, #1
 80062ba:	d0ab      	beq.n	8006214 <_printf_i+0x164>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	079b      	lsls	r3, r3, #30
 80062c0:	d413      	bmi.n	80062ea <_printf_i+0x23a>
 80062c2:	68e0      	ldr	r0, [r4, #12]
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	4298      	cmp	r0, r3
 80062c8:	bfb8      	it	lt
 80062ca:	4618      	movlt	r0, r3
 80062cc:	e7a4      	b.n	8006218 <_printf_i+0x168>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4632      	mov	r2, r6
 80062d2:	4649      	mov	r1, r9
 80062d4:	4640      	mov	r0, r8
 80062d6:	47d0      	blx	sl
 80062d8:	3001      	adds	r0, #1
 80062da:	d09b      	beq.n	8006214 <_printf_i+0x164>
 80062dc:	3501      	adds	r5, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	9903      	ldr	r1, [sp, #12]
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	42ab      	cmp	r3, r5
 80062e6:	dcf2      	bgt.n	80062ce <_printf_i+0x21e>
 80062e8:	e7eb      	b.n	80062c2 <_printf_i+0x212>
 80062ea:	2500      	movs	r5, #0
 80062ec:	f104 0619 	add.w	r6, r4, #25
 80062f0:	e7f5      	b.n	80062de <_printf_i+0x22e>
 80062f2:	bf00      	nop
 80062f4:	080069f1 	.word	0x080069f1
 80062f8:	08006a02 	.word	0x08006a02

080062fc <_sbrk_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d06      	ldr	r5, [pc, #24]	; (8006318 <_sbrk_r+0x1c>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fb fb1e 	bl	8001948 <_sbrk>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_sbrk_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_sbrk_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20000254 	.word	0x20000254

0800631c <__sread>:
 800631c:	b510      	push	{r4, lr}
 800631e:	460c      	mov	r4, r1
 8006320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006324:	f000 fab4 	bl	8006890 <_read_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	bfab      	itete	ge
 800632c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800632e:	89a3      	ldrhlt	r3, [r4, #12]
 8006330:	181b      	addge	r3, r3, r0
 8006332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006336:	bfac      	ite	ge
 8006338:	6563      	strge	r3, [r4, #84]	; 0x54
 800633a:	81a3      	strhlt	r3, [r4, #12]
 800633c:	bd10      	pop	{r4, pc}

0800633e <__swrite>:
 800633e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006342:	461f      	mov	r7, r3
 8006344:	898b      	ldrh	r3, [r1, #12]
 8006346:	05db      	lsls	r3, r3, #23
 8006348:	4605      	mov	r5, r0
 800634a:	460c      	mov	r4, r1
 800634c:	4616      	mov	r6, r2
 800634e:	d505      	bpl.n	800635c <__swrite+0x1e>
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	2302      	movs	r3, #2
 8006356:	2200      	movs	r2, #0
 8006358:	f000 f9c8 	bl	80066ec <_lseek_r>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	4632      	mov	r2, r6
 800636a:	463b      	mov	r3, r7
 800636c:	4628      	mov	r0, r5
 800636e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006372:	f000 b869 	b.w	8006448 <_write_r>

08006376 <__sseek>:
 8006376:	b510      	push	{r4, lr}
 8006378:	460c      	mov	r4, r1
 800637a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637e:	f000 f9b5 	bl	80066ec <_lseek_r>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	bf15      	itete	ne
 8006388:	6560      	strne	r0, [r4, #84]	; 0x54
 800638a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800638e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006392:	81a3      	strheq	r3, [r4, #12]
 8006394:	bf18      	it	ne
 8006396:	81a3      	strhne	r3, [r4, #12]
 8006398:	bd10      	pop	{r4, pc}

0800639a <__sclose>:
 800639a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639e:	f000 b8d3 	b.w	8006548 <_close_r>
	...

080063a4 <__swbuf_r>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	460e      	mov	r6, r1
 80063a8:	4614      	mov	r4, r2
 80063aa:	4605      	mov	r5, r0
 80063ac:	b118      	cbz	r0, 80063b6 <__swbuf_r+0x12>
 80063ae:	6983      	ldr	r3, [r0, #24]
 80063b0:	b90b      	cbnz	r3, 80063b6 <__swbuf_r+0x12>
 80063b2:	f7ff fbbb 	bl	8005b2c <__sinit>
 80063b6:	4b21      	ldr	r3, [pc, #132]	; (800643c <__swbuf_r+0x98>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	d12b      	bne.n	8006414 <__swbuf_r+0x70>
 80063bc:	686c      	ldr	r4, [r5, #4]
 80063be:	69a3      	ldr	r3, [r4, #24]
 80063c0:	60a3      	str	r3, [r4, #8]
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	071a      	lsls	r2, r3, #28
 80063c6:	d52f      	bpl.n	8006428 <__swbuf_r+0x84>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	b36b      	cbz	r3, 8006428 <__swbuf_r+0x84>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	6820      	ldr	r0, [r4, #0]
 80063d0:	1ac0      	subs	r0, r0, r3
 80063d2:	6963      	ldr	r3, [r4, #20]
 80063d4:	b2f6      	uxtb	r6, r6
 80063d6:	4283      	cmp	r3, r0
 80063d8:	4637      	mov	r7, r6
 80063da:	dc04      	bgt.n	80063e6 <__swbuf_r+0x42>
 80063dc:	4621      	mov	r1, r4
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f948 	bl	8006674 <_fflush_r>
 80063e4:	bb30      	cbnz	r0, 8006434 <__swbuf_r+0x90>
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	6022      	str	r2, [r4, #0]
 80063f2:	701e      	strb	r6, [r3, #0]
 80063f4:	6963      	ldr	r3, [r4, #20]
 80063f6:	3001      	adds	r0, #1
 80063f8:	4283      	cmp	r3, r0
 80063fa:	d004      	beq.n	8006406 <__swbuf_r+0x62>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	07db      	lsls	r3, r3, #31
 8006400:	d506      	bpl.n	8006410 <__swbuf_r+0x6c>
 8006402:	2e0a      	cmp	r6, #10
 8006404:	d104      	bne.n	8006410 <__swbuf_r+0x6c>
 8006406:	4621      	mov	r1, r4
 8006408:	4628      	mov	r0, r5
 800640a:	f000 f933 	bl	8006674 <_fflush_r>
 800640e:	b988      	cbnz	r0, 8006434 <__swbuf_r+0x90>
 8006410:	4638      	mov	r0, r7
 8006412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <__swbuf_r+0x9c>)
 8006416:	429c      	cmp	r4, r3
 8006418:	d101      	bne.n	800641e <__swbuf_r+0x7a>
 800641a:	68ac      	ldr	r4, [r5, #8]
 800641c:	e7cf      	b.n	80063be <__swbuf_r+0x1a>
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <__swbuf_r+0xa0>)
 8006420:	429c      	cmp	r4, r3
 8006422:	bf08      	it	eq
 8006424:	68ec      	ldreq	r4, [r5, #12]
 8006426:	e7ca      	b.n	80063be <__swbuf_r+0x1a>
 8006428:	4621      	mov	r1, r4
 800642a:	4628      	mov	r0, r5
 800642c:	f000 f81e 	bl	800646c <__swsetup_r>
 8006430:	2800      	cmp	r0, #0
 8006432:	d0cb      	beq.n	80063cc <__swbuf_r+0x28>
 8006434:	f04f 37ff 	mov.w	r7, #4294967295
 8006438:	e7ea      	b.n	8006410 <__swbuf_r+0x6c>
 800643a:	bf00      	nop
 800643c:	080069a0 	.word	0x080069a0
 8006440:	080069c0 	.word	0x080069c0
 8006444:	08006980 	.word	0x08006980

08006448 <_write_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d07      	ldr	r5, [pc, #28]	; (8006468 <_write_r+0x20>)
 800644c:	4604      	mov	r4, r0
 800644e:	4608      	mov	r0, r1
 8006450:	4611      	mov	r1, r2
 8006452:	2200      	movs	r2, #0
 8006454:	602a      	str	r2, [r5, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7fb fa25 	bl	80018a6 <_write>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_write_r+0x1e>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	b103      	cbz	r3, 8006466 <_write_r+0x1e>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20000254 	.word	0x20000254

0800646c <__swsetup_r>:
 800646c:	4b32      	ldr	r3, [pc, #200]	; (8006538 <__swsetup_r+0xcc>)
 800646e:	b570      	push	{r4, r5, r6, lr}
 8006470:	681d      	ldr	r5, [r3, #0]
 8006472:	4606      	mov	r6, r0
 8006474:	460c      	mov	r4, r1
 8006476:	b125      	cbz	r5, 8006482 <__swsetup_r+0x16>
 8006478:	69ab      	ldr	r3, [r5, #24]
 800647a:	b913      	cbnz	r3, 8006482 <__swsetup_r+0x16>
 800647c:	4628      	mov	r0, r5
 800647e:	f7ff fb55 	bl	8005b2c <__sinit>
 8006482:	4b2e      	ldr	r3, [pc, #184]	; (800653c <__swsetup_r+0xd0>)
 8006484:	429c      	cmp	r4, r3
 8006486:	d10f      	bne.n	80064a8 <__swsetup_r+0x3c>
 8006488:	686c      	ldr	r4, [r5, #4]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006490:	0719      	lsls	r1, r3, #28
 8006492:	d42c      	bmi.n	80064ee <__swsetup_r+0x82>
 8006494:	06dd      	lsls	r5, r3, #27
 8006496:	d411      	bmi.n	80064bc <__swsetup_r+0x50>
 8006498:	2309      	movs	r3, #9
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	f04f 30ff 	mov.w	r0, #4294967295
 80064a6:	e03e      	b.n	8006526 <__swsetup_r+0xba>
 80064a8:	4b25      	ldr	r3, [pc, #148]	; (8006540 <__swsetup_r+0xd4>)
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d101      	bne.n	80064b2 <__swsetup_r+0x46>
 80064ae:	68ac      	ldr	r4, [r5, #8]
 80064b0:	e7eb      	b.n	800648a <__swsetup_r+0x1e>
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <__swsetup_r+0xd8>)
 80064b4:	429c      	cmp	r4, r3
 80064b6:	bf08      	it	eq
 80064b8:	68ec      	ldreq	r4, [r5, #12]
 80064ba:	e7e6      	b.n	800648a <__swsetup_r+0x1e>
 80064bc:	0758      	lsls	r0, r3, #29
 80064be:	d512      	bpl.n	80064e6 <__swsetup_r+0x7a>
 80064c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c2:	b141      	cbz	r1, 80064d6 <__swsetup_r+0x6a>
 80064c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064c8:	4299      	cmp	r1, r3
 80064ca:	d002      	beq.n	80064d2 <__swsetup_r+0x66>
 80064cc:	4630      	mov	r0, r6
 80064ce:	f000 f98f 	bl	80067f0 <_free_r>
 80064d2:	2300      	movs	r3, #0
 80064d4:	6363      	str	r3, [r4, #52]	; 0x34
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	2300      	movs	r3, #0
 80064e0:	6063      	str	r3, [r4, #4]
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	f043 0308 	orr.w	r3, r3, #8
 80064ec:	81a3      	strh	r3, [r4, #12]
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	b94b      	cbnz	r3, 8006506 <__swsetup_r+0x9a>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fc:	d003      	beq.n	8006506 <__swsetup_r+0x9a>
 80064fe:	4621      	mov	r1, r4
 8006500:	4630      	mov	r0, r6
 8006502:	f000 f929 	bl	8006758 <__smakebuf_r>
 8006506:	89a0      	ldrh	r0, [r4, #12]
 8006508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800650c:	f010 0301 	ands.w	r3, r0, #1
 8006510:	d00a      	beq.n	8006528 <__swsetup_r+0xbc>
 8006512:	2300      	movs	r3, #0
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	6963      	ldr	r3, [r4, #20]
 8006518:	425b      	negs	r3, r3
 800651a:	61a3      	str	r3, [r4, #24]
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	b943      	cbnz	r3, 8006532 <__swsetup_r+0xc6>
 8006520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006524:	d1ba      	bne.n	800649c <__swsetup_r+0x30>
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	0781      	lsls	r1, r0, #30
 800652a:	bf58      	it	pl
 800652c:	6963      	ldrpl	r3, [r4, #20]
 800652e:	60a3      	str	r3, [r4, #8]
 8006530:	e7f4      	b.n	800651c <__swsetup_r+0xb0>
 8006532:	2000      	movs	r0, #0
 8006534:	e7f7      	b.n	8006526 <__swsetup_r+0xba>
 8006536:	bf00      	nop
 8006538:	20000010 	.word	0x20000010
 800653c:	080069a0 	.word	0x080069a0
 8006540:	080069c0 	.word	0x080069c0
 8006544:	08006980 	.word	0x08006980

08006548 <_close_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	; (8006564 <_close_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fb f9c3 	bl	80018de <_close>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_close_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_close_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	20000254 	.word	0x20000254

08006568 <__sflush_r>:
 8006568:	898a      	ldrh	r2, [r1, #12]
 800656a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656e:	4605      	mov	r5, r0
 8006570:	0710      	lsls	r0, r2, #28
 8006572:	460c      	mov	r4, r1
 8006574:	d458      	bmi.n	8006628 <__sflush_r+0xc0>
 8006576:	684b      	ldr	r3, [r1, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	dc05      	bgt.n	8006588 <__sflush_r+0x20>
 800657c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	dc02      	bgt.n	8006588 <__sflush_r+0x20>
 8006582:	2000      	movs	r0, #0
 8006584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800658a:	2e00      	cmp	r6, #0
 800658c:	d0f9      	beq.n	8006582 <__sflush_r+0x1a>
 800658e:	2300      	movs	r3, #0
 8006590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006594:	682f      	ldr	r7, [r5, #0]
 8006596:	602b      	str	r3, [r5, #0]
 8006598:	d032      	beq.n	8006600 <__sflush_r+0x98>
 800659a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	075a      	lsls	r2, r3, #29
 80065a0:	d505      	bpl.n	80065ae <__sflush_r+0x46>
 80065a2:	6863      	ldr	r3, [r4, #4]
 80065a4:	1ac0      	subs	r0, r0, r3
 80065a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065a8:	b10b      	cbz	r3, 80065ae <__sflush_r+0x46>
 80065aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065ac:	1ac0      	subs	r0, r0, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	4602      	mov	r2, r0
 80065b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065b4:	6a21      	ldr	r1, [r4, #32]
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b0      	blx	r6
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	d106      	bne.n	80065ce <__sflush_r+0x66>
 80065c0:	6829      	ldr	r1, [r5, #0]
 80065c2:	291d      	cmp	r1, #29
 80065c4:	d82c      	bhi.n	8006620 <__sflush_r+0xb8>
 80065c6:	4a2a      	ldr	r2, [pc, #168]	; (8006670 <__sflush_r+0x108>)
 80065c8:	40ca      	lsrs	r2, r1
 80065ca:	07d6      	lsls	r6, r2, #31
 80065cc:	d528      	bpl.n	8006620 <__sflush_r+0xb8>
 80065ce:	2200      	movs	r2, #0
 80065d0:	6062      	str	r2, [r4, #4]
 80065d2:	04d9      	lsls	r1, r3, #19
 80065d4:	6922      	ldr	r2, [r4, #16]
 80065d6:	6022      	str	r2, [r4, #0]
 80065d8:	d504      	bpl.n	80065e4 <__sflush_r+0x7c>
 80065da:	1c42      	adds	r2, r0, #1
 80065dc:	d101      	bne.n	80065e2 <__sflush_r+0x7a>
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	b903      	cbnz	r3, 80065e4 <__sflush_r+0x7c>
 80065e2:	6560      	str	r0, [r4, #84]	; 0x54
 80065e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065e6:	602f      	str	r7, [r5, #0]
 80065e8:	2900      	cmp	r1, #0
 80065ea:	d0ca      	beq.n	8006582 <__sflush_r+0x1a>
 80065ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065f0:	4299      	cmp	r1, r3
 80065f2:	d002      	beq.n	80065fa <__sflush_r+0x92>
 80065f4:	4628      	mov	r0, r5
 80065f6:	f000 f8fb 	bl	80067f0 <_free_r>
 80065fa:	2000      	movs	r0, #0
 80065fc:	6360      	str	r0, [r4, #52]	; 0x34
 80065fe:	e7c1      	b.n	8006584 <__sflush_r+0x1c>
 8006600:	6a21      	ldr	r1, [r4, #32]
 8006602:	2301      	movs	r3, #1
 8006604:	4628      	mov	r0, r5
 8006606:	47b0      	blx	r6
 8006608:	1c41      	adds	r1, r0, #1
 800660a:	d1c7      	bne.n	800659c <__sflush_r+0x34>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0c4      	beq.n	800659c <__sflush_r+0x34>
 8006612:	2b1d      	cmp	r3, #29
 8006614:	d001      	beq.n	800661a <__sflush_r+0xb2>
 8006616:	2b16      	cmp	r3, #22
 8006618:	d101      	bne.n	800661e <__sflush_r+0xb6>
 800661a:	602f      	str	r7, [r5, #0]
 800661c:	e7b1      	b.n	8006582 <__sflush_r+0x1a>
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	e7ad      	b.n	8006584 <__sflush_r+0x1c>
 8006628:	690f      	ldr	r7, [r1, #16]
 800662a:	2f00      	cmp	r7, #0
 800662c:	d0a9      	beq.n	8006582 <__sflush_r+0x1a>
 800662e:	0793      	lsls	r3, r2, #30
 8006630:	680e      	ldr	r6, [r1, #0]
 8006632:	bf08      	it	eq
 8006634:	694b      	ldreq	r3, [r1, #20]
 8006636:	600f      	str	r7, [r1, #0]
 8006638:	bf18      	it	ne
 800663a:	2300      	movne	r3, #0
 800663c:	eba6 0807 	sub.w	r8, r6, r7
 8006640:	608b      	str	r3, [r1, #8]
 8006642:	f1b8 0f00 	cmp.w	r8, #0
 8006646:	dd9c      	ble.n	8006582 <__sflush_r+0x1a>
 8006648:	6a21      	ldr	r1, [r4, #32]
 800664a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800664c:	4643      	mov	r3, r8
 800664e:	463a      	mov	r2, r7
 8006650:	4628      	mov	r0, r5
 8006652:	47b0      	blx	r6
 8006654:	2800      	cmp	r0, #0
 8006656:	dc06      	bgt.n	8006666 <__sflush_r+0xfe>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	e78e      	b.n	8006584 <__sflush_r+0x1c>
 8006666:	4407      	add	r7, r0
 8006668:	eba8 0800 	sub.w	r8, r8, r0
 800666c:	e7e9      	b.n	8006642 <__sflush_r+0xda>
 800666e:	bf00      	nop
 8006670:	20400001 	.word	0x20400001

08006674 <_fflush_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	690b      	ldr	r3, [r1, #16]
 8006678:	4605      	mov	r5, r0
 800667a:	460c      	mov	r4, r1
 800667c:	b913      	cbnz	r3, 8006684 <_fflush_r+0x10>
 800667e:	2500      	movs	r5, #0
 8006680:	4628      	mov	r0, r5
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	b118      	cbz	r0, 800668e <_fflush_r+0x1a>
 8006686:	6983      	ldr	r3, [r0, #24]
 8006688:	b90b      	cbnz	r3, 800668e <_fflush_r+0x1a>
 800668a:	f7ff fa4f 	bl	8005b2c <__sinit>
 800668e:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <_fflush_r+0x6c>)
 8006690:	429c      	cmp	r4, r3
 8006692:	d11b      	bne.n	80066cc <_fflush_r+0x58>
 8006694:	686c      	ldr	r4, [r5, #4]
 8006696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0ef      	beq.n	800667e <_fflush_r+0xa>
 800669e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066a0:	07d0      	lsls	r0, r2, #31
 80066a2:	d404      	bmi.n	80066ae <_fflush_r+0x3a>
 80066a4:	0599      	lsls	r1, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_fflush_r+0x3a>
 80066a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066aa:	f7ff fadd 	bl	8005c68 <__retarget_lock_acquire_recursive>
 80066ae:	4628      	mov	r0, r5
 80066b0:	4621      	mov	r1, r4
 80066b2:	f7ff ff59 	bl	8006568 <__sflush_r>
 80066b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066b8:	07da      	lsls	r2, r3, #31
 80066ba:	4605      	mov	r5, r0
 80066bc:	d4e0      	bmi.n	8006680 <_fflush_r+0xc>
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	059b      	lsls	r3, r3, #22
 80066c2:	d4dd      	bmi.n	8006680 <_fflush_r+0xc>
 80066c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066c6:	f7ff fad0 	bl	8005c6a <__retarget_lock_release_recursive>
 80066ca:	e7d9      	b.n	8006680 <_fflush_r+0xc>
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <_fflush_r+0x70>)
 80066ce:	429c      	cmp	r4, r3
 80066d0:	d101      	bne.n	80066d6 <_fflush_r+0x62>
 80066d2:	68ac      	ldr	r4, [r5, #8]
 80066d4:	e7df      	b.n	8006696 <_fflush_r+0x22>
 80066d6:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <_fflush_r+0x74>)
 80066d8:	429c      	cmp	r4, r3
 80066da:	bf08      	it	eq
 80066dc:	68ec      	ldreq	r4, [r5, #12]
 80066de:	e7da      	b.n	8006696 <_fflush_r+0x22>
 80066e0:	080069a0 	.word	0x080069a0
 80066e4:	080069c0 	.word	0x080069c0
 80066e8:	08006980 	.word	0x08006980

080066ec <_lseek_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d07      	ldr	r5, [pc, #28]	; (800670c <_lseek_r+0x20>)
 80066f0:	4604      	mov	r4, r0
 80066f2:	4608      	mov	r0, r1
 80066f4:	4611      	mov	r1, r2
 80066f6:	2200      	movs	r2, #0
 80066f8:	602a      	str	r2, [r5, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f7fb f916 	bl	800192c <_lseek>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_lseek_r+0x1e>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_lseek_r+0x1e>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000254 	.word	0x20000254

08006710 <__swhatbuf_r>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	460e      	mov	r6, r1
 8006714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006718:	2900      	cmp	r1, #0
 800671a:	b096      	sub	sp, #88	; 0x58
 800671c:	4614      	mov	r4, r2
 800671e:	461d      	mov	r5, r3
 8006720:	da07      	bge.n	8006732 <__swhatbuf_r+0x22>
 8006722:	2300      	movs	r3, #0
 8006724:	602b      	str	r3, [r5, #0]
 8006726:	89b3      	ldrh	r3, [r6, #12]
 8006728:	061a      	lsls	r2, r3, #24
 800672a:	d410      	bmi.n	800674e <__swhatbuf_r+0x3e>
 800672c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006730:	e00e      	b.n	8006750 <__swhatbuf_r+0x40>
 8006732:	466a      	mov	r2, sp
 8006734:	f000 f8be 	bl	80068b4 <_fstat_r>
 8006738:	2800      	cmp	r0, #0
 800673a:	dbf2      	blt.n	8006722 <__swhatbuf_r+0x12>
 800673c:	9a01      	ldr	r2, [sp, #4]
 800673e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006746:	425a      	negs	r2, r3
 8006748:	415a      	adcs	r2, r3
 800674a:	602a      	str	r2, [r5, #0]
 800674c:	e7ee      	b.n	800672c <__swhatbuf_r+0x1c>
 800674e:	2340      	movs	r3, #64	; 0x40
 8006750:	2000      	movs	r0, #0
 8006752:	6023      	str	r3, [r4, #0]
 8006754:	b016      	add	sp, #88	; 0x58
 8006756:	bd70      	pop	{r4, r5, r6, pc}

08006758 <__smakebuf_r>:
 8006758:	898b      	ldrh	r3, [r1, #12]
 800675a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800675c:	079d      	lsls	r5, r3, #30
 800675e:	4606      	mov	r6, r0
 8006760:	460c      	mov	r4, r1
 8006762:	d507      	bpl.n	8006774 <__smakebuf_r+0x1c>
 8006764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	2301      	movs	r3, #1
 800676e:	6163      	str	r3, [r4, #20]
 8006770:	b002      	add	sp, #8
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	ab01      	add	r3, sp, #4
 8006776:	466a      	mov	r2, sp
 8006778:	f7ff ffca 	bl	8006710 <__swhatbuf_r>
 800677c:	9900      	ldr	r1, [sp, #0]
 800677e:	4605      	mov	r5, r0
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff fa73 	bl	8005c6c <_malloc_r>
 8006786:	b948      	cbnz	r0, 800679c <__smakebuf_r+0x44>
 8006788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678c:	059a      	lsls	r2, r3, #22
 800678e:	d4ef      	bmi.n	8006770 <__smakebuf_r+0x18>
 8006790:	f023 0303 	bic.w	r3, r3, #3
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	81a3      	strh	r3, [r4, #12]
 800679a:	e7e3      	b.n	8006764 <__smakebuf_r+0xc>
 800679c:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <__smakebuf_r+0x7c>)
 800679e:	62b3      	str	r3, [r6, #40]	; 0x28
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	6020      	str	r0, [r4, #0]
 80067a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	9b00      	ldr	r3, [sp, #0]
 80067ac:	6163      	str	r3, [r4, #20]
 80067ae:	9b01      	ldr	r3, [sp, #4]
 80067b0:	6120      	str	r0, [r4, #16]
 80067b2:	b15b      	cbz	r3, 80067cc <__smakebuf_r+0x74>
 80067b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067b8:	4630      	mov	r0, r6
 80067ba:	f000 f88d 	bl	80068d8 <_isatty_r>
 80067be:	b128      	cbz	r0, 80067cc <__smakebuf_r+0x74>
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	81a3      	strh	r3, [r4, #12]
 80067cc:	89a0      	ldrh	r0, [r4, #12]
 80067ce:	4305      	orrs	r5, r0
 80067d0:	81a5      	strh	r5, [r4, #12]
 80067d2:	e7cd      	b.n	8006770 <__smakebuf_r+0x18>
 80067d4:	08005ac5 	.word	0x08005ac5

080067d8 <__malloc_lock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__malloc_lock+0x8>)
 80067da:	f7ff ba45 	b.w	8005c68 <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	2000024c 	.word	0x2000024c

080067e4 <__malloc_unlock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_unlock+0x8>)
 80067e6:	f7ff ba40 	b.w	8005c6a <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	2000024c 	.word	0x2000024c

080067f0 <_free_r>:
 80067f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d048      	beq.n	8006888 <_free_r+0x98>
 80067f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fa:	9001      	str	r0, [sp, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006802:	bfb8      	it	lt
 8006804:	18e4      	addlt	r4, r4, r3
 8006806:	f7ff ffe7 	bl	80067d8 <__malloc_lock>
 800680a:	4a20      	ldr	r2, [pc, #128]	; (800688c <_free_r+0x9c>)
 800680c:	9801      	ldr	r0, [sp, #4]
 800680e:	6813      	ldr	r3, [r2, #0]
 8006810:	4615      	mov	r5, r2
 8006812:	b933      	cbnz	r3, 8006822 <_free_r+0x32>
 8006814:	6063      	str	r3, [r4, #4]
 8006816:	6014      	str	r4, [r2, #0]
 8006818:	b003      	add	sp, #12
 800681a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800681e:	f7ff bfe1 	b.w	80067e4 <__malloc_unlock>
 8006822:	42a3      	cmp	r3, r4
 8006824:	d90b      	bls.n	800683e <_free_r+0x4e>
 8006826:	6821      	ldr	r1, [r4, #0]
 8006828:	1862      	adds	r2, r4, r1
 800682a:	4293      	cmp	r3, r2
 800682c:	bf04      	itt	eq
 800682e:	681a      	ldreq	r2, [r3, #0]
 8006830:	685b      	ldreq	r3, [r3, #4]
 8006832:	6063      	str	r3, [r4, #4]
 8006834:	bf04      	itt	eq
 8006836:	1852      	addeq	r2, r2, r1
 8006838:	6022      	streq	r2, [r4, #0]
 800683a:	602c      	str	r4, [r5, #0]
 800683c:	e7ec      	b.n	8006818 <_free_r+0x28>
 800683e:	461a      	mov	r2, r3
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b10b      	cbz	r3, 8006848 <_free_r+0x58>
 8006844:	42a3      	cmp	r3, r4
 8006846:	d9fa      	bls.n	800683e <_free_r+0x4e>
 8006848:	6811      	ldr	r1, [r2, #0]
 800684a:	1855      	adds	r5, r2, r1
 800684c:	42a5      	cmp	r5, r4
 800684e:	d10b      	bne.n	8006868 <_free_r+0x78>
 8006850:	6824      	ldr	r4, [r4, #0]
 8006852:	4421      	add	r1, r4
 8006854:	1854      	adds	r4, r2, r1
 8006856:	42a3      	cmp	r3, r4
 8006858:	6011      	str	r1, [r2, #0]
 800685a:	d1dd      	bne.n	8006818 <_free_r+0x28>
 800685c:	681c      	ldr	r4, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	6053      	str	r3, [r2, #4]
 8006862:	4421      	add	r1, r4
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	e7d7      	b.n	8006818 <_free_r+0x28>
 8006868:	d902      	bls.n	8006870 <_free_r+0x80>
 800686a:	230c      	movs	r3, #12
 800686c:	6003      	str	r3, [r0, #0]
 800686e:	e7d3      	b.n	8006818 <_free_r+0x28>
 8006870:	6825      	ldr	r5, [r4, #0]
 8006872:	1961      	adds	r1, r4, r5
 8006874:	428b      	cmp	r3, r1
 8006876:	bf04      	itt	eq
 8006878:	6819      	ldreq	r1, [r3, #0]
 800687a:	685b      	ldreq	r3, [r3, #4]
 800687c:	6063      	str	r3, [r4, #4]
 800687e:	bf04      	itt	eq
 8006880:	1949      	addeq	r1, r1, r5
 8006882:	6021      	streq	r1, [r4, #0]
 8006884:	6054      	str	r4, [r2, #4]
 8006886:	e7c7      	b.n	8006818 <_free_r+0x28>
 8006888:	b003      	add	sp, #12
 800688a:	bd30      	pop	{r4, r5, pc}
 800688c:	2000009c 	.word	0x2000009c

08006890 <_read_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d07      	ldr	r5, [pc, #28]	; (80068b0 <_read_r+0x20>)
 8006894:	4604      	mov	r4, r0
 8006896:	4608      	mov	r0, r1
 8006898:	4611      	mov	r1, r2
 800689a:	2200      	movs	r2, #0
 800689c:	602a      	str	r2, [r5, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7fa ffe4 	bl	800186c <_read>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_read_r+0x1e>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_read_r+0x1e>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20000254 	.word	0x20000254

080068b4 <_fstat_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	; (80068d4 <_fstat_r+0x20>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	f7fb f818 	bl	80018f6 <_fstat>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d102      	bne.n	80068d0 <_fstat_r+0x1c>
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	b103      	cbz	r3, 80068d0 <_fstat_r+0x1c>
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	bd38      	pop	{r3, r4, r5, pc}
 80068d2:	bf00      	nop
 80068d4:	20000254 	.word	0x20000254

080068d8 <_isatty_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d06      	ldr	r5, [pc, #24]	; (80068f4 <_isatty_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fb f817 	bl	8001916 <_isatty>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_isatty_r+0x1a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_isatty_r+0x1a>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20000254 	.word	0x20000254

080068f8 <_init>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	bf00      	nop
 80068fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fe:	bc08      	pop	{r3}
 8006900:	469e      	mov	lr, r3
 8006902:	4770      	bx	lr

08006904 <_fini>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr
