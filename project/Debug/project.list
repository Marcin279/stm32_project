
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004608  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c8  080047c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000010  080047e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080047e0  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ac  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ee  00000000  00000000  000309ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00033cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178a8  00000000  00000000  00034978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001167d  00000000  00000000  0004c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009617d  00000000  00000000  0005d89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3a1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  000f3a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004788 	.word	0x08004788

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004788 	.word	0x08004788

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cc0:	4a30      	ldr	r2, [pc, #192]	; (8000d84 <MX_ADC1_Init+0xd8>)
 8000cc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cc6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cf0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000cfe:	2203      	movs	r2, #3
 8000d00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d10:	481b      	ldr	r0, [pc, #108]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000d12:	f001 f80d 	bl	8001d30 <HAL_ADC_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d1c:	f000 fc60 	bl	80015e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4813      	ldr	r0, [pc, #76]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000d32:	f001 f945 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d3c:	f000 fc50 	bl	80015e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_ADC1_Init+0xdc>)
 8000d42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000d4e:	f001 f937 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d58:	f000 fc42 	bl	80015e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d5c:	2311      	movs	r3, #17
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d60:	2303      	movs	r3, #3
 8000d62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_ADC1_Init+0xd4>)
 8000d6a:	f001 f929 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000d74:	f000 fc34 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000034 	.word	0x20000034
 8000d84:	40012000 	.word	0x40012000
 8000d88:	10000012 	.word	0x10000012

08000d8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <HAL_ADC_MspInit+0xdc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d157      	bne.n	8000e5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a26      	ldr	r2, [pc, #152]	; (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000de6:	2302      	movs	r3, #2
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <HAL_ADC_MspInit+0xe4>)
 8000dfa:	f002 f813 	bl	8002e24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_ADC_MspInit+0xec>)
 8000e02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e44:	f001 fc7e 	bl	8002744 <HAL_DMA_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e4e:	f000 fbc7 	bl	80015e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012000 	.word	0x40012000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	20000080 	.word	0x20000080
 8000e78:	40026410 	.word	0x40026410

08000e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_DMA_Init+0x3c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <MX_DMA_Init+0x3c>)
 8000e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_DMA_Init+0x3c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2038      	movs	r0, #56	; 0x38
 8000ea4:	f001 fc17 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ea8:	2038      	movs	r0, #56	; 0x38
 8000eaa:	f001 fc30 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <wyswietlacz>:
 *
 *  Created on: Jan 22, 2022
 *      Author: jakub
 */
#include "gpio.h"
  void wyswietlacz (int cyfra, int port){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b09      	cmp	r3, #9
 8000eca:	f200 817f 	bhi.w	80011cc <wyswietlacz+0x310>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <wyswietlacz+0x18>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000efd 	.word	0x08000efd
 8000ed8:	08000f45 	.word	0x08000f45
 8000edc:	08000f8d 	.word	0x08000f8d
 8000ee0:	08000fd5 	.word	0x08000fd5
 8000ee4:	0800101d 	.word	0x0800101d
 8000ee8:	08001065 	.word	0x08001065
 8000eec:	080010ad 	.word	0x080010ad
 8000ef0:	080010f5 	.word	0x080010f5
 8000ef4:	0800113d 	.word	0x0800113d
 8000ef8:	08001185 	.word	0x08001185
  	  // obsługa cyfr
	  switch(cyfra){
	  case (0):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8000efc:	2201      	movs	r2, #1
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	48c7      	ldr	r0, [pc, #796]	; (8001220 <wyswietlacz+0x364>)
 8000f02:	f002 f913 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	2110      	movs	r1, #16
 8000f0a:	48c5      	ldr	r0, [pc, #788]	; (8001220 <wyswietlacz+0x364>)
 8000f0c:	f002 f90e 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	2108      	movs	r1, #8
 8000f14:	48c2      	ldr	r0, [pc, #776]	; (8001220 <wyswietlacz+0x364>)
 8000f16:	f002 f909 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	48c0      	ldr	r0, [pc, #768]	; (8001220 <wyswietlacz+0x364>)
 8000f20:	f002 f904 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	2104      	movs	r1, #4
 8000f28:	48bd      	ldr	r0, [pc, #756]	; (8001220 <wyswietlacz+0x364>)
 8000f2a:	f002 f8ff 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2120      	movs	r1, #32
 8000f32:	48bb      	ldr	r0, [pc, #748]	; (8001220 <wyswietlacz+0x364>)
 8000f34:	f002 f8fa 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_RESET) ;
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	48b8      	ldr	r0, [pc, #736]	; (8001220 <wyswietlacz+0x364>)
 8000f3e:	f002 f8f5 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 8000f42:	e143      	b.n	80011cc <wyswietlacz+0x310>
	  case (1):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_RESET) ;
 8000f44:	2200      	movs	r2, #0
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	48b5      	ldr	r0, [pc, #724]	; (8001220 <wyswietlacz+0x364>)
 8000f4a:	f002 f8ef 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2110      	movs	r1, #16
 8000f52:	48b3      	ldr	r0, [pc, #716]	; (8001220 <wyswietlacz+0x364>)
 8000f54:	f002 f8ea 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	48b0      	ldr	r0, [pc, #704]	; (8001220 <wyswietlacz+0x364>)
 8000f5e:	f002 f8e5 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_RESET) ;
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	48ae      	ldr	r0, [pc, #696]	; (8001220 <wyswietlacz+0x364>)
 8000f68:	f002 f8e0 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2104      	movs	r1, #4
 8000f70:	48ab      	ldr	r0, [pc, #684]	; (8001220 <wyswietlacz+0x364>)
 8000f72:	f002 f8db 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 8000f76:	2200      	movs	r2, #0
 8000f78:	2120      	movs	r1, #32
 8000f7a:	48a9      	ldr	r0, [pc, #676]	; (8001220 <wyswietlacz+0x364>)
 8000f7c:	f002 f8d6 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_RESET) ;
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	48a6      	ldr	r0, [pc, #664]	; (8001220 <wyswietlacz+0x364>)
 8000f86:	f002 f8d1 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 8000f8a:	e11f      	b.n	80011cc <wyswietlacz+0x310>
	  case (2):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	48a3      	ldr	r0, [pc, #652]	; (8001220 <wyswietlacz+0x364>)
 8000f92:	f002 f8cb 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8000f96:	2201      	movs	r2, #1
 8000f98:	2110      	movs	r1, #16
 8000f9a:	48a1      	ldr	r0, [pc, #644]	; (8001220 <wyswietlacz+0x364>)
 8000f9c:	f002 f8c6 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_RESET) ;
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	489e      	ldr	r0, [pc, #632]	; (8001220 <wyswietlacz+0x364>)
 8000fa6:	f002 f8c1 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	2102      	movs	r1, #2
 8000fae:	489c      	ldr	r0, [pc, #624]	; (8001220 <wyswietlacz+0x364>)
 8000fb0:	f002 f8bc 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4899      	ldr	r0, [pc, #612]	; (8001220 <wyswietlacz+0x364>)
 8000fba:	f002 f8b7 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4897      	ldr	r0, [pc, #604]	; (8001220 <wyswietlacz+0x364>)
 8000fc4:	f002 f8b2 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4894      	ldr	r0, [pc, #592]	; (8001220 <wyswietlacz+0x364>)
 8000fce:	f002 f8ad 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 8000fd2:	e0fb      	b.n	80011cc <wyswietlacz+0x310>
  	 case (3):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4891      	ldr	r0, [pc, #580]	; (8001220 <wyswietlacz+0x364>)
 8000fda:	f002 f8a7 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	488f      	ldr	r0, [pc, #572]	; (8001220 <wyswietlacz+0x364>)
 8000fe4:	f002 f8a2 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2108      	movs	r1, #8
 8000fec:	488c      	ldr	r0, [pc, #560]	; (8001220 <wyswietlacz+0x364>)
 8000fee:	f002 f89d 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	488a      	ldr	r0, [pc, #552]	; (8001220 <wyswietlacz+0x364>)
 8000ff8:	f002 f898 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2104      	movs	r1, #4
 8001000:	4887      	ldr	r0, [pc, #540]	; (8001220 <wyswietlacz+0x364>)
 8001002:	f002 f893 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 8001006:	2200      	movs	r2, #0
 8001008:	2120      	movs	r1, #32
 800100a:	4885      	ldr	r0, [pc, #532]	; (8001220 <wyswietlacz+0x364>)
 800100c:	f002 f88e 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 8001010:	2201      	movs	r2, #1
 8001012:	2101      	movs	r1, #1
 8001014:	4882      	ldr	r0, [pc, #520]	; (8001220 <wyswietlacz+0x364>)
 8001016:	f002 f889 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 800101a:	e0d7      	b.n	80011cc <wyswietlacz+0x310>
  	 case (4):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_RESET) ;
 800101c:	2200      	movs	r2, #0
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	487f      	ldr	r0, [pc, #508]	; (8001220 <wyswietlacz+0x364>)
 8001022:	f002 f883 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8001026:	2201      	movs	r2, #1
 8001028:	2110      	movs	r1, #16
 800102a:	487d      	ldr	r0, [pc, #500]	; (8001220 <wyswietlacz+0x364>)
 800102c:	f002 f87e 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001030:	2201      	movs	r2, #1
 8001032:	2108      	movs	r1, #8
 8001034:	487a      	ldr	r0, [pc, #488]	; (8001220 <wyswietlacz+0x364>)
 8001036:	f002 f879 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_RESET) ;
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4878      	ldr	r0, [pc, #480]	; (8001220 <wyswietlacz+0x364>)
 8001040:	f002 f874 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 8001044:	2200      	movs	r2, #0
 8001046:	2104      	movs	r1, #4
 8001048:	4875      	ldr	r0, [pc, #468]	; (8001220 <wyswietlacz+0x364>)
 800104a:	f002 f86f 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 800104e:	2201      	movs	r2, #1
 8001050:	2120      	movs	r1, #32
 8001052:	4873      	ldr	r0, [pc, #460]	; (8001220 <wyswietlacz+0x364>)
 8001054:	f002 f86a 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 8001058:	2201      	movs	r2, #1
 800105a:	2101      	movs	r1, #1
 800105c:	4870      	ldr	r0, [pc, #448]	; (8001220 <wyswietlacz+0x364>)
 800105e:	f002 f865 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 8001062:	e0b3      	b.n	80011cc <wyswietlacz+0x310>
  	 case (5):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001064:	2201      	movs	r2, #1
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	486d      	ldr	r0, [pc, #436]	; (8001220 <wyswietlacz+0x364>)
 800106a:	f002 f85f 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_RESET) ;
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	486b      	ldr	r0, [pc, #428]	; (8001220 <wyswietlacz+0x364>)
 8001074:	f002 f85a 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001078:	2201      	movs	r2, #1
 800107a:	2108      	movs	r1, #8
 800107c:	4868      	ldr	r0, [pc, #416]	; (8001220 <wyswietlacz+0x364>)
 800107e:	f002 f855 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 8001082:	2201      	movs	r2, #1
 8001084:	2102      	movs	r1, #2
 8001086:	4866      	ldr	r0, [pc, #408]	; (8001220 <wyswietlacz+0x364>)
 8001088:	f002 f850 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 800108c:	2200      	movs	r2, #0
 800108e:	2104      	movs	r1, #4
 8001090:	4863      	ldr	r0, [pc, #396]	; (8001220 <wyswietlacz+0x364>)
 8001092:	f002 f84b 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 8001096:	2201      	movs	r2, #1
 8001098:	2120      	movs	r1, #32
 800109a:	4861      	ldr	r0, [pc, #388]	; (8001220 <wyswietlacz+0x364>)
 800109c:	f002 f846 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 80010a0:	2201      	movs	r2, #1
 80010a2:	2101      	movs	r1, #1
 80010a4:	485e      	ldr	r0, [pc, #376]	; (8001220 <wyswietlacz+0x364>)
 80010a6:	f002 f841 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 80010aa:	e08f      	b.n	80011cc <wyswietlacz+0x310>
  	 case (6):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	485b      	ldr	r0, [pc, #364]	; (8001220 <wyswietlacz+0x364>)
 80010b2:	f002 f83b 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_RESET) ;
 80010b6:	2200      	movs	r2, #0
 80010b8:	2110      	movs	r1, #16
 80010ba:	4859      	ldr	r0, [pc, #356]	; (8001220 <wyswietlacz+0x364>)
 80010bc:	f002 f836 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 80010c0:	2201      	movs	r2, #1
 80010c2:	2108      	movs	r1, #8
 80010c4:	4856      	ldr	r0, [pc, #344]	; (8001220 <wyswietlacz+0x364>)
 80010c6:	f002 f831 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	2102      	movs	r1, #2
 80010ce:	4854      	ldr	r0, [pc, #336]	; (8001220 <wyswietlacz+0x364>)
 80010d0:	f002 f82c 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	4851      	ldr	r0, [pc, #324]	; (8001220 <wyswietlacz+0x364>)
 80010da:	f002 f827 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	2120      	movs	r1, #32
 80010e2:	484f      	ldr	r0, [pc, #316]	; (8001220 <wyswietlacz+0x364>)
 80010e4:	f002 f822 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	2101      	movs	r1, #1
 80010ec:	484c      	ldr	r0, [pc, #304]	; (8001220 <wyswietlacz+0x364>)
 80010ee:	f002 f81d 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 80010f2:	e06b      	b.n	80011cc <wyswietlacz+0x310>
  	 case (7):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4849      	ldr	r0, [pc, #292]	; (8001220 <wyswietlacz+0x364>)
 80010fa:	f002 f817 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	2110      	movs	r1, #16
 8001102:	4847      	ldr	r0, [pc, #284]	; (8001220 <wyswietlacz+0x364>)
 8001104:	f002 f812 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001108:	2201      	movs	r2, #1
 800110a:	2108      	movs	r1, #8
 800110c:	4844      	ldr	r0, [pc, #272]	; (8001220 <wyswietlacz+0x364>)
 800110e:	f002 f80d 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_RESET) ;
 8001112:	2200      	movs	r2, #0
 8001114:	2102      	movs	r1, #2
 8001116:	4842      	ldr	r0, [pc, #264]	; (8001220 <wyswietlacz+0x364>)
 8001118:	f002 f808 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 800111c:	2200      	movs	r2, #0
 800111e:	2104      	movs	r1, #4
 8001120:	483f      	ldr	r0, [pc, #252]	; (8001220 <wyswietlacz+0x364>)
 8001122:	f002 f803 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_RESET) ;
 8001126:	2200      	movs	r2, #0
 8001128:	2120      	movs	r1, #32
 800112a:	483d      	ldr	r0, [pc, #244]	; (8001220 <wyswietlacz+0x364>)
 800112c:	f001 fffe 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_RESET) ;
 8001130:	2200      	movs	r2, #0
 8001132:	2101      	movs	r1, #1
 8001134:	483a      	ldr	r0, [pc, #232]	; (8001220 <wyswietlacz+0x364>)
 8001136:	f001 fff9 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 800113a:	e047      	b.n	80011cc <wyswietlacz+0x310>
  	 case (8):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 800113c:	2201      	movs	r2, #1
 800113e:	2140      	movs	r1, #64	; 0x40
 8001140:	4837      	ldr	r0, [pc, #220]	; (8001220 <wyswietlacz+0x364>)
 8001142:	f001 fff3 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	4835      	ldr	r0, [pc, #212]	; (8001220 <wyswietlacz+0x364>)
 800114c:	f001 ffee 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001150:	2201      	movs	r2, #1
 8001152:	2108      	movs	r1, #8
 8001154:	4832      	ldr	r0, [pc, #200]	; (8001220 <wyswietlacz+0x364>)
 8001156:	f001 ffe9 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 800115a:	2201      	movs	r2, #1
 800115c:	2102      	movs	r1, #2
 800115e:	4830      	ldr	r0, [pc, #192]	; (8001220 <wyswietlacz+0x364>)
 8001160:	f001 ffe4 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_SET) ;
 8001164:	2201      	movs	r2, #1
 8001166:	2104      	movs	r1, #4
 8001168:	482d      	ldr	r0, [pc, #180]	; (8001220 <wyswietlacz+0x364>)
 800116a:	f001 ffdf 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 800116e:	2201      	movs	r2, #1
 8001170:	2120      	movs	r1, #32
 8001172:	482b      	ldr	r0, [pc, #172]	; (8001220 <wyswietlacz+0x364>)
 8001174:	f001 ffda 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 8001178:	2201      	movs	r2, #1
 800117a:	2101      	movs	r1, #1
 800117c:	4828      	ldr	r0, [pc, #160]	; (8001220 <wyswietlacz+0x364>)
 800117e:	f001 ffd5 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 8001182:	e023      	b.n	80011cc <wyswietlacz+0x310>
  	 case (9):
  		  HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,GPIO_PIN_SET) ;
 8001184:	2201      	movs	r2, #1
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	4825      	ldr	r0, [pc, #148]	; (8001220 <wyswietlacz+0x364>)
 800118a:	f001 ffcf 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,GPIO_PIN_SET) ;
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <wyswietlacz+0x364>)
 8001194:	f001 ffca 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,GPIO_PIN_SET) ;
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	4820      	ldr	r0, [pc, #128]	; (8001220 <wyswietlacz+0x364>)
 800119e:	f001 ffc5 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,GPIO_PIN_SET) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	2102      	movs	r1, #2
 80011a6:	481e      	ldr	r0, [pc, #120]	; (8001220 <wyswietlacz+0x364>)
 80011a8:	f001 ffc0 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,GPIO_PIN_RESET) ;
 80011ac:	2200      	movs	r2, #0
 80011ae:	2104      	movs	r1, #4
 80011b0:	481b      	ldr	r0, [pc, #108]	; (8001220 <wyswietlacz+0x364>)
 80011b2:	f001 ffbb 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,GPIO_PIN_SET) ;
 80011b6:	2201      	movs	r2, #1
 80011b8:	2120      	movs	r1, #32
 80011ba:	4819      	ldr	r0, [pc, #100]	; (8001220 <wyswietlacz+0x364>)
 80011bc:	f001 ffb6 	bl	800312c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,GPIO_PIN_SET) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	2101      	movs	r1, #1
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <wyswietlacz+0x364>)
 80011c6:	f001 ffb1 	bl	800312c <HAL_GPIO_WritePin>
  		  break;
 80011ca:	bf00      	nop
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d872      	bhi.n	80012ba <wyswietlacz+0x3fe>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <wyswietlacz+0x320>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	08001225 	.word	0x08001225
 80011e4:	08001257 	.word	0x08001257
 80011e8:	08001289 	.word	0x08001289
	  }

  	 // obsługa portów
	 switch(port){
	 case (1):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_RESET) ;
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	480b      	ldr	r0, [pc, #44]	; (8001220 <wyswietlacz+0x364>)
 80011f4:	f001 ff9a 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_SET) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <wyswietlacz+0x364>)
 8001200:	f001 ff94 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_SET) ;
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <wyswietlacz+0x364>)
 800120c:	f001 ff8e 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_SET) ;
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <wyswietlacz+0x364>)
 8001218:	f001 ff88 	bl	800312c <HAL_GPIO_WritePin>
 		 break;
 800121c:	e04d      	b.n	80012ba <wyswietlacz+0x3fe>
 800121e:	bf00      	nop
 8001220:	40020800 	.word	0x40020800
	 case (2):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_SET) ;
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122a:	4826      	ldr	r0, [pc, #152]	; (80012c4 <wyswietlacz+0x408>)
 800122c:	f001 ff7e 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_RESET) ;
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <wyswietlacz+0x408>)
 8001238:	f001 ff78 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_SET) ;
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <wyswietlacz+0x408>)
 8001244:	f001 ff72 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_SET) ;
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	481d      	ldr	r0, [pc, #116]	; (80012c4 <wyswietlacz+0x408>)
 8001250:	f001 ff6c 	bl	800312c <HAL_GPIO_WritePin>
 		 break;
 8001254:	e031      	b.n	80012ba <wyswietlacz+0x3fe>
	 case (3):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_SET) ;
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <wyswietlacz+0x408>)
 800125e:	f001 ff65 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_SET) ;
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001268:	4816      	ldr	r0, [pc, #88]	; (80012c4 <wyswietlacz+0x408>)
 800126a:	f001 ff5f 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_RESET) ;
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <wyswietlacz+0x408>)
 8001276:	f001 ff59 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_SET) ;
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <wyswietlacz+0x408>)
 8001282:	f001 ff53 	bl	800312c <HAL_GPIO_WritePin>
 		 break;
 8001286:	e018      	b.n	80012ba <wyswietlacz+0x3fe>
	 case (4):
  		 HAL_GPIO_WritePin(COM1_GPIO_Port,COM1_Pin,GPIO_PIN_SET) ;
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <wyswietlacz+0x408>)
 8001290:	f001 ff4c 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM2_GPIO_Port,COM2_Pin,GPIO_PIN_SET) ;
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	480a      	ldr	r0, [pc, #40]	; (80012c4 <wyswietlacz+0x408>)
 800129c:	f001 ff46 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM3_GPIO_Port,COM3_Pin,GPIO_PIN_SET) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <wyswietlacz+0x408>)
 80012a8:	f001 ff40 	bl	800312c <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(COM4_GPIO_Port,COM4_Pin,GPIO_PIN_RESET) ;
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <wyswietlacz+0x408>)
 80012b4:	f001 ff3a 	bl	800312c <HAL_GPIO_WritePin>
 		 break;
 80012b8:	bf00      	nop
	 }



   }
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020800 	.word	0x40020800

080012c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <MX_GPIO_Init+0x138>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a46      	ldr	r2, [pc, #280]	; (8001400 <MX_GPIO_Init+0x138>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <MX_GPIO_Init+0x138>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <MX_GPIO_Init+0x138>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a3f      	ldr	r2, [pc, #252]	; (8001400 <MX_GPIO_Init+0x138>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <MX_GPIO_Init+0x138>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <MX_GPIO_Init+0x138>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a38      	ldr	r2, [pc, #224]	; (8001400 <MX_GPIO_Init+0x138>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <MX_GPIO_Init+0x138>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <MX_GPIO_Init+0x138>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a31      	ldr	r2, [pc, #196]	; (8001400 <MX_GPIO_Init+0x138>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <MX_GPIO_Init+0x138>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_Pin|D_Pin|E_Pin|C_Pin
 800134e:	2200      	movs	r2, #0
 8001350:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001354:	482b      	ldr	r0, [pc, #172]	; (8001404 <MX_GPIO_Init+0x13c>)
 8001356:	f001 fee9 	bl	800312c <HAL_GPIO_WritePin>
                          |B_Pin|F_Pin|A_Pin|DP_Pin
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001360:	4829      	ldr	r0, [pc, #164]	; (8001408 <MX_GPIO_Init+0x140>)
 8001362:	f001 fee3 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <MX_GPIO_Init+0x13c>)
 800137e:	f001 fd51 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = G_Pin|D_Pin|E_Pin|C_Pin
 8001382:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001386:	617b      	str	r3, [r7, #20]
                          |B_Pin|F_Pin|A_Pin|DP_Pin
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <MX_GPIO_Init+0x13c>)
 800139c:	f001 fd42 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 80013a0:	2321      	movs	r3, #33	; 0x21
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4814      	ldr	r0, [pc, #80]	; (8001408 <MX_GPIO_Init+0x140>)
 80013b6:	f001 fd35 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80013ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_GPIO_Init+0x140>)
 80013d4:	f001 fd26 	bl	8002e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2006      	movs	r0, #6
 80013de:	f001 f97a 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013e2:	2006      	movs	r0, #6
 80013e4:	f001 f993 	bl	800270e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2017      	movs	r0, #23
 80013ee:	f001 f972 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013f2:	2017      	movs	r0, #23
 80013f4:	f001 f98b 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020400 	.word	0x40020400

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f000 fc1c 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f820 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f7ff ff56 	bl	80012c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fb7a 	bl	8001b14 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001420:	f000 f974 	bl	800170c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001424:	f7ff fc42 	bl	8000cac <MX_ADC1_Init>
  MX_DMA_Init();
 8001428:	f7ff fd28 	bl	8000e7c <MX_DMA_Init>
  MX_TIM2_Init();
 800142c:	f000 f9be 	bl	80017ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <main+0x3c>)
 8001432:	f002 fb71 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDMABuff, 3);
 8001436:	2203      	movs	r2, #3
 8001438:	4904      	ldr	r1, [pc, #16]	; (800144c <main+0x40>)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <main+0x44>)
 800143c:	f000 fcbc 	bl	8001db8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <main+0x48>)
 8001442:	f002 fb69 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001446:	e7fe      	b.n	8001446 <main+0x3a>
 8001448:	200000f4 	.word	0x200000f4
 800144c:	200000e4 	.word	0x200000e4
 8001450:	20000034 	.word	0x20000034
 8001454:	2000013c 	.word	0x2000013c

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2230      	movs	r2, #48	; 0x30
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f986 	bl	8004778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <SystemClock_Config+0xc8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a26      	ldr	r2, [pc, #152]	; (8001520 <SystemClock_Config+0xc8>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <SystemClock_Config+0xc8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <SystemClock_Config+0xcc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a20      	ldr	r2, [pc, #128]	; (8001524 <SystemClock_Config+0xcc>)
 80014a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <SystemClock_Config+0xcc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014c8:	2308      	movs	r3, #8
 80014ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014cc:	2364      	movs	r3, #100	; 0x64
 80014ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014d4:	2304      	movs	r3, #4
 80014d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 fe57 	bl	8003190 <HAL_RCC_OscConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014e8:	f000 f87a 	bl	80015e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ec:	230f      	movs	r3, #15
 80014ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f0:	2302      	movs	r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2103      	movs	r1, #3
 8001508:	4618      	mov	r0, r3
 800150a:	f002 f8b9 	bl	8003680 <HAL_RCC_ClockConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001514:	f000 f864 	bl	80015e0 <Error_Handler>
  }
}
 8001518:	bf00      	nop
 800151a:	3750      	adds	r7, #80	; 0x50
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000

08001528 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
extern uint32_t fotorezystor;
extern uint32_t temperatura;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
//	uint32_t result3;

	fotorezystor = (uint16_t)(3.3 * (double)ADCDMABuff[0] / 4.095);    // [mV]
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ff91 	bl	800045c <__aeabi_ui2d>
 800153a:	a321      	add	r3, pc, #132	; (adr r3, 80015c0 <HAL_ADC_ConvCpltCallback+0x98>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f806 	bl	8000550 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	a31e      	add	r3, pc, #120	; (adr r3, 80015c8 <HAL_ADC_ConvCpltCallback+0xa0>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f927 	bl	80007a4 <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fa09 	bl	8000974 <__aeabi_d2uiz>
 8001562:	4603      	mov	r3, r0
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_ADC_ConvCpltCallback+0xac>)
 800156a:	601a      	str	r2, [r3, #0]
	temperatura = ((uint16_t)(3.3 * (double)ADCDMABuff[1] / 4.095) - 500) / 10;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800156e:	885b      	ldrh	r3, [r3, #2]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff73 	bl	800045c <__aeabi_ui2d>
 8001576:	a312      	add	r3, pc, #72	; (adr r3, 80015c0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7fe ffe8 	bl	8000550 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	a30f      	add	r3, pc, #60	; (adr r3, 80015c8 <HAL_ADC_ConvCpltCallback+0xa0>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f909 	bl	80007a4 <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff f9eb 	bl	8000974 <__aeabi_d2uiz>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_ADC_ConvCpltCallback+0xb0>)
 80015a8:	fb82 1203 	smull	r1, r2, r2, r3
 80015ac:	1092      	asrs	r2, r2, #2
 80015ae:	17db      	asrs	r3, r3, #31
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_ADC_ConvCpltCallback+0xb4>)
 80015b6:	601a      	str	r2, [r3, #0]

//	uint8_t size;
//	size = sprintf(txData, "%d[mV]\t%d[C]\t%d[mV]\r\n", ADCRes, result2, result3);
//
//	HAL_UART_Transmit_DMA(&huart2, txData, size);
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	66666666 	.word	0x66666666
 80015c4:	400a6666 	.word	0x400a6666
 80015c8:	ae147ae1 	.word	0xae147ae1
 80015cc:	40106147 	.word	0x40106147
 80015d0:	200000e4 	.word	0x200000e4
 80015d4:	2000007c 	.word	0x2000007c
 80015d8:	66666667 	.word	0x66666667
 80015dc:	200000e0 	.word	0x200000e0

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_MspInit+0x4c>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_MspInit+0x4c>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800162a:	2007      	movs	r0, #7
 800162c:	f001 f848 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 fb32 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(G_Pin);
 8001694:	2001      	movs	r0, #1
 8001696:	f001 fd63 	bl	8003160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(F_Pin);
 80016a2:	2020      	movs	r0, #32
 80016a4:	f001 fd5c 	bl	8003160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016b2:	f002 fa93 	bl	8003bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000f4 	.word	0x200000f4

080016c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <TIM2_IRQHandler+0x10>)
 80016c6:	f002 fa89 	bl	8003bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000013c 	.word	0x2000013c

080016d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA2_Stream0_IRQHandler+0x10>)
 80016da:	f001 f939 	bl	8002950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000080 	.word	0x20000080

080016e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM1_Init+0x98>)
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <MX_TIM1_Init+0x9c>)
 800172c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001734:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_TIM1_Init+0x98>)
 800173e:	2263      	movs	r2, #99	; 0x63
 8001740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_TIM1_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001756:	f002 f98f 	bl	8003a78 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001760:	f7ff ff3e 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001772:	f002 fb3b 	bl	8003dec <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800177c:	f7ff ff30 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_TIM1_Init+0x98>)
 800178e:	f002 fd37 	bl	8004200 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001798:	f7ff ff22 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200000f4 	.word	0x200000f4
 80017a8:	40010000 	.word	0x40010000

080017ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <MX_TIM2_Init+0x94>)
 80017ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_TIM2_Init+0x94>)
 80017d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_TIM2_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_TIM2_Init+0x94>)
 80017e0:	2263      	movs	r2, #99	; 0x63
 80017e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_TIM2_Init+0x94>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_TIM2_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <MX_TIM2_Init+0x94>)
 80017f2:	f002 f941 	bl	8003a78 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017fc:	f7ff fef0 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_TIM2_Init+0x94>)
 800180e:	f002 faed 	bl	8003dec <HAL_TIM_ConfigClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001818:	f7ff fee2 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800181c:	2320      	movs	r3, #32
 800181e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_TIM2_Init+0x94>)
 800182a:	f002 fce9 	bl	8004200 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001834:	f7ff fed4 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000013c 	.word	0x2000013c

08001844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <HAL_TIM_Base_MspInit+0x80>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d116      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_TIM_Base_MspInit+0x84>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_TIM_Base_MspInit+0x84>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_TIM_Base_MspInit+0x84>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2019      	movs	r0, #25
 8001878:	f000 ff2d 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800187c:	2019      	movs	r0, #25
 800187e:	f000 ff46 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001882:	e01a      	b.n	80018ba <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d115      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_TIM_Base_MspInit+0x84>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <HAL_TIM_Base_MspInit+0x84>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_TIM_Base_MspInit+0x84>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	201c      	movs	r0, #28
 80018b0:	f000 ff11 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b4:	201c      	movs	r0, #28
 80018b6:	f000 ff2a 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_GPIO_EXTI_Callback>:
uint32_t jednosci;
extern uint32_t fotorezystor;
extern uint32_t temperatura;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == S1_Pin){
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <HAL_GPIO_EXTI_Callback+0x16>
			cnt = 0;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_GPIO_EXTI_Callback+0x30>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == S2_Pin){
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d102      	bne.n	80018ee <HAL_GPIO_EXTI_Callback+0x22>
			cnt = 1;
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_GPIO_EXTI_Callback+0x30>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
	}
	}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

	if(htim == &htim1){
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a75      	ldr	r2, [pc, #468]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	f040 80e3 	bne.w	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1d8>

		  tysiace = (double)(fotorezystor/1000);
 8001912:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a74      	ldr	r2, [pc, #464]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fd9c 	bl	800045c <__aeabi_ui2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f822 	bl	8000974 <__aeabi_d2uiz>
 8001930:	4603      	mov	r3, r0
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001934:	6013      	str	r3, [r2, #0]
		  setki  = (double)(fotorezystor/100 - tysiace*10);
 8001936:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6d      	ldr	r2, [pc, #436]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	0959      	lsrs	r1, r3, #5
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	1acb      	subs	r3, r1, r3
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd83 	bl	800045c <__aeabi_ui2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f809 	bl	8000974 <__aeabi_d2uiz>
 8001962:	4603      	mov	r3, r0
 8001964:	4a63      	ldr	r2, [pc, #396]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001966:	6013      	str	r3, [r2, #0]
		  dziesiatki = (double)(fotorezystor/10 - tysiace*100 - setki*10);
 8001968:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a62      	ldr	r2, [pc, #392]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2164      	movs	r1, #100	; 0x64
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	1ad1      	subs	r1, r2, r3
 8001980:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	1acb      	subs	r3, r1, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd64 	bl	800045c <__aeabi_ui2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7fe ffea 	bl	8000974 <__aeabi_d2uiz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019a4:	6013      	str	r3, [r2, #0]
		  jednosci = fotorezystor%10;
 80019a6:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80019ac:	fba3 2301 	umull	r2, r3, r3, r1
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	1aca      	subs	r2, r1, r3
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80019be:	601a      	str	r2, [r3, #0]

		  if (cnt == 0){
 80019c0:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d145      	bne.n	8001a54 <HAL_TIM_PeriodElapsedCallback+0x154>
			 czas_wyswietlacz_1 ++;
 80019c8:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80019d0:	6013      	str	r3, [r2, #0]
			 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2140      	movs	r1, #64	; 0x40
 80019d6:	484d      	ldr	r0, [pc, #308]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80019d8:	f001 fba8 	bl	800312c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	484a      	ldr	r0, [pc, #296]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80019e2:	f001 fba3 	bl	800312c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ec:	4847      	ldr	r0, [pc, #284]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80019ee:	f001 fb9d 	bl	800312c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET) ;
 80019f2:	2201      	movs	r2, #1
 80019f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f8:	4844      	ldr	r0, [pc, #272]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80019fa:	f001 fb97 	bl	800312c <HAL_GPIO_WritePin>
			 if(czas_wyswietlacz_1 == 1){
 80019fe:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x112>
				 wyswietlacz(tysiace, 1);
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fa55 	bl	8000ebc <wyswietlacz>
			 }
			 if(czas_wyswietlacz_1 == 2){
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d105      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x126>
				 wyswietlacz(setki, 2);
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fa4b 	bl	8000ebc <wyswietlacz>
			 }
			 if(czas_wyswietlacz_1 == 3){
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d105      	bne.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x13a>
				 wyswietlacz(dziesiatki, 3);
 8001a2e:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2103      	movs	r1, #3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa41 	bl	8000ebc <wyswietlacz>
			 }
			 if(czas_wyswietlacz_1 == 4){
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d108      	bne.n	8001a54 <HAL_TIM_PeriodElapsedCallback+0x154>
				 wyswietlacz(jednosci, 4);
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2104      	movs	r1, #4
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fa37 	bl	8000ebc <wyswietlacz>
				 czas_wyswietlacz_1 = 0;
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
			 }
		  }

		  if (cnt == 1){
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d13d      	bne.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			 czas_wyswietlacz_2 ++;
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a64:	6013      	str	r3, [r2, #0]
			 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2140      	movs	r1, #64	; 0x40
 8001a6a:	4828      	ldr	r0, [pc, #160]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a6c:	f001 fb5e 	bl	800312c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	4825      	ldr	r0, [pc, #148]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a76:	f001 fb59 	bl	800312c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET) ;
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a80:	4822      	ldr	r0, [pc, #136]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a82:	f001 fb53 	bl	800312c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET) ;
 8001a86:	2200      	movs	r2, #0
 8001a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8c:	481f      	ldr	r0, [pc, #124]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a8e:	f001 fb4d 	bl	800312c <HAL_GPIO_WritePin>
			 if(czas_wyswietlacz_2 == 1){
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d103      	bne.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x1a2>
				 wyswietlacz(2, 1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f7ff fa0d 	bl	8000ebc <wyswietlacz>
			 }
			 if(czas_wyswietlacz_2 == 2){
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d103      	bne.n	8001ab2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
				 wyswietlacz(2, 2);
 8001aaa:	2102      	movs	r1, #2
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7ff fa05 	bl	8000ebc <wyswietlacz>
			 }
			 if(czas_wyswietlacz_2 == 3){
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d103      	bne.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x1c2>
				 wyswietlacz(2, 3);
 8001aba:	2103      	movs	r1, #3
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7ff f9fd 	bl	8000ebc <wyswietlacz>
			 }
			 if(czas_wyswietlacz_2 == 4){
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d106      	bne.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				 wyswietlacz(2, 4);
 8001aca:	2104      	movs	r1, #4
 8001acc:	2002      	movs	r0, #2
 8001ace:	f7ff f9f5 	bl	8000ebc <wyswietlacz>
				 czas_wyswietlacz_2 = 0;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

		  }
	}


}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200000f4 	.word	0x200000f4
 8001ae4:	2000007c 	.word	0x2000007c
 8001ae8:	10624dd3 	.word	0x10624dd3
 8001aec:	200000f0 	.word	0x200000f0
 8001af0:	51eb851f 	.word	0x51eb851f
 8001af4:	200000ec 	.word	0x200000ec
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	20000188 	.word	0x20000188
 8001b00:	20000184 	.word	0x20000184
 8001b04:	20000004 	.word	0x20000004
 8001b08:	2000002c 	.word	0x2000002c
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	20000030 	.word	0x20000030

08001b14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_USART2_UART_Init+0x50>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	f002 fbda 	bl	8004304 <HAL_UART_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b56:	f7ff fd43 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000018c 	.word	0x2000018c
 8001b64:	40004400 	.word	0x40004400

08001b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_UART_MspInit+0x84>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d12b      	bne.n	8001be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_UART_MspInit+0x8c>)
 8001bde:	f001 f921 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40004400 	.word	0x40004400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bfe:	490e      	ldr	r1, [pc, #56]	; (8001c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c00:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c14:	4c0b      	ldr	r4, [pc, #44]	; (8001c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c22:	f7ff fd61 	bl	80016e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f002 fd83 	bl	8004730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2a:	f7ff fbef 	bl	800140c <main>
  bx  lr    
 8001c2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c3c:	080047d0 	.word	0x080047d0
  ldr r2, =_sbss
 8001c40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c44:	200001d4 	.word	0x200001d4

08001c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_Init+0x40>)
 8001c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_Init+0x40>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x40>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 fd23 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7ff fcb4 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fd3b 	bl	800272a <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f000 fd03 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	200001d0 	.word	0x200001d0

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	200001d0 	.word	0x200001d0

08001d30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e033      	b.n	8001dae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff f81c 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d76:	f023 0302 	bic.w	r3, r3, #2
 8001d7a:	f043 0202 	orr.w	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fa4e 	bl	8002224 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d9e:	e001      	b.n	8001da4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Start_DMA+0x1e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e0ce      	b.n	8001f74 <HAL_ADC_Start_DMA+0x1bc>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d018      	beq.n	8001e1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_ADC_Start_DMA+0x1c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5f      	ldr	r2, [pc, #380]	; (8001f80 <HAL_ADC_Start_DMA+0x1c8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9a      	lsrs	r2, r3, #18
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2c:	d107      	bne.n	8001e3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 8086 	bne.w	8001f5a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d106      	bne.n	8001e9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f023 0206 	bic.w	r2, r3, #6
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
 8001e9a:	e002      	b.n	8001ea2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_ADC_Start_DMA+0x1cc>)
 8001eac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	4a35      	ldr	r2, [pc, #212]	; (8001f88 <HAL_ADC_Start_DMA+0x1d0>)
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_ADC_Start_DMA+0x1d4>)
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_ADC_Start_DMA+0x1d8>)
 8001ec4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ece:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ede:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	334c      	adds	r3, #76	; 0x4c
 8001efa:	4619      	mov	r1, r3
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f000 fcce 	bl	80028a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d129      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	e020      	b.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HAL_ADC_Start_DMA+0x1dc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11b      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d114      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e00b      	b.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f043 0210 	orr.w	r2, r3, #16
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	40012300 	.word	0x40012300
 8001f88:	0800241d 	.word	0x0800241d
 8001f8c:	080024d7 	.word	0x080024d7
 8001f90:	080024f3 	.word	0x080024f3
 8001f94:	40012000 	.word	0x40012000

08001f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1c>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e113      	b.n	8002204 <HAL_ADC_ConfigChannel+0x244>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d925      	bls.n	8002038 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	2207      	movs	r2, #7
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43da      	mvns	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	400a      	ands	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	4603      	mov	r3, r0
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4403      	add	r3, r0
 800202a:	3b1e      	subs	r3, #30
 800202c:	409a      	lsls	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	e022      	b.n	800207e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	2207      	movs	r2, #7
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	4603      	mov	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4403      	add	r3, r0
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b06      	cmp	r3, #6
 8002084:	d824      	bhi.n	80020d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b05      	subs	r3, #5
 8002098:	221f      	movs	r2, #31
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	400a      	ands	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b05      	subs	r3, #5
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
 80020ce:	e04c      	b.n	800216a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	d824      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b23      	subs	r3, #35	; 0x23
 80020ea:	221f      	movs	r2, #31
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43da      	mvns	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	400a      	ands	r2, r1
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b23      	subs	r3, #35	; 0x23
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
 8002120:	e023      	b.n	800216a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b41      	subs	r3, #65	; 0x41
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b41      	subs	r3, #65	; 0x41
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_ADC_ConfigChannel+0x250>)
 800216c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a28      	ldr	r2, [pc, #160]	; (8002214 <HAL_ADC_ConfigChannel+0x254>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d10f      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1d8>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d10b      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_ADC_ConfigChannel+0x254>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d12b      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x23a>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_ADC_ConfigChannel+0x258>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <HAL_ADC_ConfigChannel+0x1f4>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b11      	cmp	r3, #17
 80021b2:	d122      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_ADC_ConfigChannel+0x258>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_ADC_ConfigChannel+0x25c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a11      	ldr	r2, [pc, #68]	; (8002220 <HAL_ADC_ConfigChannel+0x260>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0c9a      	lsrs	r2, r3, #18
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f9      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40012300 	.word	0x40012300
 8002214:	40012000 	.word	0x40012000
 8002218:	10000012 	.word	0x10000012
 800221c:	20000000 	.word	0x20000000
 8002220:	431bde83 	.word	0x431bde83

08002224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <ADC_Init+0x1f0>)
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800227c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	4a58      	ldr	r2, [pc, #352]	; (8002418 <ADC_Init+0x1f4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	e00f      	b.n	8002322 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002320:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0202 	bic.w	r2, r2, #2
 8002330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e1b      	ldrb	r3, [r3, #24]
 800233c:	005a      	lsls	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800236e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	3b01      	subs	r3, #1
 800237c:	035a      	lsls	r2, r3, #13
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	e007      	b.n	8002398 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002396:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	051a      	lsls	r2, r3, #20
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023da:	025a      	lsls	r2, r3, #9
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	029a      	lsls	r2, r3, #10
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40012300 	.word	0x40012300
 8002418:	0f000001 	.word	0x0f000001

0800241c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002432:	2b00      	cmp	r3, #0
 8002434:	d13c      	bne.n	80024b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d12b      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d127      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002470:	2b00      	cmp	r3, #0
 8002472:	d119      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0220 	bic.w	r2, r2, #32
 8002482:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff f83d 	bl	8001528 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024ae:	e00e      	b.n	80024ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff fd75 	bl	8001fac <HAL_ADC_ErrorCallback>
}
 80024c2:	e004      	b.n	80024ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fd57 	bl	8001f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fd4a 	bl	8001fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff fae2 	bl	8001d18 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e099      	b.n	8002894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002780:	e00f      	b.n	80027a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002782:	f7ff fac9 	bl	8001d18 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b05      	cmp	r3, #5
 800278e:	d908      	bls.n	80027a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e078      	b.n	8002894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e8      	bne.n	8002782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_DMA_Init+0x158>)
 80027bc:	4013      	ands	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d107      	bne.n	800280c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	4313      	orrs	r3, r2
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b04      	cmp	r3, #4
 8002834:	d117      	bne.n	8002866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fa6f 	bl	8002d2c <DMA_CheckFifoParam>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2240      	movs	r2, #64	; 0x40
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002862:	2301      	movs	r3, #1
 8002864:	e016      	b.n	8002894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa26 	bl	8002cc0 <DMA_CalcBaseAndBitshift>
 8002874:	4603      	mov	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	223f      	movs	r2, #63	; 0x3f
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	f010803f 	.word	0xf010803f

080028a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Start_IT+0x26>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e040      	b.n	8002948 <HAL_DMA_Start_IT+0xa8>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12f      	bne.n	800293a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9b8 	bl	8002c64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0216 	orr.w	r2, r2, #22
 800290e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e005      	b.n	8002946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800295c:	4b92      	ldr	r3, [pc, #584]	; (8002ba8 <HAL_DMA_IRQHandler+0x258>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a92      	ldr	r2, [pc, #584]	; (8002bac <HAL_DMA_IRQHandler+0x25c>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2208      	movs	r2, #8
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01a      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2208      	movs	r2, #8
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	2204      	movs	r2, #4
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	2204      	movs	r2, #4
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d043      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03c      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d024      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e01f      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e016      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0208 	bic.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 808e 	beq.w	8002bee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8086 	beq.w	8002bee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d136      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0216 	bic.w	r2, r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x1da>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	223f      	movs	r2, #63	; 0x3f
 8002b40:	409a      	lsls	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d07d      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
        }
        return;
 8002b66:	e078      	b.n	8002c5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01c      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d108      	bne.n	8002b96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d030      	beq.n	8002bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e02b      	b.n	8002bee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d027      	beq.n	8002bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
 8002ba6:	e022      	b.n	8002bee <HAL_DMA_IRQHandler+0x29e>
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0210 	bic.w	r2, r2, #16
 8002bcc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d032      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d022      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2205      	movs	r2, #5
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d307      	bcc.n	8002c36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f2      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x2ca>
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c36:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
 8002c58:	e000      	b.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c5a:	bf00      	nop
    }
  }
}
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop

08002c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d108      	bne.n	8002ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ca2:	e007      	b.n	8002cb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3b10      	subs	r3, #16
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <DMA_CalcBaseAndBitshift+0x68>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d909      	bls.n	8002d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8002d00:	e007      	b.n	8002d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	aaaaaaab 	.word	0xaaaaaaab
 8002d28:	080047b8 	.word	0x080047b8

08002d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11f      	bne.n	8002d86 <DMA_CheckFifoParam+0x5a>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d856      	bhi.n	8002dfa <DMA_CheckFifoParam+0xce>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <DMA_CheckFifoParam+0x28>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d77 	.word	0x08002d77
 8002d5c:	08002d65 	.word	0x08002d65
 8002d60:	08002dfb 	.word	0x08002dfb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d046      	beq.n	8002dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d74:	e043      	b.n	8002dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d7e:	d140      	bne.n	8002e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d84:	e03d      	b.n	8002e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	d121      	bne.n	8002dd4 <DMA_CheckFifoParam+0xa8>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d837      	bhi.n	8002e06 <DMA_CheckFifoParam+0xda>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <DMA_CheckFifoParam+0x70>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db3 	.word	0x08002db3
 8002da4:	08002dad 	.word	0x08002dad
 8002da8:	08002dc5 	.word	0x08002dc5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e030      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d025      	beq.n	8002e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e022      	b.n	8002e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dcc:	d11f      	bne.n	8002e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd2:	e01c      	b.n	8002e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d903      	bls.n	8002de2 <DMA_CheckFifoParam+0xb6>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d003      	beq.n	8002de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de0:	e018      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      break;
 8002de6:	e015      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00e      	beq.n	8002e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	e00b      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e00a      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e008      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e006      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e004      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
    }
  } 
  
  return status; 
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e159      	b.n	80030f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 8148 	bne.w	80030ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d005      	beq.n	8002e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d130      	bne.n	8002ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eac:	2201      	movs	r2, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 0201 	and.w	r2, r3, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d017      	beq.n	8002f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d123      	bne.n	8002f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0203 	and.w	r2, r3, #3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80a2 	beq.w	80030ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b57      	ldr	r3, [pc, #348]	; (800310c <HAL_GPIO_Init+0x2e8>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a56      	ldr	r2, [pc, #344]	; (800310c <HAL_GPIO_Init+0x2e8>)
 8002fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b54      	ldr	r3, [pc, #336]	; (800310c <HAL_GPIO_Init+0x2e8>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc6:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_GPIO_Init+0x2ec>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a49      	ldr	r2, [pc, #292]	; (8003114 <HAL_GPIO_Init+0x2f0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d019      	beq.n	8003026 <HAL_GPIO_Init+0x202>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a48      	ldr	r2, [pc, #288]	; (8003118 <HAL_GPIO_Init+0x2f4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_GPIO_Init+0x1fe>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a47      	ldr	r2, [pc, #284]	; (800311c <HAL_GPIO_Init+0x2f8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00d      	beq.n	800301e <HAL_GPIO_Init+0x1fa>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a46      	ldr	r2, [pc, #280]	; (8003120 <HAL_GPIO_Init+0x2fc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <HAL_GPIO_Init+0x1f6>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a45      	ldr	r2, [pc, #276]	; (8003124 <HAL_GPIO_Init+0x300>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_GPIO_Init+0x1f2>
 8003012:	2304      	movs	r3, #4
 8003014:	e008      	b.n	8003028 <HAL_GPIO_Init+0x204>
 8003016:	2307      	movs	r3, #7
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x204>
 800301a:	2303      	movs	r3, #3
 800301c:	e004      	b.n	8003028 <HAL_GPIO_Init+0x204>
 800301e:	2302      	movs	r3, #2
 8003020:	e002      	b.n	8003028 <HAL_GPIO_Init+0x204>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_GPIO_Init+0x204>
 8003026:	2300      	movs	r3, #0
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f002 0203 	and.w	r2, r2, #3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4093      	lsls	r3, r2
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003038:	4935      	ldr	r1, [pc, #212]	; (8003110 <HAL_GPIO_Init+0x2ec>)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3302      	adds	r3, #2
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_GPIO_Init+0x304>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800306a:	4a2f      	ldr	r2, [pc, #188]	; (8003128 <HAL_GPIO_Init+0x304>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_GPIO_Init+0x304>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003094:	4a24      	ldr	r2, [pc, #144]	; (8003128 <HAL_GPIO_Init+0x304>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_GPIO_Init+0x304>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_GPIO_Init+0x304>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_GPIO_Init+0x304>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_GPIO_Init+0x304>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b0f      	cmp	r3, #15
 80030f8:	f67f aea2 	bls.w	8002e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	40013800 	.word	0x40013800
 8003114:	40020000 	.word	0x40020000
 8003118:	40020400 	.word	0x40020400
 800311c:	40020800 	.word	0x40020800
 8003120:	40020c00 	.word	0x40020c00
 8003124:	40021000 	.word	0x40021000
 8003128:	40013c00 	.word	0x40013c00

0800312c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
 8003138:	4613      	mov	r3, r2
 800313a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800313c:	787b      	ldrb	r3, [r7, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003148:	e003      	b.n	8003152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	041a      	lsls	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	619a      	str	r2, [r3, #24]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fba4 	bl	80018cc <HAL_GPIO_EXTI_Callback>
  }
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40013c00 	.word	0x40013c00

08003190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e264      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d075      	beq.n	800329a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ae:	4ba3      	ldr	r3, [pc, #652]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d00c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ba:	4ba0      	ldr	r3, [pc, #640]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d112      	bne.n	80031ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c6:	4b9d      	ldr	r3, [pc, #628]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d2:	d10b      	bne.n	80031ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	4b99      	ldr	r3, [pc, #612]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05b      	beq.n	8003298 <HAL_RCC_OscConfig+0x108>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d157      	bne.n	8003298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e23f      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d106      	bne.n	8003204 <HAL_RCC_OscConfig+0x74>
 80031f6:	4b91      	ldr	r3, [pc, #580]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a90      	ldr	r2, [pc, #576]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0xb0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x98>
 800320e:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a8a      	ldr	r2, [pc, #552]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a87      	ldr	r2, [pc, #540]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0xb0>
 8003228:	4b84      	ldr	r3, [pc, #528]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a83      	ldr	r2, [pc, #524]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b81      	ldr	r3, [pc, #516]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a80      	ldr	r2, [pc, #512]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe fd66 	bl	8001d18 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe fd62 	bl	8001d18 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e204      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0xc0>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fd52 	bl	8001d18 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003278:	f7fe fd4e 	bl	8001d18 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1f0      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0xe8>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a6:	4b65      	ldr	r3, [pc, #404]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b2:	4b62      	ldr	r3, [pc, #392]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d11c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b5f      	ldr	r3, [pc, #380]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	4b5c      	ldr	r3, [pc, #368]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x152>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1c4      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b56      	ldr	r3, [pc, #344]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4952      	ldr	r1, [pc, #328]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	e03a      	b.n	800336e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_RCC_OscConfig+0x2b0>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7fe fd07 	bl	8001d18 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330e:	f7fe fd03 	bl	8001d18 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1a5      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b43      	ldr	r3, [pc, #268]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4940      	ldr	r1, [pc, #256]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCC_OscConfig+0x2b0>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fce6 	bl	8001d18 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003350:	f7fe fce2 	bl	8001d18 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e184      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d030      	beq.n	80033dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b30      	ldr	r3, [pc, #192]	; (8003444 <HAL_RCC_OscConfig+0x2b4>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe fcc6 	bl	8001d18 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003390:	f7fe fcc2 	bl	8001d18 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e164      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x200>
 80033ae:	e015      	b.n	80033dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x2b4>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fcaf 	bl	8001d18 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033be:	f7fe fcab 	bl	8001d18 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e14d      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80a0 	beq.w	800352a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x2b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d121      	bne.n	800346a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCC_OscConfig+0x2b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <HAL_RCC_OscConfig+0x2b8>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003432:	f7fe fc71 	bl	8001d18 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	e011      	b.n	800345e <HAL_RCC_OscConfig+0x2ce>
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
 8003448:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe fc64 	bl	8001d18 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e106      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b85      	ldr	r3, [pc, #532]	; (8003674 <HAL_RCC_OscConfig+0x4e4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d106      	bne.n	8003480 <HAL_RCC_OscConfig+0x2f0>
 8003472:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a80      	ldr	r2, [pc, #512]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
 800347e:	e01c      	b.n	80034ba <HAL_RCC_OscConfig+0x32a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b05      	cmp	r3, #5
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x312>
 8003488:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
 8003494:	4b78      	ldr	r3, [pc, #480]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	e00b      	b.n	80034ba <HAL_RCC_OscConfig+0x32a>
 80034a2:	4b75      	ldr	r3, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a74      	ldr	r2, [pc, #464]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a71      	ldr	r2, [pc, #452]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d015      	beq.n	80034ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fe fc29 	bl	8001d18 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe fc25 	bl	8001d18 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0c5      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ee      	beq.n	80034ca <HAL_RCC_OscConfig+0x33a>
 80034ec:	e014      	b.n	8003518 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ee:	f7fe fc13 	bl	8001d18 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe fc0f 	bl	8001d18 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0af      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350c:	4b5a      	ldr	r3, [pc, #360]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ee      	bne.n	80034f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b56      	ldr	r3, [pc, #344]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 809b 	beq.w	800366a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003534:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d05c      	beq.n	80035fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d141      	bne.n	80035cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <HAL_RCC_OscConfig+0x4ec>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe fbe3 	bl	8001d18 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003556:	f7fe fbdf 	bl	8001d18 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e081      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003568:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	019b      	lsls	r3, r3, #6
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	3b01      	subs	r3, #1
 800358e:	041b      	lsls	r3, r3, #16
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	4937      	ldr	r1, [pc, #220]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCC_OscConfig+0x4ec>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fbb8 	bl	8001d18 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fbb4 	bl	8001d18 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e056      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x41c>
 80035ca:	e04e      	b.n	800366a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_OscConfig+0x4ec>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fe fba1 	bl	8001d18 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe fb9d 	bl	8001d18 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e03f      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x44a>
 80035f8:	e037      	b.n	800366a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e032      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d028      	beq.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d121      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d11a      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003636:	4013      	ands	r3, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363e:	4293      	cmp	r3, r2
 8003640:	d111      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d107      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40007000 	.word	0x40007000
 8003678:	40023800 	.word	0x40023800
 800367c:	42470060 	.word	0x42470060

08003680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0cc      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003694:	4b68      	ldr	r3, [pc, #416]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d90c      	bls.n	80036bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b8      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	494d      	ldr	r1, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d044      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d119      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d003      	beq.n	800373e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e06f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e067      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4934      	ldr	r1, [pc, #208]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fe fad2 	bl	8001d18 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe face 	bl	8001d18 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e04f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d20c      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e032      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4916      	ldr	r1, [pc, #88]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	490e      	ldr	r1, [pc, #56]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003806:	f000 f821 	bl	800384c <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	490a      	ldr	r1, [pc, #40]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	fa22 f303 	lsr.w	r3, r2, r3
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fa32 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023c00 	.word	0x40023c00
 800383c:	40023800 	.word	0x40023800
 8003840:	080047a0 	.word	0x080047a0
 8003844:	20000000 	.word	0x20000000
 8003848:	20000008 	.word	0x20000008

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	2300      	movs	r3, #0
 800385e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003864:	4b67      	ldr	r3, [pc, #412]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d00d      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x40>
 8003870:	2b08      	cmp	r3, #8
 8003872:	f200 80bd 	bhi.w	80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x34>
 800387a:	2b04      	cmp	r3, #4
 800387c:	d003      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x3a>
 800387e:	e0b7      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003882:	60bb      	str	r3, [r7, #8]
       break;
 8003884:	e0b7      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003886:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003888:	60bb      	str	r3, [r7, #8]
      break;
 800388a:	e0b4      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388c:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003894:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04d      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b58      	ldr	r3, [pc, #352]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	461a      	mov	r2, r3
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	ea02 0800 	and.w	r8, r2, r0
 80038ba:	ea03 0901 	and.w	r9, r3, r1
 80038be:	4640      	mov	r0, r8
 80038c0:	4649      	mov	r1, r9
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	014b      	lsls	r3, r1, #5
 80038cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038d0:	0142      	lsls	r2, r0, #5
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	ebb0 0008 	subs.w	r0, r0, r8
 80038da:	eb61 0109 	sbc.w	r1, r1, r9
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	018b      	lsls	r3, r1, #6
 80038e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038ec:	0182      	lsls	r2, r0, #6
 80038ee:	1a12      	subs	r2, r2, r0
 80038f0:	eb63 0301 	sbc.w	r3, r3, r1
 80038f4:	f04f 0000 	mov.w	r0, #0
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	00d9      	lsls	r1, r3, #3
 80038fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003902:	00d0      	lsls	r0, r2, #3
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	eb12 0208 	adds.w	r2, r2, r8
 800390c:	eb43 0309 	adc.w	r3, r3, r9
 8003910:	f04f 0000 	mov.w	r0, #0
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	0259      	lsls	r1, r3, #9
 800391a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800391e:	0250      	lsls	r0, r2, #9
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	f7fd f840 	bl	80009b4 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e04a      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	461a      	mov	r2, r3
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	ea02 0400 	and.w	r4, r2, r0
 8003956:	ea03 0501 	and.w	r5, r3, r1
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	014b      	lsls	r3, r1, #5
 8003968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800396c:	0142      	lsls	r2, r0, #5
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	1b00      	subs	r0, r0, r4
 8003974:	eb61 0105 	sbc.w	r1, r1, r5
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	018b      	lsls	r3, r1, #6
 8003982:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003986:	0182      	lsls	r2, r0, #6
 8003988:	1a12      	subs	r2, r2, r0
 800398a:	eb63 0301 	sbc.w	r3, r3, r1
 800398e:	f04f 0000 	mov.w	r0, #0
 8003992:	f04f 0100 	mov.w	r1, #0
 8003996:	00d9      	lsls	r1, r3, #3
 8003998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800399c:	00d0      	lsls	r0, r2, #3
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	1912      	adds	r2, r2, r4
 80039a4:	eb45 0303 	adc.w	r3, r5, r3
 80039a8:	f04f 0000 	mov.w	r0, #0
 80039ac:	f04f 0100 	mov.w	r1, #0
 80039b0:	0299      	lsls	r1, r3, #10
 80039b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039b6:	0290      	lsls	r0, r2, #10
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	f7fc fff4 	bl	80009b4 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	60bb      	str	r3, [r7, #8]
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039f2:	60bb      	str	r3, [r7, #8]
      break;
 80039f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f6:	68bb      	ldr	r3, [r7, #8]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	080047b0 	.word	0x080047b0

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a54:	f7ff ffdc 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0b5b      	lsrs	r3, r3, #13
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	080047b0 	.word	0x080047b0

08003a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e041      	b.n	8003b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fed0 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 fa88 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d001      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e044      	b.n	8003bba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x6c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d013      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x6c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <HAL_TIM_Base_Start_IT+0xb4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x6c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x6c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x6c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d111      	bne.n	8003ba8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d010      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e007      	b.n	8003bb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40014000 	.word	0x40014000

08003bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0202 	mvn.w	r2, #2
 8003c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9b5 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9a7 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f9b8 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0204 	mvn.w	r2, #4
 8003c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f98b 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f97d 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f98e 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0208 	mvn.w	r2, #8
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f961 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f953 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f964 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0210 	mvn.w	r2, #16
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f937 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f929 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f93a 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0201 	mvn.w	r2, #1
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd fdd0 	bl	8001900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d10e      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b80      	cmp	r3, #128	; 0x80
 8003d7a:	d107      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fab2 	bl	80042f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d10e      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d107      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8ff 	bl	8003fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d107      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0220 	mvn.w	r2, #32
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fa7c 	bl	80042dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e0b4      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x186>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e40:	d03e      	beq.n	8003ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e46:	f200 8087 	bhi.w	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	f000 8086 	beq.w	8003f5e <HAL_TIM_ConfigClockSource+0x172>
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	d87f      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d01a      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0xa6>
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d87b      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b60      	cmp	r3, #96	; 0x60
 8003e62:	d050      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x11a>
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d877      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b50      	cmp	r3, #80	; 0x50
 8003e6a:	d03c      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8003e6c:	2b50      	cmp	r3, #80	; 0x50
 8003e6e:	d873      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d058      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x13a>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d86f      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b30      	cmp	r3, #48	; 0x30
 8003e7a:	d064      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x15a>
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d86b      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d060      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x15a>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d867      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d05c      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x15a>
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d05a      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	e062      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6899      	ldr	r1, [r3, #8]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f000 f98d 	bl	80041c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	609a      	str	r2, [r3, #8]
      break;
 8003ebe:	e04f      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6899      	ldr	r1, [r3, #8]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f000 f976 	bl	80041c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee2:	609a      	str	r2, [r3, #8]
      break;
 8003ee4:	e03c      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f000 f8ea 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2150      	movs	r1, #80	; 0x50
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f943 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003f04:	e02c      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f000 f909 	bl	800412a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2160      	movs	r1, #96	; 0x60
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f933 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003f24:	e01c      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f000 f8ca 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2140      	movs	r1, #64	; 0x40
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f923 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003f44:	e00c      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f000 f91a 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003f56:	e003      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e000      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a34      	ldr	r2, [pc, #208]	; (80040b0 <TIM_Base_SetConfig+0xe4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00f      	beq.n	8004004 <TIM_Base_SetConfig+0x38>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d00b      	beq.n	8004004 <TIM_Base_SetConfig+0x38>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a31      	ldr	r2, [pc, #196]	; (80040b4 <TIM_Base_SetConfig+0xe8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d007      	beq.n	8004004 <TIM_Base_SetConfig+0x38>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a30      	ldr	r2, [pc, #192]	; (80040b8 <TIM_Base_SetConfig+0xec>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0x38>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <TIM_Base_SetConfig+0xf0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d108      	bne.n	8004016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <TIM_Base_SetConfig+0xe4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01b      	beq.n	8004056 <TIM_Base_SetConfig+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d017      	beq.n	8004056 <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <TIM_Base_SetConfig+0xe8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <TIM_Base_SetConfig+0x8a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a21      	ldr	r2, [pc, #132]	; (80040b8 <TIM_Base_SetConfig+0xec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00f      	beq.n	8004056 <TIM_Base_SetConfig+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a20      	ldr	r2, [pc, #128]	; (80040bc <TIM_Base_SetConfig+0xf0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1f      	ldr	r2, [pc, #124]	; (80040c0 <TIM_Base_SetConfig+0xf4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <TIM_Base_SetConfig+0xf8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <TIM_Base_SetConfig+0xfc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <TIM_Base_SetConfig+0xe4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	615a      	str	r2, [r3, #20]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800

080040cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 030a 	bic.w	r3, r3, #10
 8004108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800412a:	b480      	push	{r7}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0210 	bic.w	r2, r3, #16
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	031b      	lsls	r3, r3, #12
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f043 0307 	orr.w	r3, r3, #7
 80041ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004214:	2302      	movs	r3, #2
 8004216:	e050      	b.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d013      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a18      	ldr	r2, [pc, #96]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10c      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4313      	orrs	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000

080042dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e03f      	b.n	8004396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd fc1c 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f829 	bl	80043a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800437c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	b09f      	sub	sp, #124	; 0x7c
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	ea40 0301 	orr.w	r3, r0, r1
 80043c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e4:	f021 010c 	bic.w	r1, r1, #12
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ee:	430b      	orrs	r3, r1
 80043f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	6999      	ldr	r1, [r3, #24]
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	ea40 0301 	orr.w	r3, r0, r1
 8004408:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4bc5      	ldr	r3, [pc, #788]	; (8004724 <UART_SetConfig+0x384>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d004      	beq.n	800441e <UART_SetConfig+0x7e>
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4bc3      	ldr	r3, [pc, #780]	; (8004728 <UART_SetConfig+0x388>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d103      	bne.n	8004426 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800441e:	f7ff fb17 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8004422:	6778      	str	r0, [r7, #116]	; 0x74
 8004424:	e002      	b.n	800442c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004426:	f7ff faff 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 800442a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	f040 80b6 	bne.w	80045a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	461c      	mov	r4, r3
 800443c:	f04f 0500 	mov.w	r5, #0
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	1891      	adds	r1, r2, r2
 8004446:	6439      	str	r1, [r7, #64]	; 0x40
 8004448:	415b      	adcs	r3, r3
 800444a:	647b      	str	r3, [r7, #68]	; 0x44
 800444c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004450:	1912      	adds	r2, r2, r4
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	00d9      	lsls	r1, r3, #3
 8004460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004464:	00d0      	lsls	r0, r2, #3
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	1911      	adds	r1, r2, r4
 800446c:	6639      	str	r1, [r7, #96]	; 0x60
 800446e:	416b      	adcs	r3, r5
 8004470:	667b      	str	r3, [r7, #100]	; 0x64
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	1891      	adds	r1, r2, r2
 800447e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004480:	415b      	adcs	r3, r3
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004488:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800448c:	f7fc fa92 	bl	80009b4 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4ba5      	ldr	r3, [pc, #660]	; (800472c <UART_SetConfig+0x38c>)
 8004496:	fba3 2302 	umull	r2, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	011e      	lsls	r6, r3, #4
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	461c      	mov	r4, r3
 80044a2:	f04f 0500 	mov.w	r5, #0
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	6339      	str	r1, [r7, #48]	; 0x30
 80044ae:	415b      	adcs	r3, r3
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
 80044b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044b6:	1912      	adds	r2, r2, r4
 80044b8:	eb45 0303 	adc.w	r3, r5, r3
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	00d9      	lsls	r1, r3, #3
 80044c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ca:	00d0      	lsls	r0, r2, #3
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	1911      	adds	r1, r2, r4
 80044d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80044d4:	416b      	adcs	r3, r5
 80044d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80044e6:	415b      	adcs	r3, r3
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044f2:	f7fc fa5f 	bl	80009b4 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4b8c      	ldr	r3, [pc, #560]	; (800472c <UART_SetConfig+0x38c>)
 80044fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2164      	movs	r1, #100	; 0x64
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a87      	ldr	r2, [pc, #540]	; (800472c <UART_SetConfig+0x38c>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800451c:	441e      	add	r6, r3
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	4618      	mov	r0, r3
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1894      	adds	r4, r2, r2
 800452c:	623c      	str	r4, [r7, #32]
 800452e:	415b      	adcs	r3, r3
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004536:	1812      	adds	r2, r2, r0
 8004538:	eb41 0303 	adc.w	r3, r1, r3
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	f04f 0500 	mov.w	r5, #0
 8004544:	00dd      	lsls	r5, r3, #3
 8004546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800454a:	00d4      	lsls	r4, r2, #3
 800454c:	4622      	mov	r2, r4
 800454e:	462b      	mov	r3, r5
 8004550:	1814      	adds	r4, r2, r0
 8004552:	653c      	str	r4, [r7, #80]	; 0x50
 8004554:	414b      	adcs	r3, r1
 8004556:	657b      	str	r3, [r7, #84]	; 0x54
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	461a      	mov	r2, r3
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	1891      	adds	r1, r2, r2
 8004564:	61b9      	str	r1, [r7, #24]
 8004566:	415b      	adcs	r3, r3
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004572:	f7fc fa1f 	bl	80009b4 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4b6c      	ldr	r3, [pc, #432]	; (800472c <UART_SetConfig+0x38c>)
 800457c:	fba3 1302 	umull	r1, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	2164      	movs	r1, #100	; 0x64
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	3332      	adds	r3, #50	; 0x32
 800458e:	4a67      	ldr	r2, [pc, #412]	; (800472c <UART_SetConfig+0x38c>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	f003 0207 	and.w	r2, r3, #7
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4432      	add	r2, r6
 80045a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a2:	e0b9      	b.n	8004718 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a6:	461c      	mov	r4, r3
 80045a8:	f04f 0500 	mov.w	r5, #0
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	6139      	str	r1, [r7, #16]
 80045b4:	415b      	adcs	r3, r3
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045bc:	1912      	adds	r2, r2, r4
 80045be:	eb45 0303 	adc.w	r3, r5, r3
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f04f 0100 	mov.w	r1, #0
 80045ca:	00d9      	lsls	r1, r3, #3
 80045cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d0:	00d0      	lsls	r0, r2, #3
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	eb12 0804 	adds.w	r8, r2, r4
 80045da:	eb43 0905 	adc.w	r9, r3, r5
 80045de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	008b      	lsls	r3, r1, #2
 80045f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045f6:	0082      	lsls	r2, r0, #2
 80045f8:	4640      	mov	r0, r8
 80045fa:	4649      	mov	r1, r9
 80045fc:	f7fc f9da 	bl	80009b4 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b49      	ldr	r3, [pc, #292]	; (800472c <UART_SetConfig+0x38c>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011e      	lsls	r6, r3, #4
 800460e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004610:	4618      	mov	r0, r3
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	1894      	adds	r4, r2, r2
 800461c:	60bc      	str	r4, [r7, #8]
 800461e:	415b      	adcs	r3, r3
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004626:	1812      	adds	r2, r2, r0
 8004628:	eb41 0303 	adc.w	r3, r1, r3
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	f04f 0500 	mov.w	r5, #0
 8004634:	00dd      	lsls	r5, r3, #3
 8004636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800463a:	00d4      	lsls	r4, r2, #3
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	1814      	adds	r4, r2, r0
 8004642:	64bc      	str	r4, [r7, #72]	; 0x48
 8004644:	414b      	adcs	r3, r1
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004660:	0082      	lsls	r2, r0, #2
 8004662:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004666:	f7fc f9a5 	bl	80009b4 <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <UART_SetConfig+0x38c>)
 8004670:	fba3 1302 	umull	r1, r3, r3, r2
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	2164      	movs	r1, #100	; 0x64
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	3332      	adds	r3, #50	; 0x32
 8004682:	4a2a      	ldr	r2, [pc, #168]	; (800472c <UART_SetConfig+0x38c>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468e:	441e      	add	r6, r3
 8004690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004692:	4618      	mov	r0, r3
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	1894      	adds	r4, r2, r2
 800469e:	603c      	str	r4, [r7, #0]
 80046a0:	415b      	adcs	r3, r3
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a8:	1812      	adds	r2, r2, r0
 80046aa:	eb41 0303 	adc.w	r3, r1, r3
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	f04f 0500 	mov.w	r5, #0
 80046b6:	00dd      	lsls	r5, r3, #3
 80046b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046bc:	00d4      	lsls	r4, r2, #3
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	eb12 0a00 	adds.w	sl, r2, r0
 80046c6:	eb43 0b01 	adc.w	fp, r3, r1
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	008b      	lsls	r3, r1, #2
 80046de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046e2:	0082      	lsls	r2, r0, #2
 80046e4:	4650      	mov	r0, sl
 80046e6:	4659      	mov	r1, fp
 80046e8:	f7fc f964 	bl	80009b4 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <UART_SetConfig+0x38c>)
 80046f2:	fba3 1302 	umull	r1, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <UART_SetConfig+0x38c>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 020f 	and.w	r2, r3, #15
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4432      	add	r2, r6
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	377c      	adds	r7, #124	; 0x7c
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	40011000 	.word	0x40011000
 8004728:	40011400 	.word	0x40011400
 800472c:	51eb851f 	.word	0x51eb851f

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4d0d      	ldr	r5, [pc, #52]	; (8004768 <__libc_init_array+0x38>)
 8004734:	4c0d      	ldr	r4, [pc, #52]	; (800476c <__libc_init_array+0x3c>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	2600      	movs	r6, #0
 800473c:	42a6      	cmp	r6, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	4d0b      	ldr	r5, [pc, #44]	; (8004770 <__libc_init_array+0x40>)
 8004742:	4c0c      	ldr	r4, [pc, #48]	; (8004774 <__libc_init_array+0x44>)
 8004744:	f000 f820 	bl	8004788 <_init>
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	2600      	movs	r6, #0
 800474e:	42a6      	cmp	r6, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f855 3b04 	ldr.w	r3, [r5], #4
 8004758:	4798      	blx	r3
 800475a:	3601      	adds	r6, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004762:	4798      	blx	r3
 8004764:	3601      	adds	r6, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	080047c8 	.word	0x080047c8
 800476c:	080047c8 	.word	0x080047c8
 8004770:	080047c8 	.word	0x080047c8
 8004774:	080047cc 	.word	0x080047cc

08004778 <memset>:
 8004778:	4402      	add	r2, r0
 800477a:	4603      	mov	r3, r0
 800477c:	4293      	cmp	r3, r2
 800477e:	d100      	bne.n	8004782 <memset+0xa>
 8004780:	4770      	bx	lr
 8004782:	f803 1b01 	strb.w	r1, [r3], #1
 8004786:	e7f9      	b.n	800477c <memset+0x4>

08004788 <_init>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	bf00      	nop
 800478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478e:	bc08      	pop	{r3}
 8004790:	469e      	mov	lr, r3
 8004792:	4770      	bx	lr

08004794 <_fini>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr
